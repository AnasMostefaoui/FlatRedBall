using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using FlatRedBall.Glue.SaveClasses;
using System.Drawing;
using FlatRedBall.Glue.FormHelpers;

namespace FlatRedBall.Glue.Controls
{
    public class NamedObjectListTreeNode : TreeNode
    {
        public NamedObjectListTreeNode(string text)
            : base(text)
        {
            
        }

        public TreeNode GetTreeNodeFor(NamedObjectSave namedObjectSave)
        {
            return GetTreeNodeFor(namedObjectSave, this);
        }

		public TreeNode GetTreeNodeFor(NamedObjectSave namedObjectSave, TreeNode treeNode)
		{
			for (int i = 0; i < treeNode.Nodes.Count; i++)
			{
                TreeNode node = treeNode.Nodes[i];

				if (node.Tag == namedObjectSave)
				{
					return node;
				}

                TreeNode returnValue = GetTreeNodeFor(namedObjectSave, node);

                if (returnValue != null)
                {
                    return returnValue;
                }
			}

			return null;
		}

        public void UpdateToNamedObjectSaves(List<NamedObjectSave> namedObjectList)
        {
            UpdateToNamedObjectSaves(namedObjectList, this);

        }

        public void UpdateToNamedObjectSaves(List<NamedObjectSave> namedObjectList, TreeNode currentNode)
        {
            int hiddenCountSoFar = 0;

            for (int i = 0; i < namedObjectList.Count; i++)
            {
                NamedObjectSave namedObject = namedObjectList[i];

                TreeNode treeNode = GetTreeNodeFor(namedObject, currentNode);

                if (treeNode == null && (!namedObject.IsNodeHidden || EditorData.PreferenceSettings.ShowHiddenNodes))
                {
                    treeNode = new TreeNode(namedObject.InstanceName);
                    treeNode.SelectedImageKey = "object.png";
                    treeNode.ImageKey = "object.png";
                    
                    treeNode.Tag = namedObject;

                    currentNode.Nodes.Add(treeNode);
                }
                else if (treeNode == null && namedObject.IsNodeHidden && EditorData.PreferenceSettings.ShowHiddenNodes == false)
                {
                    hiddenCountSoFar++;
                }
                else if ((namedObject.IsNodeHidden && !EditorData.PreferenceSettings.ShowHiddenNodes) && treeNode != null)
                {
                    currentNode.Nodes.Remove(treeNode);
                }
                

                if(treeNode != null)
                {
                    if (treeNode.Text != namedObject.InstanceName)
                    {
                        treeNode.Text = namedObject.InstanceName;
                    }

                    Color colorToSet = GetNosTreeNodeColor(namedObject);

                    if (colorToSet != treeNode.ForeColor)
                    {
                        treeNode.ForeColor = colorToSet;
                    }
                                    
                    int indexOfTreeNode = currentNode.Nodes.IndexOf(treeNode);

                    if (indexOfTreeNode + hiddenCountSoFar != i && indexOfTreeNode != -1)
                    {
                        currentNode.Nodes.Remove(treeNode);
                        currentNode.Nodes.Insert(i, treeNode);
                    }
                }
			}

            for (int i = currentNode.Nodes.Count - 1; i > -1; i--)
            {
                NamedObjectSave treeNamedObject = currentNode.Nodes[i].Tag as NamedObjectSave;

                if (!namedObjectList.Contains(treeNamedObject))
                {
                    currentNode.Nodes.RemoveAt(i);
                }
                else
                {
                    UpdateToNamedObjectSaves(treeNamedObject.ContainedObjects, currentNode.Nodes[i]);
                }
            }
        }

        public static Color GetNosTreeNodeColor(NamedObjectSave namedObject)
        {
            Color colorToSet;

            if (namedObject.IsDisabled)
            {
                colorToSet = ElementViewWindow.DisabledColor;
            }
            else if (namedObject.IsContainer)
            {
                colorToSet = ElementViewWindow.IsContainerColor;
            }
            else if (namedObject.SetByDerived)
            {
                colorToSet = ElementViewWindow.SetByDerivedColor;
            }
            else if (namedObject.InstantiatedByBase)
            {
                colorToSet = ElementViewWindow.InstantiatedByBase;
            }
            else if (namedObject.DefinedByBase)
            {
                colorToSet = ElementViewWindow.DefinedByBaseColor;
            }
            else if (namedObject.FileCreatedBy != null)
            {
                colorToSet = ElementViewWindow.AutoGeneratedColor;
            }
            else if (namedObject.SourceType == SourceType.FlatRedBallType && namedObject.SourceClassType == "Layer")
            {
                colorToSet = ElementViewWindow.LayerObjectColor;
            }
            else
            {
                colorToSet = Color.White;
            }
            return colorToSet;
        }
    }
}
