<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlatRedBallMdx</name>
    </assembly>
    <members>
        <member name="T:FlatRedBall.PositionedObject">
            <summary>
            Represents an object with position, rotation, ability to 
            store instructions, and attachment abilities.
            </summary>
            <remarks>
            The PositionedObject is a common object in FlatRedBall.  It is the root class
            for a number of FlatRedBall classes including Sprites, Texts, SpriteFrames, PositionedModels,
            and all Shapes.
            <para>
            The PositionedObject class is also used as the base class when creating custom Entitiy objects.
            </para>
            <para>
            PositionedObjects can be automatically managed by being added to the SpriteManager.
            </para>
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.IAttachable">
            <summary>
            Interface for an object which can be attached to a parent.
            </summary>
            <remarks>
            IAttachables do not necessarily have to be positioned objects - they
            can also be objects which have un-positioned attachments.  For example,
            an event in a scripted sequence might have a parent event which it executes
            after.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Utilities.INameable">
            <summary>
            Defines that an object has a name.
            </summary>
            <remarks>
            Objects which are referenced by other objects in serializable classes
            should be INameable so that the in-memory reference can be coverted to
            a string and then re-created when the object is deserialized.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Utilities.INameable.Name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.IAttachable.ClearRelationships">
            <summary>
            Clears all attachments to parents and removes all attached Children.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.IAttachable.Detach">
            <summary>
            Detaches the instance from its parent and removes it from its parent's Children List.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.IAttachable.ForceUpdateDependencies">
            <summary>
            Forces an update of the instance and calls ForceUpdateDependencies on its parent.
            </summary>
            <remarks>
            This method will recursively crawl up the Parent property until it reaches the TopParent.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IAttachable.ListsBelongingTo">
            <summary>
            Gets all lists that the instance belongs to.
            </summary>
            <remarks>
            This property provides the two-way relationship between IAttachables and
            and common FlatRedBall Lists.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.IPositionable">
            <summary>
            Provides an interface for 3D position, velocity, and acceleration.
            </summary>
            <remarks>
            For an interface which provides only and no velocity and acceleration, see
            FlatRedBall.Math.IStaticPositionable.
            <seealso cref="T:FlatRedBall.Math.IStaticPositionable"/>
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.IStaticPositionable">
            <summary>
            Provides an interface for 3D position.
            </summary>
            <remarks>
            Does not include Velocity and Acceleration like IPositionable.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IStaticPositionable.X">
            <summary>
            The absolute X position.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IStaticPositionable.Y">
            <summary>
            The absolute Y position.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IStaticPositionable.Z">
            <summary>
            The absolute Z position.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.XVelocity">
            <summary>
            Gets and sets the absolute X Velocity.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.YVelocity">
            <summary>
            Gets and sets the absolute Y Velocity.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.ZVelocity">
            <summary>
            Gets and sets the absolute Z Velocity.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.XAcceleration">
            <summary>
            Gets and sets the absolute X Acceleration.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.YAcceleration">
            <summary>
            Gets and sets the absolute Y Acceleration.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IPositionable.ZAcceleration">
            <summary>
            Gets and sets the absolute Z Acceleration.  Meausred in units per second.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.IRotatable">
            <summary>
            Provides an interface for objects which can be rotated in 3D space.  Includes
            absolute rotation values and rotational velocity values.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationMatrix">
            <summary>
            Gets and sets the absolute rotation matrix.
            </summary>
            <remarks>
            Implementers should mirror changes to the RotationMatrix in the
            individual rotation values.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationX">
            <summary>
            Gets and sets the rotation on the X Axis.
            </summary>
            <remarks>
            Implementors should mirror changes to invididual rotation values in the
            RotationMatrix property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationY">
            <summary>
            Gets and sets the rotation on the Y Axis.
            </summary>
            <remarks>
            Implementors should mirror changes to invididual rotation values in the
            RotationMatrix property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationZ">
            <summary>
            Gets and sets the rotation on the Z Axis.
            </summary>
            <remarks>
            Implementors should mirror changes to invididual rotation values in the
            RotationMatrix property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationXVelocity">
            <summary>
            Gets and sets the rotational velocity on the X Axis.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationYVelocity">
            <summary>
            Gets and sets the rotational velocity on the Y Axis.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.IRotatable.RotationZVelocity">
            <summary>
            Gets and sets the rotational velocity on the Z Axis.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.IInstructable">
            <summary>
            Provides an interface for objects which can store Instructions.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.IInstructable.Instructions">
            <summary>
            The list of Instructions that this instance owns.  These instructions usually
            will execute on this instance; however, this is not a requirement.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.Position">
            <summary>
            The absolute world position of the instance.
            </summary>
            <remarks>
            This mirrors the X, Y, and Z properties.  This value essentially becomes
            read-only if this object has a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RelativePosition">
            <summary>
            The position of the object relative to its Parent in its Parent's coordinate space.
            </summary>
            <remarks>
            These values become the dominant controller of absolute Position if this
            instance has a Parent.  These values have no impact if the instance does not
            have a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.Velocity">
            <summary>
            The absolute world velocity of the instance measured in units per second.
            </summary>
            <remarks>
            This mirrors the XVelocity, YVelocity, and ZVelocity properties.  This value is essentially
            invalid if this instance has a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RelativeVelocity">
            <summary>
            The velocity of the object relative to its Parent in its Parent's cooridnate space.
            </summary>
            <remarks>
            This value modifies the RelativePosition field even if the object does not have a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.Acceleration">
            <summary>
            The absolute world acceleration of the instance measured in units per second per second.
            </summary>
            <remarks>
            This mirrors the XAcceleration, YAcceleration, and ZAcceleration properties.  This value is
            essentially invalid if the instance has a Parent; however, it can still build up the Velocity
            value.  
            <para>
            If an object with a parent has a non-zero Acceleration for a significant amount of time, then is
            detached, the Velocity will likely be non-zero and may be very large causing the object to move
            rapidly.
            </para>
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RelativeAcceleration">
            <summary>
            The acceleration of the object relative to its Parent in its Parent's coordinate space.
            </summary>
            <remarks>
            This value modifies the RelativeVelocity field even if the object does not have a Parent.
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RealVelocity">
            <summary>
            The actual velocity of the object from the last frame to this frame.  This value is only valid
            if the KeepTrackOfReal property has been true for over one frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.RealAcceleration">
            <summary>
            The actualy acceleration of the object from the last frame to this frame.  This value is only valid
            if the KeepTrackOfReal property has been set to true for over two frames.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.LastPosition">
            <summary>
            The last Position of the object - used to calculate the RealVelocity field.  This is
            valid only if the KeepTrackOfReal property is true.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.LastVelocity">
            <summary>
            The last Velocity of the object - this is used to calculate the RealAcceleration field.  This is
            valid only if the KeepTrackOfReal property is true.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mDrag">
            <summary>
            The drag of the instance.
            </summary>
            <remarks>
            <seealso cref="P:FlatRedBall.PositionedObject.Drag"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mName">
            <summary>
            The name of the instance.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationX">
            <summary>
            The X component of the object's absolute rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationY">
            <summary>
            The Y component of the object's absolute rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationZ">
            <summary>
            The Z component of the object's absolute rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationXVelocity">
            <summary>
            The X component of the object's absolute rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationYVelocity">
            <summary>
            The Y component of the object's absolute rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationZVelocity">
            <summary>
            The Z component of the object's absolute rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationX">
            <summary>
            The X component of the object's relative rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationY">
            <summary>
            The Y component of the object's relative rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationZ">
            <summary>
            The Z component of the object's relative rotation.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationXVelocity">
            <summary>
            The X component of the object's relative rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationYVelocity">
            <summary>
            The Y component of the object's relative rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationZVelocity">
            <summary>
            The Z component of the object's relative rotational velocity.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRotationMatrix">
            <summary>
            The matrix representing the absolute orientation of the instance.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mRelativeRotationMatrix">
            <summary>
            The matrix representing the relative orientation of the object in parent space.  This
            has no impact if the Parent is null.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mListsBelongingTo">
            <summary>
            The lists that this instance belongs to.  This is how two-way relationships are implemented.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mParent">
            <summary>
            The PositionedObject that this is attached to.  If it is null then this does not
            follow any relative properties.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mChildren">
            <summary>
            The objects that are attached to this instance.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mLastDependencyUpdate">
            <summary>
            The value that was last used when calling UpdateDependencies.
            </summary>
        </member>
        <member name="F:FlatRedBall.PositionedObject.mInstructions">
            <summary>
            The instructions that belong to this instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.#ctor">
            <summary>
            Creates a new PositionedObject instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.AreSubHierarchiesIdentical(FlatRedBall.PositionedObject,FlatRedBall.PositionedObject)">
            <summary>
            Determines whether the tree structure created by attachments of two PositionedObjects are identical.
            </summary>
            <remarks>
            This method does not investigate the PositionedObjects any more than looking at their children.  It traverses
            through the trees multiple times, and can be a very slow method if the PositionedObjects have large subtrees.  
            The subtrees are small enough in most cases
            where there won't be a performance issue.
            </remarks>
            <param name="s1">The first PositionedObject.</param>
            <param name="s2">The second PositionedObject.</param>
            <returns>Whether the tree structure created by attachments is the same.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.AttachTo(FlatRedBall.PositionedObject,System.Boolean)">
            <summary>
            Attaches this PositionedObject to the argument newParent.
            </summary>
            <remarks>
            <para>A useful way to understand the affect of changeRelative is to consider that it is the opposite of whether 
            absolute values change.  That is, if the relative values do not change upon attachment, the absolute values
            will change.</para>
            <para>
            For an example, consider a situation where a child has an absolute x value of 5 and a relative value of 0 and
            a parent has an absolute x value of 0.  If the child is attached to the parent
            and relative is not changed (relative x remains at 0), then the child's x will be 
            parent.x + child.relX, or 0 + 0 = 0.  We see that the relative value didn't 
            change, so the absolute did.
            </para>
            <para>
            If, on the other hand, the relative was changed, the absolute position would be the same.
            Since the parent's absolute position was 0 and the absolute position of the 
            child should remain at 5, then the relX value would change to 5 (assuming 
            the parent isn't rotated).
            </para>
            </remarks>
            <param name="newParent">The PositionedObject to attach to.</param>
            <param name="changeRelative">Whether relative values should change so that absolute values stay the same.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ClearRelationships">
            <summary>
            Detaches this PositionedObject from its parent and detaches all of the PositionedObject's 
            Children.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CopyFieldsTo(FlatRedBall.PositionedObject)">
            <summary>
            Copies most internal fields of this instance to the argument PositionedObjects.
            </summary>
            <remarks>
            The following fields are not copied:
            <para>* Name</para>
            <para>* ListsBelongingTo</para>
            <para>* Parent</para>
            <para>* Children</para>
            <para>* Instructions</para>
            </remarks>
            <param name="positionedObject"></param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CopyAbsoluteToRelative">
            <summary>
            Copies the absolute position and rotation values to the relative values.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Clone``1">
            <summary>
            Creates a clone of this instance typed as a T.
            </summary>
            <typeparam name="T">The type of the new object.</typeparam>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CreateNewChildrenList">
            <summary>
            Creates a new Children PositionedObjectList.
            </summary>
            <remarks>
            This method is only necessary if a PositionedObject
            is manually cloned by calling MemberwiseClone.  This
            should not be called to detach children as the two-way
            relationship between PositionedObject and PositionedObjectList
            will keep the old Children PositionedObjectList in scope resulting
            in a memory leak.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.CreateNewInstructionsList">
            <summary>
            Creates a new InstructionList.
            </summary>
            <remarks>
            This method is only necessary if a PositionedObject
            is manually cloned by calling MemberwiseClone.  This
            should not be called to clear the Instructions property
            as it will create a new instance and get rid fo the old one
            resulting in unnecessary garbage collection.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Detach">
            <summary>
            Detaches the PositionedObject from its parent PositionedObject.
            </summary>
            <remarks>
            This method cleans up the two way relationship between parent and child.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ExecuteInstructions(System.Double)">
            <summary>
            Executes instructions according to the argument currentTime and cycles and reorders
            Instructions as necessary.
            </summary>
            <param name="currentTime">The current time to compare teh instruction's TimeToExecute against.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ForceUpdateDependencies">
            <summary>
            Forces an update of the PositionedObject's absolute position and rotation values 
            according to its attachment and relative values.
            </summary>
            <remarks>
            The absolute positions and rotations of Sprites are updated in the 
            Sprite.UpdateDependencies method which is
            called in the SpriteManager.UpdateDependencies.  The SpriteManager.UpdateDependencies is called
            once per frame by default in the Sprite's regular activity.  This method only needs to be called 
            if changes are made after
            the UpdateDependencies method has been called for that particular frame or if updated 
            positions are needed
            immediately after relative values or attachments have been changed.
            
            <para>This method will recur up the hierarchical PositionedObject struture stopping 
            when it hits the top parent.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.GetAllDescendantsOneWay(FlatRedBall.Math.AttachableList{FlatRedBall.PositionedObject})">
            <summary>
            Fills the argument list with the instance's parent, grandparent, etc. recursively.
            </summary>
            <param name="positionedObjects">The list to fill.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Initialize">
            <summary>
            Resets all properties to their default values and clears the ListsBelongingTo property.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Initialize(System.Boolean)">
            <summary>
            Resets all properties to their default values.
            </summary>
            <param name="clearListsBelongingTo">Whether the instance should clear its ListsBelongingTo property.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.IsParentOf(FlatRedBall.Math.IAttachable)">
            <summary>
            Determines whether this is a parent (or grandparent of any level) of the argument
            PositionedObject
            </summary>
            <param name="attachable">The PositionedObject to test whether it is lower 
            in the same hiearchical structure.</param>
            <returns>Whether the attachable argument is a child of this instance.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.Pause(FlatRedBall.Instructions.InstructionList)">
            <summary>
            Stops all automatic behavior and stores the necessary instructions to 
            resume activity in the argument InstructionList.
            </summary>
            <param name="instructions">The List to store instructions which are executed to
            resume activity.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.RemoveSelfFromListsBelongingTo">
            <summary>
            Removes this instance from all Lists that it shares two-way
            relationships with.
            </summary>
            <remarks>
            FlatRedBall managers use this method in Remove methods.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ResetRealValues">
            <summary>
            Sets the internal storage of the last frame's position and velocity
            so that the next frame's real velocity and acceleration values will be
            Vector3.Zero.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.SetRealValuesFrom(FlatRedBall.PositionedObject)">
            <summary>
            Copies all values related to "Real" values from the argument
            PositionedObject to this instance.
            </summary>
            <param name="positionedObject">The PositionedObject to copy Real values from.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.SetRelativeFromAbsolute">
            <summary>
            Uses the object's absolute position and orientation along with its
            Parent's orientation and position to update its relative position and orientation.
            </summary>
        </member>
        <member name="M:FlatRedBall.PositionedObject.TimedActivity(System.Single,System.Double,System.Single)">
            <summary>
            Performs the every-frame position and rotation changing activity.
            </summary>
            <remarks>
            This method does not need to be explicitly called
            for managed objects such as Sprites and collision shapes.
            This method is exposed for custom PositionedObjects which
            are not added to a Manager.
            </remarks>
            <param name="secondDifference">The amount of time since last frame.</param>
            <param name="secondDifferenceSquaredDividedByTwo">Pre-calculated ((secondDifference*secondDifference) ^2) / 2.</param>
            <param name="secondsPassedLastFrame">The last frame secondDifference.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.TimedActivityRelative(System.Single,System.Double)">
            <summary>
            Performs the every-frame relative position and relative rotation changing activity.
            </summary>
            <remarks>
            This method does not need to be explicitly called
            for managed objects such as Sprites and collision shapes.
            This method is exposed for custom PositionedObjects which
            are not added to a Manager.
            </remarks>
            <param name="secondDifference">The amount of time since last frame.</param>
            <param name="secondDifferenceSquaredDividedByTwo">Pre-calculated ((secondDifference*secondDifference) ^2) / 2.</param>
        </member>
        <member name="M:FlatRedBall.PositionedObject.ToString">
            <summary>
            Returns a string containing common information about the PositionedObject.
            </summary>
            <returns>The string containing the information about this object.</returns>
        </member>
        <member name="M:FlatRedBall.PositionedObject.UpdateDependencies(System.Double)">
            <summary>
            Updates the absolute position and rotation using relative values and the Parent PositionedObject.
            </summary>
            <remarks>
            This method recurs up the hierarchical chain calling UpdateDependencies so that the entire family of 
            PositionedObjects is positioned appropriately.
            </remarks>
        </member>
        <member name="M:FlatRedBall.PositionedObject.UpdateRotationValuesAccordingToMatrix">
            <summary>
            Sets the absolute rotation values according to the object's RotationMatrix.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Children">
            <summary>
            The list of PositionedObjects that are attached to this instance.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ListsBelongingTo">
            <summary>
            The List of IAttachableRemovables (containers) that this shares a two-way relationship with.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Name">
            <summary>
            The instance's name.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Parent">
            <summary>
            The PositionedObject that this instance is attached to.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ParentRotationChangesPosition">
            <summary>
            Whether the parent's rotation should change the object's position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ParentRotationChangesRotation">
            <summary>
            Gets and sets whether the parent's rotation should change the object's rotation.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeX">
            <summary>
            Gets and sets the X position relative to the instance's parent.
            </summary>
            <remarks>
            If the instance does not have a parent this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeY">
            <summary>
            Gets and sets the Y position relative to the instance's parent.
            </summary>
            <remarks>
            If the instance does not have a parent this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeZ">
            <summary>
            Gets and sets the Z position relative to the instance's parent.
            </summary>
            <remarks>
            If the instance does not have a parent this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeXVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeX property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeYVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeY property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeZVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeZ property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeXAcceleration">
            <summary>
            Gets and sets the rate of change of the RelativeXVelocity property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeYAcceleration">
            <summary>
            Gets and sets the rate of change of the RelativeYVelocity property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeZAcceleration">
            <summary>
            Gets and sets the rate of change of the RelativeZVelocity property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationX">
            <summary>
            Gets and sets the rotation on the X axis relative to the instance's parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationY">
            <summary>
            Gets and sets the rotation on the Y axis relative to the instance's parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationZ">
            <summary>
            Gets and sets the rotation on the Z axis relative to the instance's parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationMatrix">
            <summary>
            The rotation representing the orientation relative to the instance's Parent.
            </summary>
            <remarks>
            If the instance does not have a Parent then this property has no effect.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationXVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeRotationX property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationYVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeRotationY property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RelativeRotationZVelocity">
            <summary>
            Gets and sets the rate of change of the RelativeRotationZ property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.LastDependencyUpdate">
            <summary>
            The last time Update was called.
            </summary>
            <remarks>
            This value is set through the TimeManager's CurrentTime property.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationX">
            <summary>
            The x rotation of a PositionedObject
            </summary>
            <remarks>
            This rotates the PositionedObject about the X axis.  Rotation is represented in 
            radians.  Angles will always be greater than or equal to 0 and less than
            two times PI.  Values outside of these bounds will be regulated by the
            set property.
            
            RotationX can be used to flip an image of a PositionedObject, but a PositionedObject should not 
            be flipped during animation (if it is a Sprite).  AnimationFrames can be flipped without 
            setting a Sprite's Rotation values.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationY">
            <summary>
            The y rotation of a PositionedObject
            </summary>
            <remarks>
            This rotates the PositionedObject about the Y axis.  Rotation is represented in 
            radians.  Angles will always be greater than or equal to 0 and less than
            two times PI.  Values outside of these bounds will be regulated by the
            set property.
            
            RotationY can be used to flip an image and set it upside down, but a PositionedObject
            should not be flipped during animation (if it is a Sprite).  AnimationFrames can be flipped without
            setting a Sprite's Rotation values.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationZ">
            <summary>
            The z rotation of a PositionedObject
            </summary>
            <remarks>
            This rotates the PositionedObject about the Z axis.  Rotation is represented in 
            radians.  Angles will always be greater than or equal to 0 and less than
            two times PI.  Values outside of these bounds will be regulated by the
            set property.
            
            RotationZ can be used to "spin" a PositionedObject, with a positive variable spinning
            clockwise.  
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationMatrix">
            <summary>
            The matrix applied to the object resulting in its final orientation.
            </summary>
            <remarks>
            The RotationMatrix and RotationX, RotationY, RotationZ reflect eachother.  Changing one will change the other.
            <seealso cref="P:FlatRedBall.PositionedObject.RotationX"/>
            <seealso cref="P:FlatRedBall.PositionedObject.RotationY"/>
            <seealso cref="P:FlatRedBall.PositionedObject.RotationZ"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.TransformationMatrix">
            <summary>
            Gets or sets the overall transformation of this object
            </summary>
            <remarks>
            Changing the transformation matrix will change rotation, position and scaling
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationXVelocity">
            <summary>
            The absolute X rotation speed measured in radians per second
            </summary>
            <remarks>
            The RotationXVelocity variable is how fast a PositionedObject is rotating on the X axis. It is
            measured in radians per second.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationYVelocity">
            <summary>
            The absolute Y rotation speed measured in radians per second
            </summary>
            <remarks>
            The RotationYVelocity variable is how fast a PositionedObject is rotating on the Y axis. It is
            measured in radians per second.
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.RotationZVelocity">
            <summary>
            The absolute Z rotation speed measured in radians per second
            </summary>
            <remarks>
            The RotationZVelocity variable is how fast a PositionedObject is rotating on the Z axis. It is
            measured in radians per second.
            </remarks>
            
        </member>
        <member name="P:FlatRedBall.PositionedObject.TopParent">
            <summary>
            Returns the top node in the attachment hierarchical relationship
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.X">
            <summary>
            The absolute X position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Y">
            <summary>
            The absolute Y position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Z">
            <summary>
            The absolute Z position.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.XVelocity">
            <summary>
            Gets and sets the absolute X Velocity.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.YVelocity">
            <summary>
            Gets and sets the absolute Y Velocity.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ZVelocity">
            <summary>
            Gets and sets the absolute Z Velocity.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.XAcceleration">
            <summary>
            Gets and sets the absolute X Acceleration.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.YAcceleration">
            <summary>
            Gets and sets the absolute Y Acceleration.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.ZAcceleration">
            <summary>
            Gets and sets the absolute Z Acceleration.  Meausred in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.KeepTrackOfReal">
            <summary>
            Whether the PositionedObject's RealVelocity and RealAcceleration are
            updated every frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Drag">
            <summary>
            Linear approximation of drag.  This reduces the Velocity of the
            instance according to its absolute Velocity.  
            </summary>
            <remarks>
            The following formula is applied to apply Drag:
            <para>
            Velocity -= Velocity * Drag * TimeManager.SecondDifference;
            
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.PositionedObject.Instructions">
            <summary>
            The list of Instructions that this instance owns.  These instructions usually
            will execute on this instance; however, this is not a requirement.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.FixAspectRatioYConstant">
            <summary>
            Sets the aspectRatio to match the width/height of the area that the camera is drawing to.
            </summary>
            <remarks>
            This is usually used in applications with split screen or when on a widescreen display.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Camera.IsXInView(System.Double,System.Double)">
            <summary>
            Determines if the X value is in view, assuming the camera is viewing down the Z axis.
            </summary>
            <remarks>
            Currently, this method assumes viewing down the Z axis.
            </remarks>
            <param name="x">The absolute X position of the point.</param>
            <param name="z">The absolute Z position of the point.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Camera.IsYInView(System.Double,System.Double)">
            <summary>
            Determines if the Y value is in view, assuming the camera is viewing down the Z axis.
            </summary>
            <remarks>
            Currently, this method assumes viewing down the Z axis.
            </remarks>
            <param name="y">The absolute Y position of the point.</param>
            <param name="z">The absolute Z position of the point.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Camera.PixelsPerUnitAt(System.Single)">
            <summary>
            Returns the number of pixels per unit at the given absolute Z value.  Assumes
            that the Camera is unrotated.
            </summary>
            <remarks>
            If using the PixelsPerUnitAt for a rotated camera, use the overload which
            takes a Vector3 argument.
            </remarks>
            <param name="absoluteZ">The absolute Z position.</param>
            <returns>The number of pixels per world unit (perpendicular to the camera's forward vector).</returns>
        </member>
        <member name="M:FlatRedBall.Camera.UsePixelCoordinates(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sets the camera to Orthogonal, sets the OrthogonalWidth and
            OrthogonalHeight to match the argument values, and can move the
            so the bottom-left corner of the screen is at the origin.
            </summary>
            <param name="moveCornerToOrigin">Whether the camera should be repositioned
            so the bottom left is at the origin.</param>
            <param name="desiredWidth">The desired unit width of the view.</param>
            <param name="desiredHeight">The desired unit height of the view.</param>
        </member>
        <member name="F:FlatRedBall.Camera.mLightingEnabled">
            <summary>
            Whether or not lighting is enabled for this camera
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.AddLayer(FlatRedBall.Graphics.Layer)">
            <summary>
            Adds a layer to the Camera.  This method does not remove layers that already 
            exist in the SpriteManager.
            </summary>
            <param name="layerToAdd">The layer to add.</param>
        </member>
        <member name="M:FlatRedBall.Camera.AddSpriteToBillboard(FlatRedBall.Sprite)">
            <summary>
            Supplied sprites are billboarded using the camera's RotationMatrix.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.AddSpriteToBillboard(System.Collections.Generic.IEnumerable{FlatRedBall.Sprite})">
            <summary>
            Supplied Sprites are billboarded using the camera's RotationMatrix.
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.ClearBorders">
            <summary>
            Removes all visibility borders.
            <seealso cref="M:FlatRedBall.Camera.SetBordersAtZ(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.KeepSpriteInScreen(FlatRedBall.Sprite)">
            <summary>
            Moves a Sprite so that it remains fully in the camera's view.
            </summary>
            <remarks>
            This method does not consider Sprite rotation, negative scale, or situations 
            when the camera is not looking down the Z axis.
            </remarks>
            <param name="sprite">The Sprite to keep in view.</param>
        </member>
        <member name="M:FlatRedBall.Camera.PositionRandomlyInView(FlatRedBall.Math.IPositionable,System.Single,System.Single)">
            <summary>
            Positiones the argument positionable randomly in camera between the argument bounds.
            </summary>
            <remarks>
            Assumes the camera is viewing down the Z plane - it is unrotated.
            </remarks>
            <param name="positionable">The object to reposition.</param>
            <param name="minimumDistanceFromCamera">The closest possible distance from the camera.</param>
            <param name="maximumDistanceFromCamera">The furthest possible distance from the camera.</param>
        </member>
        <member name="M:FlatRedBall.Camera.RemoveLayer(FlatRedBall.Graphics.Layer)">
            <summary>
            Removes the argument Layer from this Camera.  Does not empty the layer or
            remove contained objects from their respective managers.
            </summary>
            <param name="layerToRemove">The layer to remove</param>
        </member>
        <member name="M:FlatRedBall.Camera.SetBordersAtZ(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the visible borders when the camera is looking down the Z axis.
            </summary>
            <remarks>
            This sets visibility ranges for the camera.  That is, if the camera's maximumX is set to 100 at a zToSetAt of 
            0, the camera will never be able to see the point x = 101, z = 0.  The camera imposes these limitations 
            by calculating the actual minimum and maximum values according to the variables passed.  Also, 
            the camera keeps track of these visible limits and readjusts the mimimum and maximum values 
            when the camera moves in the z direction. Therefore, it is only necessary to set these 
            values once, and the camera will remeber that these are the visibility borders, regardless of 
            its position.  It is important to note that the visiblity borders can be violated if they are too 
            close together - if a camera moves so far back that its viewable area at the set Z is greater than 
            the set minimumX and maximumX range, the camera will show an area outside of this range.
            <seealso cref="M:FlatRedBall.Camera.ClearBorders"/>
            </remarks>
            <param name="minimumX">The minimum x value of the visiblity border.</param>
            <param name="minimumY">The minimum y value of the visiblity border.</param>
            <param name="maximumX">The maximum x value of the visiblity border.</param>
            <param name="maximumY">The maximum y value of the visiblity border.</param>
            <param name="zToSetAt">The z value of the plane to use for the visibility border.</param>
        </member>
        <member name="M:FlatRedBall.Camera.SetCameraTo(FlatRedBall.Camera)">
            <summary>
            Copies all fields from the argument to the camera instance.
            </summary>
            <remarks>
            This method will not copy the name, InstructionArray, or children PositionedObjects 
            (objects attached to the cameraToSetTo).
            </remarks>
            <param name="cameraToSetTo">The camera to clone.</param>
        </member>
        <member name="M:FlatRedBall.Camera.SetSplitScreenViewport(FlatRedBall.Camera.SplitScreenViewport)">
            <summary>
            Sets the viewport for this camera to a standard split-screen viewport
            </summary>
            <param name="viewport">The viewport to use for this camera</param>
        </member>
        <member name="M:FlatRedBall.Camera.CalculateMaxAndMins">
            <summary>
            Calculates the minimum and maximum X values for the camera based off of its
            base values (such as mBaseMaximumX) and its current view
            </summary>
        </member>
        <member name="M:FlatRedBall.Camera.UpdateDestinationRectangle">
            <summary>
            Updates the destination rectangle (for the viewport).  Also fixes the aspect ratio.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.AspectRatio">
            <summary>
            The width/height of the view of the camera
            </summary>
            <remarks>
            This determines the ratio of the width to height of the camera.  By default, the aspect ratio is 4/3,
            but this should be changed for widescreen monitors or in situations using multiple cameras.  For example, if
            a game is in split screen with a vertical split, then each camera will show the same height, but half the width.
            The aspect ratio should be 2/3.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.DestinationRectangle">
            <summary>
            Represents the top left justified area the Camera will draw over.
            </summary>
            <remarks>
            This represents the area in pixel coordinates that the camera will display relative
            to the top left of the owning Control.  If the Control is resized, the camera should modify
            its DestinationRectangle to match the new area.
            
            <para>
            Multiple cameras with different DestinationRectangles can be used to display split screen
            or picture-in-picture.
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.DrawsCameraLayer">
            <summary>
            Whether the camera draws its layers.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.DrawsWorld">
            <summary>
            Whether the Camera draws world objects (objects not on the Camera's Layer)
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.DrawsShapes">
            <summary>
            Whether the Camera draws shapes
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.FieldOfView">
            <summary>
            The Y field of view of the camera in radians.  Field of view represents the 
            Y angle from the bottom of the screen to the top.
            </summary>
            <remarks>
            This modifies the xEdge and yEdge properties.  Default value is (float)Math.PI / 4.0f;
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.Layer">
            <summary>
            A Camera-specific layer.  Objects on this layer will not appear
            in any other cameras.
            </summary>
            <remarks>
            This instance is automatically created when the Camera is instantiated.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Camera.TopDestination">
            <summary>
            Gets and sets the top side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.  Destination uses an inverted Y (positive points down).
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.BottomDestination">
            <summary>
            Gets and sets the bottom side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.   Destination uses an inverted Y (positive points down).
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.LeftDestination">
            <summary>
            Gets and sets the left side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.
            </summary>
        </member>
        <member name="P:FlatRedBall.Camera.RightDestination">
            <summary>
            Gets and sets the right side of the destination rectangle (where on the window
            the camera will display).  Measured in pixels.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.AnimationChain">
            <summary>
            Represents a collection of AnimationFrames which can be used to perform
            texture flipping animation on IAnimationChainAnimatables such as Sprites.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.#ctor">
            <summary>
            Creates an empty AnimationChain.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.#ctor(System.Int32)">
            <summary>
            Creates a new AnimationChain with the argument capacity.
            </summary>
            <param name="capacity">Sets the initial capacity.  Used to reduce memory allocation.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.FindByName(System.String)">
            <summary>
            Searches for and returns the AnimationFrame with its Name matching
            the nameToSearchFor argument, or null if none are found.
            </summary>
            <param name="nameToSearchFor">The name of the AnimationFrame to search for.</param>
            <returns>The AnimationFrame with matching name, or null if none exists.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChain.FrameToFrame(System.Int32,System.Int32)">
            <summary>
            Returns the shortest absolute number of frames between the two argument frame numbers.  This
            method moves forward and backward and considers looping.
            </summary>
            <param name="frame1">The index of the first frame.</param>
            <param name="frame2">The index of the second frame.</param>
            <returns>The positive or negative number of frames between the two arguments.</returns>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.FrameTime">
            <summary>
            Sets the frameTime of each AnimationFrame in the AnimationChain to the passed value.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.LastFrame">
            <summary>
            Gets the last AnimationFrame of the AnimationChain or null if 
            there are no AnimationFrames.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.Name">
            <summary>
            The name of the AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChain.TotalLength">
            <summary>
            Returns the sum of the FrameLengths of all contained AnimationFrames.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.IDestroyable">
            <summary>Provides a Destroy method, generally used by Glue generated classes</summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Layer">
            <summary>
            Layers are objects which can contain other graphical objects for drawing.  Layers
            are used to create specific ordering and can be used to override depth buffer and
            z-sorted ordering.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Layer.mSprites">
            <summary>
            List of Sprites that belong to this layer.  Sprites should be added
            through SpriteManager.AddToLayer or the AddSprite overloads which 
            include a Layer argument.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Layer.mOverridingFieldOfView">
            <summary>
            Used by the Renderer to override the camera's FieldOfView
            when drawing the layer.  This can be used to give each layer
            a different field of view.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Models">
            <summary>
            The Models referenced by and drawn on the Layer.
            </summary>
            <remarks>
            The Layer stores a regular PositionedModel PositionedObjectList
            internally.  Since this internal list is used for drawing
            the layer the engine sorts it every frame.  
            
            For efficiency purposes the internal PositionedModel PositionedObjectList
            cannot be sorted.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Batches">
            <summary>
            The Batches referenced by and drawn on the Layer.
            </summary>
            <remarks>
            The Layer stores a regular IDrawableBatch PositionedObjectList
            internally.  Since this internal list is used for drawing
            the layer the engine sorts it every frame.  
            
            For efficiency purposes the internal IDrawableBatch PositionedObjectList
            cannot be sorted.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Sprites">
            <summary>
            The Sprites referenced by and drawn on the Layer.
            </summary>
            <remarks>
            The Layer stores a regular SpriteList internally.  Since
            this internal list is used for drawing the layer the engine
            sorts it every frame.  
            
            For efficiency purposes the internal SpriteList cannot be sorted.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Texts">
            <summary>
            The Texts referenced by and drawn on the Layer.
            </summary>
            <remarks>
            The Layer stores a regular Text PositionedObjectList
            internally.  Since this internal list is used for drawing 
            the layer the engine sorts it every frame.  
            
            For efficiency purposes the internal Text PositionedObjectList 
            cannot be sorted.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Layer.Visible">
            <summary>
            Whether the SpriteLayer is visible.
            </summary>
            <remarks>
            This does not set the contained Sprite's visible value to false.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Graphics.RenderOverrides">
            <summary>
            Render overrides are a way to inject new information into the BasicEffect
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.IColorable">
            <summary>
            Provides an interface for objects which can be have their appearance
            modified by alpha and color values using a variety of operations.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Alpha">
            <summary>
            The alpha value to use with the BlendOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Red">
            <summary>
            The red value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Green">
            <summary>
            The green value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.Blue">
            <summary>
            The blue value to use with the color operation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.AlphaRate">
            <summary>
            The rate of change of the alpha component in units per second.  A negative value will make the object disappear over time.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.RedRate">
            <summary>
            The rate of change of the red component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.GreenRate">
            <summary>
            The rate of change of the green component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.BlueRate">
            <summary>
            The rate of change of the blue component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.ColorOperation">
            <summary>
            The color operation to perform using the color component values and 
            Texture (if available).
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IColorable.BlendOperation">
            <summary>
            The blend operation to perform using the alpha component value and
            Texture (if available).
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.IReadOnlyScalable">
            <summary>
            Represents an object which has read-only scale values on two axes.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IReadOnlyScalable.ScaleX">
            <summary>
            Gets the X Scale of the object.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IReadOnlyScalable.ScaleY">
            <summary>
            Gets the Y Scale of the object.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.ICursorSelectable">
            <summary>
            Defines an interface for objects which can be selectable by the cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.ICursorSelectable.CursorSelectable">
            <summary>
            Whether the instance is currently selectable (active).
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.IVisible">
            <summary>
            Interface for an object which has visibility control.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.Clone">
            <summary>
            Creates a new Text object.
            </summary>
            <returns>
            Reference to the new Text object.  The object will not 
            be in the TextManager's memory.
            </returns>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Set the RGB properties of this all at once. 0,0,0 is Black, 1,1,1 is White.
            </summary>
            <param name="red">0 to 1</param>
            <param name="green">0 to 1</param>
            <param name="blue">0 to 1</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.SetPixelPerfectScale(FlatRedBall.Camera)">
            <summary>
            Sets the Scale and Spacing such that the Text is drawn pixel-perfect at its given Z position.
            </summary>
            <param name="camera">Reference to the camera to use when calculating the Scale and Spacing.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.SetPixelPerfectScale(FlatRedBall.Graphics.Layer)">
            <summary>
            Sets the Scale and Spacing such that the Text is drawn pixel-perfect at the given Z position.
            This method obeys the Layer's overridden field of view if it uses one.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:FlatRedBall.Graphics.Text.UpdateDisplayedText">
            <summary>
            Updates the displayed text according to the MaxWidth.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.ContentManager">
            <summary>
            The ContentManager used to store
            textures generated by the Text.  This
            is required for proper cleanup.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.DisplayText">
            <summary>
            Gets or sets the string that the Text object is to display.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.HorizontalCenter">
            <summary>
            Returns the center of the text object.
            </summary>
            <remarks>
            If the text is centered (the format.alignment equals TextManager.Alignment.CENTER),
            this will simply return the x value of the text.  Otherwise, this property
            calculates the center of the text based on the contained string, the format, whether
            the text uses 3D fonts, and the x position of the text.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.AlphaRate">
            <summary>
            The rate of change of the alpha component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.NumberOfLines">
            <summary>
            Returns the number of lines in the text object.
            </summary>
            <remarks>
            This currently reports the number of lines only when the text
            object is using a bitmap font.  3D text does not use the newline
            character.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.MaxWidth">
            <summary>
            The maximum width of the text in world units.  This modifies the DisplayedText property.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.ScaleX">
            <summary>
            Returns the distance from the center of the Text object to the edge;
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Text.VerticalCenter">
            <summary>
            Returns the vertical center of the text.
            </summary>
            <remarks>
            Since the y value of text marks either the top or bottom of the Text
            depending on vertical alignment, this value can be useful for finding
            the Text's center.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.GuiManager.AddPerishableWindow(FlatRedBall.Gui.Window)">
            <summary>
            Adds a Window to the GuiManager which will disappear the next time
            the user clicks.
            </summary>
            <param name="windowToAdd">The Window to add.</param>
        </member>
        <member name="M:FlatRedBall.Gui.GuiManager.AddTextureSwitch(FlatRedBall.Texture2D)">
             <summary>
             Inserts a texture switch in the rendering of the GUI.  The argument textureToSwitch will be 
             used to draw just the next quad passed as 6 vertices.
             </summary>
             <remarks>
             This method is called from the Draw method of an object that is a Window or inherits from
             Window.  This notifies the GuiManager that the next 6 vertices passed through the
             GuiManager.verts.Write(v); call will be using a different texture.  After those 6
             are drawn, the GuiManager continues to draw the rest of the quads using the regular
             GUI texture.
             
             The important thing to remember is that this method does NOT need to be called in pairs.
            
             </remarks>
             <param name="textureToSwitch">The texture to use for the following quad.</param>
        </member>
        <member name="F:FlatRedBall.Gui.GuiManager.mDominantWindows">
            <summary>
            A stack of Windows which demand input from the cursor.
            </summary>
            <remarks>
            When a dominantWindow is valid, the cursor will not be able to interact with other windows.  If RemoveInvisibleDominantWindows
            is set to true (default is true) then the GuiManager will remove any invisible dominant windows from its
            memory.
            In other words a DominantWindow can be removed either through the traditional Remove methods or by
            setting the Window's Visible property to false if RemoveInvisibleDominantWindows is true.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.GuiManager.mToolTipText">
            <summary>
            Sets the tool tip to show
            </summary>
            <remarks>
            Some UI elements like Buttons automatically show
            a tool tip.  This property can be used to overwrite
            what is shown, or to show tool tips when the user is
            over a non-UI element.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.GuiManager.AddDominantWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Adds a window as a Dominant Window.  If the window is a regular Window
            already managed by the GuiManager it will be removed from the regularly-managed
            windows.
            </summary>
            <param name="windowToSet">The window to add to the Dominant Window stack.</param>
        </member>
        <member name="T:FlatRedBall.Gui.StructReferencePropertyGrid`1">
            <summary>
            A class that can be used to apply changes to fields and properties of an object.
            </summary>
            <remarks>
            If an object has a Vector3 field, creating a regular PropertyGrid for that Vector3
            and changing that Vector3 will not actually change the field's value.  Since C# doesn't
            have pointers, then the only way to change the source's field is to keep a reference to
            the object that has the field, then push changes through that instance.
            
            The StructReferencePropertyGrid simulates a pointer by storing reference to the object that
            contains the field.
            </remarks>
            <typeparam name="T">The type of object that the PropertyGrid stores.</typeparam>
        </member>
        <member name="T:FlatRedBall.Gui.Window">
            <summary>
            This is the base class for most Gui elements.
            </summary>
            <remarks>
            The WindowClass contains common properties, events, and methods
            used by other Gui elements.  Much like most FRB objects, Windows and
            window sub-classes should be created through the GuiManager.
            
            <para>
            Windows can be created and drawn two different ways.  One is the
            default Gui.  The default is drawn using the guiTex.png graphic.
            The appearance of the default Gui is similar to a regular Windows
            Gui.  Most default-drawn Gui elements must be added through a Window
            instance rather than the GuiManager.  It is common practice to create
            a Window through the GuiManager, then to add the children Gui elements
            through the newly-created Window.
            </para>
            
            <para>To chnage the appearance of the Gui, most Gui elements can
            be constructed using SpriteFrames.  SpriteFrame-created GuiElements
            can be created either through the GuiManager or a Window instance.</para>
            <seealso cref="M:FlatRedBall.Gui.GuiManager.AddWindow"/>
            <seealso cref="T:FlatRedBall.ManagedSpriteGroups.SpriteFrame"/>
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.IScalable">
            <summary>
            Represents an object that can be scaled on the X and Y axes and can have
            scale velocity on these two axes.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleX">
            <summary>
            Gets and sets the X Scale of the object.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleY">
            <summary>
            Gets and sets the Y Scale of the object
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleXVelocity">
            <summary>
            Gets and sets the rate at which the X Scale of the object changes in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.IScalable.ScaleYVelocity">
            <summary>
            Gets and sets the rate at which the Y Scale of the object changes in units per second.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable">
            <summary>
            Represents an object that can use AnimationChains for texture-flipping animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.Animate">
            <summary>
            Whether animation is currently turned on.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.AnimationChains">
            <summary>
            Gets all animations stored in this.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.AnimationSpeed">
            <summary>
            Gets and sets how fast AnimationChains will animate.  Default is 1.  A value
            of 2 will result in AnimationChains animating twice as fast.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentChainIndex">
            <summary>
            Gets and sets the index of the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentChain">
            <summary>
            Gets the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentChainName">
            <summary>
            Gets the name of the current AnimationChain or sets the current AnimationChain by name.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.CurrentFrameIndex">
            <summary>
            Gets and sets the current AnimationFrame index.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.JustChangedFrame">
            <summary>
            Gets whether the current AnimationFrame just changed this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.JustCycled">
            <summary>
            Gets whether the current AnimationChain just cycled (looped) this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.IAnimationChainAnimatable.UseAnimationRelativePosition">
            <summary>
            Whether the current AnimationFrame's relative position values (RelativeX and RelativeY) are applied
            when animating.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.MoveBarHeight">
            <summary>
            The height in world units of the move bar.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.KeepWindowsInScreen">
            <summary>
            Whether Windows should be repositioned to keep their move bar
            accessible to the mouse.  Default true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mScaleX">
            <summary>
            The X size of the Window.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mScaleY">
            <summary>
            The Y size of the Window.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mScaleXVelocity">
            <summary>
            The rate of change of mScaleX in units per second.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mScaleYVelocity">
            <summary>
            The rate of change of mScaleY in units per second
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mWorldUnitX">
            <summary>
            The x position of the Window in world units.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mWorldUnitY">
            <summary>
            The y position of the Window in world units.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mWorldUnitRelativeX">
            <summary>
            The x position of the Window in world units relative to its Parent.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mWorldUnitRelativeY">
            <summary>
            The y position of the Window in world units relative to its Parent.  Although UI normally considers
            down to be positive Y, this value is just like Sprites - positive Y is up.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mMoveBar">
            <summary>
            Whether the Window has a move bar which the user can
            click and drag over to reposition the Window.  This is usually
            only true for regular Windows - objects inheriting from the
            Window class almost always have this set to false.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mCursor">
            <summary>
            The cursor that this Window uses for UI interaction.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mName">
            <summary>
            The Window's name.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mChildren">
            <summary>
            Windows that belong to and are positioned relative to this Window.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mFloatingWindows">
            <summary>
            Windows that belong to this Window but are not positioned relative to it and do not have to 
            be physically contained in this Window for the user to interact with them.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mColor">
            <summary>
            Used to adjust the alpha of the Windows.  Typically, faded Windows
            are disabled.  Only the first 8 bytes are changed.  The RGB components
            are not touched.  This field is not exposed to the user - it's used internally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.StaticVertices">
            <summary>
            Vertices used in the Draw methods.
            </summary>
            <remarks>
            Derived UI elements do not need to use this unless they are manually drawing new types of objects.
            Derived UI elements which simply use other base elements will not need to touch this field.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mTextureLeft">
            <summary>
            The left coordinate of the texture to use when drawing a non-null BaseTexture
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mTextureRight">
            <summary>
            The right coordinate of the texture to use when drawing a non-null BaseTexture
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mTextureTop">
            <summary>
            The top coordinate of the texture to use when drawing a non-null BaseTexture
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Window.mTextureBottom">
            <summary>
            The bottom coordinate of the texture to use when drawing a non-null BaseTexture
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.OnClick">
            <summary>
            Raises the Click event.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.OnDragging">
            <summary>
            Raises the Dragging event.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.OnLosingFocus">
            <summary>
            Raises the LosingFocus event.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.OnPush">
            <summary>
            Raises the Push event.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.OnResize">
            <summary>
            Raises the Resizing event.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.#ctor(FlatRedBall.Gui.Cursor)">
            <summary>
            Creates a new Window using the default graphics.
            </summary>
            <remarks>
            To have the Window drawn by the engine, it must be added
            to the GuiManager through the AddWindow button.  It is more
            common to create Windows using the no-argument GuiManager's
            AddWindow method.
            
            <para>The following code creates a window, places it at the
            center of the screen, scales it, and adds the move bar.
            This method of creating a Window is more common than calling
            the constructor.</para>
            <code>
            Window newWindow = GuiManager.AddWindow();
            newWindow.SetPositionTL(SpriteManager.Camera.XEdge, SpriteManager.Camera.YEdge);
            newWindow.ScaleX = 10;
            newWindow.ScaleY = 10;
            newWindow.HasMoveBar = true;
            </code>
            </remarks>
            <param name="cursor">Reference to the cursor to use.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.#ctor(FlatRedBall.Gui.GuiSkin,FlatRedBall.Gui.Cursor)">
            <summary>
            Creates a new Window using the argument GuiSkin to set its appearance.  This will
            create a SpriteFrame as the visible representation for the Window.
            </summary>
            <param name="guiSkin">The GuiSkin to use to set the Window's visibile representation properties.</param>
            <param name="cursor">The cursor that will interact with the Window.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.AddWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Adds the arguemnt Window to this Window's children List.
            </summary>
            <param name="windowToAdd">The Window to add.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.AddFloatingWindow(FlatRedBall.Gui.Window)">
            <summary>
            Adds the arguent Window to this Window's floating Windows List.
            </summary>
            <param name="windowToAdd">The Window to add.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.ClearEvents">
            <summary>
            Clears all of the Window's events.
            </summary>
            <remarks>
            This is usually only called by the engine when a window is being destroyed.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.Window.CloseWindow">
            <summary>
            Sets the Visible to false and calls the Closing event.  This does not remove
            the window from the GuiManager unless the Window was created by the ObjectDisplayManager
            or any IObjectDisplayer provided as part of FlatRedBall.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.GetVisibleChildrenCount">
            <summary>
            Returns the number of visible children and floating Windows.  This method
            does not recursively check children's children.
            </summary>
            <returns>The number of visible children and floating Windows.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Window.GetWindowOver(System.Single,System.Single)">
            <summary>
            Returns which window the argument coordinates are currently over.  Windows
            tested are this, children, and floating Windows.
            </summary>
            <param name="cameraRelativeX">The Camera-relative X position at 100 units away.  This matches the UI coordinate system.</param>
            <param name="cameraRelativeY">The Camera-relative Y position at 100 units away.  This matches the UI coordinate system.</param>
            <returns>The window that the point is over if any, else null.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Window.FindByName(System.String)">
            <summary>
            Searches through children and floating windows for a Window with 
            its Name matching the argument name.  Returns null if none are found.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The Window with the matching Name or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Window.FindWithNameContaining(System.String)">
            <summary>
            Returns the child or floating Window with the matching name, or null if none are found.
            </summary>
            <param name="name">The name to earch for.</param>
            <returns>The window with the matching name.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Window.IsPointOnWindow(System.Single,System.Single)">
            <summary>
            Returns whether the argument coordinate is on this instance.  Units 
            are at 100 units away from the camera (similar to how the cursor 
            is positioned);
            </summary>
            <param name="cameraRelativeX">The X coordinate relative to the center of the screen at 100 units away.</param>
            <param name="cameraRelativeY">The Y coordinate relative to the center of the screen at 100 units away.</param>
            <returns>Whether the point is on the Window.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Window.KeepInScreen">
            <summary>
            Repositions the Window if the Window has a move bar so that it can be accessed by the Cursor.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Window.RemoveWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Removes the argument Window from the internal WindowArray belonging to this.  Also removes the SpriteFrame from the
            SpriteManager if the window is not drawn by the GuiManager.
            </summary>
            <param name="windowToRemove">Reference to the Window to remove.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.SetAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)">
            <summary>
            Currently not implemented.
            </summary>
            <param name="chainToSet"></param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.SetPositionTL(System.Single,System.Single)">
            <summary>
            Sets the screen relative or Parent-relative position.
            </summary>
            <remarks>
            Calling this method is the same as setting the X and Y properties.
            </remarks>
            <param name="x">The X value.  Positive X is to the right.</param>
            <param name="y">The Y value.  Positive Y is down.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.SetScaleTL(System.Single,System.Single)">
            <summary>
            Resizes the Window and keeps the top left position static.  This method keeps the top left of all
            children Windows in the same relative position to the top left of
            this Window after the resize.
            </summary>
            <param name="newScaleX">The new ScaleX value.</param>
            <param name="newScaleY">The new ScaleY value.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.SetScaleTL(System.Single,System.Single,System.Boolean)">
            <summary>
            Resizes the Window and can keep the top left position static.  This method
            keeps the top left of all children Windows in the same relative position to
            the top left of this Window after the resize.
            </summary>
            <param name="newScaleX">The new ScaleX value.</param>
            <param name="newScaleY">The new ScaleY value.</param>
            <param name="keepTopLeftStatic">Whether the top left of this Window should be in the same position after the scale values are changed.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.SetSkin(FlatRedBall.Gui.GuiSkin)">
            <summary>
            Sets the GuiSkin for the window.  This refreshes the appearance of the Window as well.
            </summary>
            <param name="guiSkin">The GuiSkin to set.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.SetTextureCoordinates(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the texture coordinates for the Window.  Only valid if the Window's BaseTexture is non-null.
            </summary>
            <param name="top">The top texture coordinate.</param>
            <param name="bottom">The bottom texture coordinate.</param>
            <param name="left">The left texture coordinate.</param>
            <param name="right">The right texture coordinate.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.ToString">
            <summary>
            Returns a string containing basic information about the Window.
            </summary>
            <returns>The string with the Window's information.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Window.UpdateDependencies">
            <summary>
            Updates the Window's position according to its Parent's position. 
            Also performs updates on all children.
            </summary>
            <remarks>
            The GuiManager automatically calls this on all Windows so it's unlikely that
            this needs to be called outside of the engine.  This method does not update the
            Window's Parents like the UpdateDependencies method does for PositionedObjects because
            the GuiManager only keeps reference to the top parents of Windows.  Therefore, the GuiManager
            only loops through the top parents and it's their responsibility to update their children's positions.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.Window.SetFromWindowSkin(FlatRedBall.Gui.WindowSkin)">
            <summary>
            Sets the SpriteFrame's properties according to the argument WindowSkin.
            </summary>
            <remarks>
            This allows Window-inheriting UI elements to pass any WindowSkin and control
            their visibility.  For example, a Button may pass a different WindowSkin than a
            TextBox to this method.
            </remarks>
            <param name="windowSkin">The WindowSKin to use for setting the SpriteFrame's properties.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.Destroy(System.Boolean)">
            <summary>
            Removes self from all Parent Windows, destroys all Children windows, and 
            clears events if keepEvents is false.
            </summary>
            <remarks>
            This method is called by GuiManager's RemoveWindow method.  The GuiManager's RemoveWindow
            method removes the window from the GuiManager if it is referenced there.  This method removes
            the window from any parents that it belongs to.  The two methods together will clear all engine
            references to the Window.
            </remarks>
            <param name="keepEvents">Whether to keep all events.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.TestCollision(FlatRedBall.Gui.Cursor)">
            <summary>
            Calls events for clicking, pushing, dragging, and any other window events.
            </summary>
            <remarks>
            This method is called either by this instance's parent Window or the GuiManager.
            </remarks>
            <param name="cursor">The Cursor to use for collision.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Window.TestCollisionBase(FlatRedBall.Gui.Cursor)">
            <summary>
            Provides acces to base TestCollision functionality for objects which derive from the
            Window class.
            </summary>
            <remarks>
            Sometimes a Window is separated by one or more layers of inheritance from the
            base Window class.  In these cases the Window may want to call the base TestCollision
            method without going through the immediate class it inherits from.
            
            For example, the Button class inherits from the Window class.  The ToggleButtonClass inherits
            from the Button class.  Since the Button class needs to perform different functionality than the
            Button class when the user interacts with it with the Cursor it needs to be able to "step over" the
            Button's TestCollision call.
            </remarks>
            <param name="cursor">The Cursor to use for interaction with this element.</param>
        </member>
        <member name="P:FlatRedBall.Gui.Window.ScaleX">
            <summary>
            The X Scale of the Window.
            </summary>
            <remarks>
            Changing the ScaleX raises the Resizing event.
            <seealso cref="M:FlatRedBall.Gui.Window.SetScaleTL(System.Single,System.Single)"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.ScaleY">
            <summary>
            Yhe Y Scale of the Window.
            </summary>
            <remarks>
            Changing the ScaleY raises the Resizing event.
            <seealso cref="M:FlatRedBall.Gui.Window.SetScaleTL(System.Single,System.Single)"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.ScaleXVelocity">
            <summary>
            The rate of change of the ScaleX property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.ScaleYVelocity">
            <summary>
            The rate of change of the ScaleY property in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Animate">
            <summary>
            Whether the Window uses its AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.AnimationChains">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.AnimationSpeed">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.CurrentChainIndex">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.CurrentChainName">
            <summary>
            NOT IMPLEMENTED:  Will be included at a future time.  Using this will throw an exception.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.CurrentChain">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.CurrentFrameIndex">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.JustChangedFrame">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.JustCycled">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.UseAnimationRelativePosition">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.WorldUnitX">
            <summary>
            The screen-relative X position with 0 being the center of the screen.
            </summary>
            <remarks>
            If this has a Parent then this property is essentially read-only.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.WorldUnitY">
            <summary>
            The screen-relative Y position with 0 being the center of the screen.  This proerty
            uses up as positive Y.
            </summary>
            <remarks>
            If this has a Parent then this property is essentially read-only.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.WorldUnitRelativeX">
            <summary>
            The X position of the Window relative to its Parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.WorldUnitRelativeY">
            <summary>
            The Y position of the Window relative to its Parent.  Positive Y is up.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.X">
            <summary>
            The X position of the Window.  If the Window does not have a parent this
            is the distance between the center of the Window and the left edge of the
            screen.  If the Window does have a parent this is the distance between the
            center of the Window and the left edge of its Parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Y">
            <summary>
            The Y position of the Window.  If the Window does not have a parent this
            is the distance between the center of the Window and the top edge of the
            screen.  If the Window does have a parent this is the distance between the
            center of the Window and the top edge of its Parent.  Positive is down.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.AbsoluteWorldUnitZ">
            <summary>
            The Z plane that Windows are drawn when drawn by the GuiManager.  This 
            depends on the position of the Camera.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.ScreenRelativeX">
            <summary>
            Gets the distance between the left of the screen and the Window's center.  This value
            represents this distance regardless of whether the Window has a parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.ScreenRelativeY">
            <summary>
            Gets the distance between the top of the screen and the Window's center.  This value
            represents this distance regardless of whether the Window has a parent.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Enabled">
            <summary>
            Gets and sets whether the UI element can be interacted with by the Cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.FloatingChildren">
            <summary>
            The list of Floating Windows which belong to this Window.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.GuiManagerDrawn">
            <summary>
            Whether the Window uses the default GUI drawn by the GuiManager.  If false then the Window
            uses GuiSkins and SpriteFrames.
            </summary>
            <remarks>
            GuiDrawn UI will always appear on top of other FlatRedBall graphics.  If not GUiDrawn
            (if using SpriteFrames) then the SpriteFrames will be sorted appropriately with other
            FlatRedBall graphical objects.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.HasCloseButton">
            <summary>
            Whether the Window has a close button.
            </summary>
            <remarks>
            This is usually only set to true for Windows which do not have a Parent and 
            whidh have HasMoveBar set to true.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.HasMoveBar">
            <summary>
            Whether thie Window has a bar which can be grabbed to move the Window.
            </summary>
            <remarks>
            This is generally not set to true unless the Window does not have a Parent.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.IsWindowOrChildrenReceivingInput">
            <summary>
            Gets whether the Window, any of its children, or any of its floating Windows
            are receiving input from the Keyboard.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Parent">
            <summary>
            The parent of the Window.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Visible">
            <summary>
            Whether the Window is visible.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Name">
            <summary>
            The name of the Window.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Children">
            <summary>
            The Windows which are attached to this instance.
            </summary>
            <remarks>
            All children Windows must be contained within the physical bounds
            of their Parent, otherwise the user will not be able to interact with them.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.MinimumScaleX">
            <summary>
            The minimum ScaleX of the Window.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.MinimumScaleY">
            <summary>
            The minimum ScaleY of the Window.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.MaximumScaleX">
            <summary>
            The maximum ScaleX of the Window.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.MaximumScaleY">
            <summary>
            The maximum ScaleY of the Window.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Resizable">
            <summary>
            Whether the Window can be resized by grabbing its bottom-right corner with the Cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.DrawBorders">
            <summary>
            Whether the borders are drawn on the window.
            </summary>
            <remarks>
            This controls the sides, bottom, top and move bar drawing.
            This can be set to false when setting a Window's texture
            so that only the texture is shown.  
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Window.BaseTexture">
            <summary>
            The texture to use when drawing the Window.  Default of null will
            result in the Window using the default texture.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Window.Alpha">
            <summary>
            The opacity of the Window.  Default is fully opaque (255).
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.Click">
            <summary>
            Raised when the user has pushed and released the primary (left) mouse button
            on the Window.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.SecondaryClick">
            <summary>
            Raised when the user has pushed and released the secondary (right) mouse button
            on the Window.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.Push">
            <summary>
            Raised when the user has pushed the primary (left) mouse button on the Window.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.Closing">
            <summary>
            Raised when the Window has been closed.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.CursorOver">
            <summary>
            Raised when the cursor is over the window whether it has moved or not.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.DoubleClick">
            <summary>
            Raised when the user has double-clicked on the Window with the primary (left) mouse button.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.LosingFocus">
            <summary>
            Raised after the user has clicked on this Window giving it focus, then on a different
            Window causing this Window to lose focus.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.Dragging">
            <summary>
            Raised when the Cursor has grabbed and is moving a Window.  Most UI elements
            are not by default grabbable.
            </summary>
            <remarks>
            The ScrollBar has its position bar grabbable.
            </remarks>
        </member>
        <member name="E:FlatRedBall.Gui.Window.Resizing">
            <summary>
            Continually raised while the user is resizing the Window, or when ScaleX or ScaleY are
            changed.  This is not raised once, but once each frame during resizing with the Cursor.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.RollingOn">
            <summary>
            Raised when the cursor first moves over the Window.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.RollingOff">
            <summary>
            Raised when the cursor leaves the Window.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.VisibleChange">
            <summary>
            Raised when the Window's Visible property changes.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.Window.RollingOver">
            <summary>
            Raised when the cursor is over the window and has moved since last frame.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.IObjectDisplayer">
            <summary>
            Interface for an object which provides a visual interface for viewing and editing
            an instance.  This is the base type for PropertyGrids and ListDisplayWindows.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.IObjectDisplayer.ObjectDisplayingAsObject">
            <summary>
            Exposes the object that is being displayed (casted as an object).
            This exists so that a list of IObjectDisplayers has access to the
            object displaying.  This should be explicitly implemented.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.PropertyGrid.mUndoInstructions">
            <summary>
            The PropertyGrid can be tied to a list of InstructionLists.
            These hold the instructions necessary to undo the changes made
            by the PropertyGrid.
            
            It is common to store a list of lists so that multiple changes
            can be perfomred during one undo.  In other words, if X and Y
            were changed in one action then the instructions for changing the
            X and Y back will be in one InstructionList.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.PropertyGrid.sPropertyGridMemberSettings">
            <summary>
            Associated type with list of strings of members to exclude for a given type.  This is used
            when children PropertyGrids are created.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid.AddWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Adds an always-displayed Window to the PropertyGrid.  This window will appear
            after all member-displaying Windows and will automatically be positioned appropriately.
            </summary>
            <param name="windowToAdd">The window to add.</param>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid.SetMemberChangeEvent(System.String,FlatRedBall.Gui.GuiMessage)">
            <summary>
            Sets the event to raise when a particular property is changed through the PropertyGrid.
            </summary>
            <remarks>
            A property cannot have multiple ChangeEvents.  The reason for this is so that the user
            can reassign the same ChangeEvent without fear of duplicating calls.  It is common when
            selecting an object to exclude some properties, include others, and set the callbacks.
            </remarks>
            <param name="property">The name of the property</param>
            <param name="changeEvent">The event to raise when the property changes.</param>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid.SetNewWindowEvent``1(FlatRedBall.Gui.GuiMessage)">
            <summary>
            Sets an event to be raised when a new PropertyGrid or ListDisplayWindow is created.
            </summary>
            <param name="type">The type of the object to associate the new callback with.  In other words, 
            when an object of this type is being viewed through the creation of a new window the message argument
            will be reaised.</param>
            <param name="message">The GuiMessage to raise on creation.  The argument passed to this message is the newly-created
            window.</param>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid.SetNewWindowEvent(System.Type,FlatRedBall.Gui.GuiMessage)">
            <summary>
            Sets an event to be raised when a new PropertyGrid or ListDisplayWindow is created.
            </summary>
            <param name="type">The type of the object to associate the new callback with.  In other words, 
            when an object of this type is being viewed through the creation of a new window the message argument
            will be reaised.</param>
            <param name="message">The GuiMessage to raise on creation.  The argument passed to this message is the newly-created
            window.</param>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid.SetSelectedObject(System.Object)">
            <summary>
            Sets the SelectedObject property of the PropertyGrid.  This allows
            code that has reference to a base PropertyGrid to still set the SelectedObject.
            
            This should never be used outside of the engine!
            </summary>
            <param name="objectToSet">The object to show.</param>
        </member>
        <member name="P:FlatRedBall.Gui.PropertyGrid.ContentManagerName">
            <summary>
            Gets and sets the content mananager name that is used when loading assets like Textures.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid`1.GetUIElementForMember(System.String)">
            <summary>
            Gets the window that is used for editing the argument memberName.
            </summary>
            <remarks>
            For example, if the member is a bool then this method will return a 
            ComboBox.  If the member is of a type that does not have a specific UI
            representation then a button that says "Edit Property" will be returned.
            </remarks>
            <param name="propertyName">The name of the member.</param>
            <returns>The UI element that is used to edit this property, or null if the property is not found.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid`1.ReplaceMemberUIElement(System.String,FlatRedBall.Gui.IWindow)">
            <summary>
            Replaces the UI element representing the argument propertyName with the argument newUIElement.
            </summary>
            <remarks>
            The newUIElement argument should not already be added to the GuiManager or to the PropertyGrid.  This method
            should be called BEFORE any UI events are added to the newUIElement argument.  This guarantees that
            the PropertyGrid events are fired first, then the custom events can be used to modify the object shown
            by the PropertyGrid.
            </remarks>
            <param name="propertyName">The name of the property to replace the UI element for.</param>
            <param name="newUIElement">The new UI element for the property.  This should be created with a new call, 
            not added to this instance or the GuiManager.</param>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid`1.CreateWindowsForSelectedType">
            <summary>
            Creates all of the windows (Buttons, TextBoxes, etc) for the selected type.  This is only
            called once when the PropertyGrid is first created.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.PropertyGrid`1.ApplyDefaultBehavior(FlatRedBall.Gui.PropertyWindowAssociation)">
            <summary>
            Sets the event that occurs when the user changes the UI element.
            </summary>
            <param name="pwa"></param>
        </member>
        <member name="T:FlatRedBall.Input.IMouseOver">
            <summary>
             Interface for checking mouse over's
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.IMouseOver.IsMouseOver(FlatRedBall.Gui.Cursor)">
            <summary>
             Check to see if object is under mouse.
            </summary>
            <param name="cursor">Cursor to check against.</param>
            <returns>True if under mouse.</returns>
        </member>
        <member name="M:FlatRedBall.Input.IMouseOver.IsMouseOver(FlatRedBall.Gui.Cursor,FlatRedBall.Graphics.Layer)">
            <summary>
             Check to see if object is under mouse.
            </summary>
            <param name="cursor">Cursor to check against.</param>
            <param name="layer">Layer object is on.</param>
            <returns>True if under mouse.</returns>
        </member>
        <member name="T:FlatRedBall.Input.Recording.IInputRecord">
            <summary>
            Base interface for class which can record input.  
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Recording.InputRecordBase`2.TimePlaybackStarted">
            <summary>
            Gets and sets the time that playback started.  Setting this value simulates changing
            when the playback started.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.#ctor">
            <summary>
            Creates a SpriteGrid using the TextManager's DefaultFont.  This is used because it's the only
            Texture2D stored internally in the engine.  To set the default Texture, use the overload which
            accepts a Texture2D.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.#ctor(FlatRedBall.Camera,FlatRedBall.ManagedSpriteGroups.SpriteGrid.Plane,FlatRedBall.Sprite)">
             <summary>
             Creates a new SpriteGrid.
             </summary>
             <remarks>
             The mBlueprintToUse argument Sprite reference is kept internally and used as the blue print.
             In other words, the SpriteGrid does not create a new Sprite internally, but uses the
             arguemnt Sprite.  When creating SpriteGrids in code, it is common to create a new Sprite
             only to serve as a SpriteGrid blue print, then remove it from the SpriteManager's memory. 
             If the Sprite passed as the mBlueprintToUse is modified after the SpriteGrid is created,
             this will change the SpriteGrid bluerint
            
             </remarks>
             <param name="SpriteManager">Reference to the SpriteManager used to create and destroy Sprites and textures.</param>
             <param name="mCamera">Reference to the camnera used to determine whether a point on the SpriteGrid is in the scren.</param>
             <param name="yOrZ">Whether the SpriteGrid should extend on the XY or XZ plane.</param>
             <param name="mBlueprintToUse">Reference to a Sprite representing the mBlueprint to be used for the grid.</param>
             <param name="random">Reference to a Random used to assign random frames if the SpriteGrid references AnimationChains.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.Destroy">
            <summary>
            Destroys the SpriteGrid by removing all contained Sprites and clearing the TextureGrid.
            </summary>
            <remarks>
            <para>This method will only remove all contained Sprites from the SpriteManager and clear out the
            TextureGrid.  The SpriteGrid will still reference the the blueprint
            Sprite and have the same Bounds and GridSpacing.</para>
            <para>If the Manage method is called after this method is called, 
            the SpriteGrid will throw an out of bounds exception.  To refill the 
            SpriteGrid after this method has been called, it must first be populated.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.PaintSprite(System.Double,System.Double,System.Double,FlatRedBall.Texture2D)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="textureToPaint"></param>
            <returns>The old FrbTexture at the argument position.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.RemoveSprites">
            <summary>
            Clears all Sprites referenced by the SpriteGrid.
            </summary>
            <remarks>
            This method will only remove all contained Sprites from the SpriteManager.  This method does
            not clear out the TextureGrid.
            
            <para>If the Manage method is called after this method is called, 
            the SpriteGrid will throw an out of bounds exception.  To refill the 
            SpriteGrid after this method has been called, it must first be populated.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.Shift(System.Single,System.Single,System.Single)">
            <summary>
            Moves the grid by the passed variables 
            </summary>
            <remarks>
            This method does not change the bounds of the SpriteGrid; only the actual Sprites in the grid.
            This method is used to change the seed position of the SpriteGrid.  The location of the
            painted Sprites also shifts according to the arguments.  If you want to shift the entire grid, call this
            method and also adjust the bounds values
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteGrid.CreateSpriteBasedOnProperties(System.Boolean)">
            <summary>
            This is called by CreateSpriteFromBlueprint - and should only be called from there.
            </summary>
            <returns>The newly created Sprite which was created obeying the SpriteGrid's properties.</returns>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteGrid.Layer">
            <summary>
            The layer on which the SpriteGrid should place newly-created Sprites.
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Get index of a char
            </summary>
            <param name="sb"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Get index of a char starting from a given index
            </summary>
            <param name="sb"></param>
            <param name="c"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String)">
            <summary>
            Get index of a string
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Get index of a string from a given index
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Get index of a string with case option
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Boolean)">
            <summary>
            Get index of a string from a given index with case option
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="T:FlatRedBall.Assets.FlatRedBallMdxResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FlatRedBall.Assets.FlatRedBallMdxResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FlatRedBall.Assets.FlatRedBallMdxResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:FlatRedBall.Audio.AudioManager">
            <summary>
            Empty placeholder class - code will be added at a later time.
            </summary>
        </member>
        <member name="T:FlatRedBall.Audio.IPlayable">
            <summary>
            IPlayables are objects which can be played or stopped.  This
            interface is often implemented by audio-related objects.
            </summary>
        </member>
        <member name="T:FlatRedBall.Audio.Listener">
            <summary>
            Acts as a microphone for sound effects.
            </summary>
            <remarks>
            Currently all sounds should be 22050 samples per second and 16 bits per sample (quantization).
            </remarks>
        </member>
        <member name="M:FlatRedBall.Audio.Listener.#ctor(System.Windows.Forms.Control,FlatRedBall.PositionedObject,System.Int16)">
            <summary>
            Creates an instance of the Listener.
            </summary>
            <remarks>
            Generally only one Listener is needed for an application.
            </remarks>
            <param name="form">The form to which the listener belongs.</param>
            <param name="object_listening">Currently unused - pass null.</param>
            <param name="NumberOfChannels">The number of channels for sound effects.  Pass 1 for mono .wav and 
            2 for stereo .wav files.  If mono is used, panning can be controlled for each object individually.</param>
        </member>
        <member name="M:FlatRedBall.Audio.Listener.Dispose">
            <summary>
            Cleans up the resources.  Generally there is only one listener in an application
            and its lifespan is the entire application, so this should only be called when the
            application is exiting.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.Listener.Device">
            <summary>
            Gets the sound device.
            </summary>
        </member>
        <member name="T:FlatRedBall.Audio.Music">
            <summary>
            Plays MP3, WMA, and MIDI music.
            </summary>
            <remarks>
            Allows your to play MP3, WMA, and MIDI music files, primarily for background music.  Usually only one instance
            of the Music class is needed.  When switching songs, rather than disposing and creating a new Music instance,
            the SetSong method can be called.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Audio.Music.#ctor">
            <summary>
            Creates an empty Music instance.
            </summary>
            <remarks>
            Calling this method and SetSong is the equivalent of calling the overload
            which takes a filename.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Audio.Music.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Music class
            </summary>
            <param name="filename">The physical file location to an MP3, WMA, or MIDI file.</param>
        </member>
        <member name="M:FlatRedBall.Audio.Music.Dispose">
            <summary>
            Cleans up the Music resources. 
            </summary>
            <remarks>
            It is common to have only one Music instance in an application, 
            and for that instance to live until the application exits.  In this
            situation, this method should only be called when exiting the application.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Audio.Music.Play">
            <summary>
            Starts playback.
            </summary>
        </member>
        <member name="M:FlatRedBall.Audio.Music.SetSong(System.String,System.Boolean)">
            <summary>
            Changes the song that this plays.
            </summary>
            <remarks>
            This method can be used to change the song that is currently played.
            Often, an application only needs one instance of a Music object.  Rather
            than Disposing and creating a new Music object, when the song should be changed,
            this method can be called.
            </remarks>
            <param name="fileName">The file name of the song to play.  Accepts MP3, WMA, and MIDI.</param>
        </member>
        <member name="M:FlatRedBall.Audio.Music.Stop">
            <summary>
            Stops playback.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.Music.Balance">
            <summary>
            Gets and sets the playback position in the stereo field, similar to pan for sound effects.
            </summary>
            <remarks>
            The value should be between -10000 and 10000.  When this property is set to 
            -10000, playback in the left channel is at normal volume and the right channel 
            is effectively silent.  When this property is set to 10000, playback in the 
            right channel is at normal volume and the left channel is effectively silent.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Audio.Music.CurrentPosition">
            <summary>
            Gets or sets the current position of the song in seconds from the beginning.  
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.Music.Error">
            <summary>
            The difference between the audio CurrentPosition and the amount of time
            since the music started playing.  Usually the music plays too slow so this
            value becomes increasingly positive over time.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.Music.Loop">
            <summary>
            Controls audio looping of the music.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.Music.Playing">
            <summary>
            Returns whether the music is currently playing.
            </summary>
        </member>
        <member name="P:FlatRedBall.Audio.Music.VolumeAttenuate">
            <summary>
            The amount to attenuate the music.
            </summary>
            <remarks>
            This value must be between 0 and -10000.  0 (default) is full volume.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Audio.SEGArray">
            <summary>
            Summary description for SEGArray.
            </summary>
        </member>
        <member name="T:FlatRedBall.Audio.SoundEffect">
             <summary>
             A short duration sound usually produced in reaction to events in a game.
             </summary>
             <remarks>
             SoundEffects generate audio into the primary sound buffer of DirectX where
             they will be mixed to final output.  All sound effects come from .WAV file
             sources, and must be stored in Mono and Pulse Code Modulation (PCM).  The 
             DirectX and FlatRedBall.Sprite layers will handle sound positioning.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Audio.SoundEffect.#ctor(System.String,System.Random)">
            <summary>
            Initializes a new instance of a SoundEffect
            </summary>
            <param name="FileName">The physical path to the .WAV file.  All files must be Mono, and Pulse Code Modulation (PCM).</param>
        </member>
        <member name="M:FlatRedBall.Audio.SoundEffect.#ctor(System.String,FlatRedBall.PositionedObject,System.Random)">
            <summary>
            Initializes a new instance of a SoundEffect
            </summary>
            <param name="FileName">The physical path to the .WAV file.  All files must be Mono, and Pulse Code Modulation (PCM).</param>
            <param name="Source">The Sprite object which 'generates' the sound.  This position will
            be interpreted by the engine and adjust sound volume and panning accordingly.
            </param>
        </member>
        <member name="P:FlatRedBall.Audio.SoundEffect.IsLooping">
            <summary>
            Whether the sound should loop.
            </summary>
            <remarks>
            This must be set to true before Play is called if the sound is to loop.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Audio.SoundEffectGroup">
            <summary>
            Group of identical sound effects that can be played simultaneously.
            </summary>
            <remarks>
            A normal SoundEffect object can only be playing one instance of itself, so
            if you have a series of similar sounds that need to be playing all at the same
            time, like gunshots, or impact noises, then use a SoundEffectGroup.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Audio.SoundEffectGroup.#ctor(System.Int32,System.String,System.Random)">
            <summary>
            Initializes a new instance of a SoundEffectGroup
            </summary>
            <param name="numberOfBuffers"></param>
            <param name="fileName"></param>
        </member>
        <member name="P:FlatRedBall.Audio.SoundEffectGroup.IsLooping">
            <summary>
            Sets the Looping property for all instances of a sound in the group.
            </summary>
            <remarks>
            Calls the <see cref="P:FlatRedBall.Audio.SoundEffect.IsLooping">SoundEffect.Looping</see>
            property for each member of the SoundEffectGroup
            </remarks>
        </member>
        <member name="P:FlatRedBall.Audio.SoundEffectGroup.volumeAttenuate">
            <summary>
            
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.StateManager">
            <summary>Note: this class will box value types, use only to store system state to allow recovery, 
            not in-game state while in a loop.</summary>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.Get``1(System.String)">
            <summary>Casts the key value to "T".</summary>
            <returns>default(T) if the value is not found in state manager.</returns>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.Initialize">
            <summary>should be after events are subscribed to.</summary>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.OnActivating">
            <summary>Raises the Activating event.</summary>
        </member>
        <member name="M:FlatRedBall.IO.StateManager.OnDeactivating">
            <summary>Raises the Deactivating event.</summary>
        </member>
        <member name="E:FlatRedBall.IO.StateManager.Activating">
            <summary>This event is raised when the game is being resumed after being deactivated.</summary>
        </member>
        <member name="E:FlatRedBall.IO.StateManager.Deactivating">
            <summary>This event is raised when state should be saved.</summary>
        </member>
        <member name="P:FlatRedBall.IO.StateManager.WasActivated">
            <summary>Will be true of the Activating event was raised.</summary>
        </member>
        <member name="P:FlatRedBall.IO.StateManager.Item(System.String)">
            <returns>Returns the key value, null if not found</returns>
        </member>
        <member name="P:FlatRedBall.IO.StateManager.Current">
            <summary>Singleton instance</summary>
        </member>
        <member name="T:FlatRedBall.IO.StateManager.DefaultStateManager">
            <summary>Simple implementation ... keeps state in memory, does not save anywhere.
            Also, Activated and Deactivated events will never raise.</summary>
            <remarks>This implementation is for cross platform support on non-windows phone platforms</remarks>
        </member>
        <member name="F:FlatRedBall.Utilities.BackStackBehavior.Move">
            <summary>Places the current screen onto the back stack, and moves to the next one.</summary>
        </member>
        <member name="F:FlatRedBall.Utilities.BackStackBehavior.Ignore">
            <summary>The current screen will not be put onto the backstack.</summary>
        </member>
        <member name="T:FlatRedBall.Utilities.BackStack`1">
            <summary>Support class used to add navigation features to the Screen API.</summary>
            <remarks>The behavior of this is that if an item exists on the stack already, the backstack will
            "go back" until it reaches that item. This behavior helps avoid circular dependencies and promotes
            tree/leaf navigation.</remarks>
        </member>
        <member name="M:FlatRedBall.Utilities.BackStack`1.Back">
            <summary>Moves to the previous item on the stack.</summary>
            <returns>default(T) if the stack is empty, otherwise, returns the previous item on the stack.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.BackStack`1.Replace(`0)">
            <summary>Call this method in scenarios where you want to skip the current item when navigating back from the next
            value.</summary>
        </member>
        <member name="M:FlatRedBall.Utilities.BackStack`1.MoveTo(`0)">
            <summary>If the value exists in the stack, will pop items on the stack until it returns to that value.
            Otherwise will add on top of the stack. BackStackBehavior defaults to Move.</summary>
        </member>
        <member name="M:FlatRedBall.Utilities.BackStack`1.MoveTo(`0,FlatRedBall.Utilities.BackStackBehavior)">
            <summary>If the value exists in the stack, will pop items on the stack until it returns to that value.
            Otherwise will add on top of the stack. BackStackBehavior defaults to Move.</summary>
        </member>
        <member name="P:FlatRedBall.Utilities.BackStack`1.Current">
            <summary>avoid setting this property, setter is only public to support serialization when we tombstone.</summary>
        </member>
        <member name="P:FlatRedBall.Utilities.BackStack`1.StackArray">
            <summary>This property is here to support serialization when we tombstone.</summary>
        </member>
        <member name="T:FlatRedBall.Collections.FrbInstructionArrayArray">
            <summary>
            Summary description for SpriteArrayArray.
            </summary>
        </member>
        <member name="T:FlatRedBall.Collections.JoystickArray">
            <summary>
            Summary description for JoystickArray.
            </summary>
        </member>
        <member name="T:FlatRedBall.Collections.JoystickStateArray">
            <summary>
            Summary description for spriteArray.
            </summary>
        </member>
        <member name="T:FlatRedBall.Collections.SpriteArrayArray">
            <summary>
            Summary description for SpriteArrayArray.
            </summary>
        </member>
        <member name="M:FlatRedBall.Collections.SpriteArrayArray.FindSpriteAt(System.Single,System.Single)">
            <summary>
            Returns the first Sprite containing the points x, y, ignoring Z.  Returns null if no Sprite is found.
            </summary>
        </member>
        <member name="T:FlatRedBall.Collections.TextFieldArray">
            <summary>
            Summary description for TextFieldArray.
            </summary>
        </member>
        <member name="T:FlatRedBall.Collections.UnorderedSpriteArray">
            <summary>
            A strongly typed collection which stores Unordered Sprites and
            their vertex data.
            </summary>
            <remarks>
            The constructor for this class is an internal constructor which takes
            a Direct3D Device and an integer representing the maximum number of thousand of
            Unordered Sprites that it can hold geometric data for.  This number does not limit
            the number of Sprites that can be stored, but just the number of vertices which
            are used for these Sprites.
            
            <para>
            Since the SpriteManager is responsible for drawing UnorderedSprites, the SpriteManager
            is the only class which uses this class.  For other uses outside of the
            
            </para>
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.AttachableList`1">
            <summary>
            A list of IAttachables which is by default two-way.
            </summary>
            <typeparam name="T">Type of the list which is of IAttachable.</typeparam>
        </member>
        <member name="T:FlatRedBall.Math.IAttachableRemovable">
            <summary>
            Interface defining that an object has a RemoveObject method.  This standardizes the way that objects remove themselves from
            two-way lists.
            </summary>
            <remarks>
            This should not be implemented outside of the FlatRedBall Engine, but is public so that PositionedOjbect-inheriting
            objects can access the lists of objects that they belong to.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.#ctor">
            <summary>
            Creates a new AttachableList.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.#ctor(System.Int32)">
            <summary>
            Creates a new AttachableList with the argument capacity.
            </summary>
            <param name="capacity">The initial capacity of the new AttachableList.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.GetTopParents``2(FlatRedBall.Math.AttachableList{``1})">
            <summary>
            Returns the top parents in the argument AttachableList
            </summary>
            <typeparam name="OutType">The type of object in the returned list.</typeparam>
            <typeparam name="InType">Tye type of object in the argument list</typeparam>
            <param name="poa">The list to search through.</param>
            <returns>List of T's that are the top parents of the objects in the argument AttachableList.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Add(`0)">
            <summary>
            Adds the argument to the AttachableList and creates a two-way relationship.
            </summary>
            <param name="attachable">The IAttachable to add.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddRange(FlatRedBall.Math.AttachableList{`0})">
            <summary>
            Adds all IAttachables contained in the argument AttachableList to this AttachableList and creates two
            way relationships.
            </summary>
            <param name="listToAdd"></param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddOneWay(`0)">
            <summary>
            Adds the argument attachable to this without creating a two-way relationship.
            </summary>
            <param name="attachable">The IAttachable to add to this.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddRangeOneWay(FlatRedBall.Math.AttachableList{`0})">
            <summary>
            Adds all IAttachables contained in the argument AttachableList to this
            without creating two-way relationships.
            </summary>
            <param name="listToAdd">The list of IAttachables to add.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddUnique(`0)">
            <summary>
            Adds a new IAttachable if it is not already in the list.
            </summary>
            <param name="attachable">The IAttachable to add.</param>
            <returns>Index where the IAttachable was added.  -1 is returned if the list already contains the argument attachable</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.AddUniqueOneWay(`0)">
            <summary>
            Adds the argument IAttachable to this and creates a two-way relationship if
            this does not already contain the IAttachable.
            </summary>
            <param name="attachable">The IAttachable to add.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Clear">
            <summary>
            Removes all IAttachables contained in this and eliminates all
            two-way relationships.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Contains(`0)">
            <summary>
            Returns whether this contains the argument IAttachable.
            </summary>
            <remarks>
            If the argument is part of this instance and the two share a 
            two-way relationship then this method is able to use this two-way
            relationship to speed up the method call.
            </remarks>
            <param name="attachable">The argument IAttachable to search for.</param>
            <returns>Whether the argument attachable is contained in this list.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.FindByName(System.String)">
            <summary>
            Returns the IAttachable with name matching the argument.
            </summary>
            <remarks>This method performs a case-sensitive search.</remarks>
            <param name="nameToSearchFor">The name to match when searching.</param>
            <returns>The IAttachable with matching name or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.FindWithNameContaining(System.String)">
            <summary>
            Returns the first IAttachable with a name containing the argument string.
            </summary>
            <remarks>This method returns any IAttachable that has a name that contains the argument.
            For example, an object with the name "MySprite" would return if the argument was "Sprite".</remarks>
            <param name="stringToSearchFor">The string to check IAttachables for.</param>
            <returns>The IAttachable with a name containing the argument string or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.FindWithNameContainingCaseInsensitive(System.String)">
            <summary>
            Returns the first IAttachable with a name containing the argument string, case insensitive.
            </summary>
            <remarks>This method returns any IAttachable that has a name that contains the argument.
            For example, an object with the name "MySprite" would return if the argument was "Sprite".</remarks>
            <param name="stringToSearchFor">The string to check IAttachables for.</param>
            <returns>The IAttachable with a name containing the argument string or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the argument IAttachable at the argument index and creates a 
            two-way relationship.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="attachable">The IAttachable to insert.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.InsertOneWay(System.Int32,`0)">
            <summary>
            Inserts the argument IAttachable at the argument index but does not create
            a two-way relationship.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="attachable">The IAttachable to insert.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.MakeOneWay">
            <summary>
            Breaks all two-way relationships between this and all contained
            IAttachables.
            </summary>
            <remarks>
            This will still contain the same number of IAttachables before and
            after the call.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.MakeTwoWay">
            <summary>
            Makes the relationship between all contained IAttachables and this a two way relationship.
            </summary>
            <remarks>
            If an IAttachable is added (through the Add method), the relationship is already a
            two-way relationship.  IAttachables which already have two-way relationships will not be affected
            by this call.  IAttachables that have been added through the AddOneWay call or added
            through a call that returns a one-way array will be modified so that they hold a reference to
            this instance in their ListsBelongingTo field.  One-way relationships are often created in
            FRB methods which return AttachableLists.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.MoveBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the position of a block of IAttachables beginning at the argument
            sourceIndex of numberToMove count to the argument destinationIndex.
            </summary>
            <param name="sourceIndex">The index of the first IAttachable in the block.</param>
            <param name="numberToMove">The number of elements in the block.</param>
            <param name="destinationIndex">The index to insert the block at.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Remove(`0)">
            <summary>
            Removes the argument IAttachable from this and clears the two-way relationship.
            </summary>
            <param name="attachable">The IAttachable to remove from this.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.Remove(FlatRedBall.Math.AttachableList{`0})">
            <summary>
            Removes all IAttachables contained in the argument attachableList from this and clears the two-way relationships between
            this and all IAttachables removed.
            </summary>
            <param name="attachableList">The list of IAttachables to remove.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the IAttachable at the argument index and clears two-way relationships.
            </summary>
            <param name="index">The index of the object to remove.</param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.RemoveAtOneWay(System.Int32)">
            <summary>
            Removes the IAttachable at the argument index from the list, but the IAttachable will continue to reference
            this List in its ListsBelongingTo.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:FlatRedBall.Math.AttachableList`1.ToString">
            <summary>
            Returns a string with the name and the number of elements that this contains.
            </summary>
            <returns>The string with this instance's name and element count.</returns>
        </member>
        <member name="P:FlatRedBall.Math.AttachableList`1.Count">
            <summary>
            The number of elements contained in the list.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.AttachableList`1.Name">
            <summary>
            Gets and sets the name of this instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.GetFirstAfterPosition(System.Single,FlatRedBall.Math.Axis,System.Int32,System.Int32)">
            <summary>
            Gets the first object found after the argument "value" on the argument "axis".  Lists
            must be sorted for this method to work effectively.  WARNING:  This method uses an inclusive upper bound.  Use GetFirstAfter instead which uses an exclusive upper bound.
            </summary>
            <param name="value">The value to search after.  For example, this method will return objects with their position values greater than
            the argument value.  In other words, if 0 is passed as the value, then objects with position values greater than (not equal to) will be returned.</param>
            <param name="axis">The axis representing the value to use (x, y, or z)</param>
            <param name="lowBound">The lower (inclusive) bound.</param>
            <param name="highBound">The upper (inclusive) bound.  This argument is why GetFirstAfterPosition is obsolete.</param>
            <returns>The index of the first object after the given value.</returns>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.GetFirstAfter(System.Single,FlatRedBall.Math.Axis,System.Int32,System.Int32)">
            <summary>
            Gets the first object found after the argument "value" on the argument "axis".  Lists
            must be sorted ascending for this method to work effectively.
            </summary>
            <remarks>
            This method is useful when searching for items in a list after a given value.  
            </remarks>
            <param name="value">The value to search after.  For example, this method will return objects with their position values greater than
            the argument value.  In other words, if 0 is passed as the value, then objects with position values greater than (not equal to) will be returned.</param>
            <param name="axis">The axis representing the value to use (x, y, or z)</param>
            <param name="lowBound">The lower (inclusive) bound.</param>
            <param name="highBound">The upper (exclusive) bound.</param>
            <returns>The index of the first object after the given value.</returns>
        </member>
        <member name="M:FlatRedBall.Math.PositionedObjectList`1.GetTopParents">
            <summary>
            Returns a one-way List containing the TopParents of all items in the list without duplication.
            </summary>
            <returns>The list of parents.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteList.FindSpritesWithTexture(FlatRedBall.Texture2D)">
            <summary>
            Returns a one-way SpriteList containing all Sprites in this SpriteList which reference the texture argument.
            </summary>
            <param name="texture">The texture to match against.</param>
            <returns>SpriteList containing Sprites with matching textures.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteList.SortTextureInsertion(System.Int32,System.Int32)">
            <summary>
            Sorts a sub-array of the SpriteArray by their Texture.
            </summary>
            <param name="firstSprite">Index of the first Sprite, inclusive.</param>
            <param name="lastSpriteExclusive">Index of the last Sprite, exclusive.</param>
        </member>
        <member name="F:FlatRedBall.Collections.UnorderedSpriteArray.renderBreaks">
            <summary>
            Records where the breaks in batching occur.  Breaks can occur due to texture or color operation changes.
            </summary>
        </member>
        <member name="T:FlatRedBall.DebugSettings">
            <summary>
            This class contains static fields and properties which can help debug FRB applications.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.VertexPositionColor">
            <summary>
            Summary description for CustomVertex.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.InputManager">
            <summary>
            Gathers and stores input data for the mouse, keyboard, and gamepads.
            </summary>
        </member>
        <member name="F:FlatRedBall.Input.InputManager.Joysticks">
            <summary>
            Stores all connected joysticks.
            </summary>
        </member>
        <member name="F:FlatRedBall.Input.InputManager.mReceivingInput">
            <summary>
            Reference to an IInputReceiver which will have its ReceiveInput method called every frame.
            </summary>
            <remarks>
            If this reference is not null, the reference's ReceiveInput method is called in the InputManager.GetInputState method.
            <seealso cref="T:FlatRedBall.Gui.IInputReceiver"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.Input.InputManager.Update">
            <summary>
            Updates all input data stored by the InputManager.
            </summary>
            <remarks>
            This method polls the state of the keyboard, mouse, and joysticks.  By default, this is called
            one time per frame by the FRB Template, but this can be lessened as input updates are generally not
            needed so frequently.
            </remarks>
            <param name="guiResult">Stores mouse state data.</param>
        </member>
        <member name="T:FlatRedBall.Instructions.Instruction">
            <summary>
            Class that supports the execution of custom logic at a future time.
            </summary>
            <remarks>
            Instructions are either stored and executed through the InstructionManager or
            managed IInstructable instances.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Instructions.Instruction.mTimeToExecute">
            <summary>
            The system time to execute the instruction at.
            </summary>
        </member>
        <member name="F:FlatRedBall.Instructions.Instruction.mCycleTime">
            <summary>
            The amount of time to add to the instruction for cycled execution.  Default of 0
            instructs the executing logic to not cycle the Instruction.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction.Clone">
            <summary>
            Creates and redturns a member-wise clone.
            </summary>
            <returns>The clone of the calling instance.</returns>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction.Execute">
            <summary>
            Executes the Instruction.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction.ExecuteOn(System.Object)">
            <summary>
            Executes an instruction on the target passed as an argument
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.Instruction.TimeToExecute">
            <summary>
            The system time to execute the instruction at.
            </summary>
            <remarks>
            The TimeManager.CurrentTime property is used for comparisons.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Instructions.Instruction.CycleTime">
            <summary>
            The amount of time to add to the instruction for cycled execution.  Default of 0 
            instructs the executing logic to not cycle the Instruction.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.Instruction.Target">
            <summary>
            Gets reference to the object that is the target of the Instruction.
            </summary>
        </member>
        <member name="T:FlatRedBall.Joystick">
            <summary>
            Summary description for JoyStick.
            </summary>
        </member>
        <member name="F:FlatRedBall.Joystick.X">
            <summary>
            The x position of the gamepad - left is negative, right is positive.
            </summary>
            <remarks>
            If the gamepad is analog, it can have any value between the minimum and maximum range which are -1000 to 1000
            by default.  A non-analog pad will have three possible values: -1000, 0, and 1000 (or the set minimum and maximum ranges).
            <seealso cref="M:FlatRedBall.Joystick.SetRange(System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Joystick.Y">
            <summary>
            The y position of the gamepad - down is negative, up is positive.
            </summary>
            <remarks>
            If the gamepad is analog, it can have any value between the minimum and maximum range which are -1000 to 1000
            by default.  A non-analog pad will have three possible values: -1000, 0, and 1000 (or the set minimum and maximum ranges).
            <seealso cref="M:FlatRedBall.Joystick.SetRange(System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Joystick.xVelocity">
            <summary>
            The current change of the x value in units per second.
            </summary>
        </member>
        <member name="F:FlatRedBall.Joystick.yVelocity">
            <summary>
            The current change of the y value in units per second.
            </summary>
        </member>
        <member name="F:FlatRedBall.Joystick.timeToStopDetectingRange">
            <summary>
            The time to stop detecting range.
            </summary>
            <remarks>
            If this is -1 (default), then the joystick will not
            detect range during its Update method.  If the value is greater
            than TimeManager.currentTick, then the range will still be detected.
            If the value is not -1 and the time is less than TimeManager.currentTick,
            the value is set to -1 and the endDetectRangeEvent is called (if not null).
            </remarks>
        </member>
        <member name="M:FlatRedBall.Joystick.#ctor">
            <summary>
             Creates an empty joystick reference.
            </summary>
            <remarks>
            Functional joysticks should not be created 
            through this method.  This is included so that 
            in-game objects can have a reference to a joystick 
            without a physical joystick being connected.  References 
            to attached joysticks will be automatically supplied by the 
            InputManager through its Joysticks field.
            <seealso cref="F:FlatRedBall.Input.InputManager.Joysticks"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.Joystick.ButtonReleased">
            <summary>
            Returns the number of the released button.
            </summary>
            <remarks>
            If multiple buttons were released during the same frame
            (unlikely), this will only return the button with the smallest
            number.  That is, if both button numbers 3 and 5 were released,
            this method will return 3.  If no buttons were pushed, this method
            returns -1.
            </remarks>
            <returns>The number of the button released, or -1 if no buttons
            were released this frame.</returns>
        </member>
        <member name="M:FlatRedBall.Joystick.DoublePush(System.Int32)">
            <summary>
            Determines whether a particular button has been pushed twice during the last 1/4 second.
            </summary>
            <param name="buttonNum">The button number to check.</param>
            <returns>Whether the button has been double pushed.</returns>
        </member>
        <member name="M:FlatRedBall.Joystick.Down(System.Int32)">
            <summary>
            Determines whether a particular button is currently down.
            </summary>
            <param name="buttonNum">The button number to check.</param>
            <returns>Whether the button is down.</returns>
        </member>
        <member name="M:FlatRedBall.Joystick.Push(System.Int32)">
            <summary>
            Determines whether a particular button was pushed last frame.
            </summary>
            <param name="buttonNum">The button number to check.</param>
            <returns>Whether the button was pushed.</returns>
        </member>
        <member name="M:FlatRedBall.Joystick.Release(System.Int32)">
            <summary>
            Determines whether a particular button was released last frame.
            </summary>
            <param name="buttonNum">The button number to check.</param>
            <returns>Whether the button was released.</returns>
        </member>
        <member name="M:FlatRedBall.Joystick.SecondsSinceLastPush(System.Int32)">
            <summary>
            Returns the number of seconds that have passed since a particular button was pushed.
            </summary>
            <param name="buttonNum">The button number to check.</param>
            <returns>How many seconds have passed since the last push.</returns>
        </member>
        <member name="M:FlatRedBall.Joystick.SetRange(System.Int32,System.Int32)">
            <summary>
            Sets the range for the joystick.
            </summary>
            <remarks>The default values are set to -1000 and 1000</remarks>
            <param name="minimumRange">The minimum value in the range (inclusive).</param>
            <param name="maximumRange">The maximum value in the range (inclusive).</param>
        </member>
        <member name="T:FlatRedBall.Content.Lighting.SpotLightSave">
            <summary>
            Save class storing SpotLight information
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.SourceReferencingFile">
            <summary>
            Class that defines a source and destination file relationship.  This can be used
            by tools (such as Glue) which maintain the source/destination relationship between files.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SourceReferencingFile.SourceFile">
            <summary>
            The source file - the file which will be built to create the destination.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SourceReferencingFile.DestinationFile">
            <summary>
            The destination file - the file which will be created when the source is built.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SourceReferencingFile.#ctor">
            <summary>
            Instantiates a new SourceReferencingFile instance.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SourceReferencingFile.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new SourceReferencingFile instance using the argument source and destination files.
            </summary>
            <param name="sourceFile">The source file name to use.</param>
            <param name="destinationFile">The destination file name to use.</param>
        </member>
        <member name="T:FlatRedBall.Graphics.Lighting.ILight">
            <summary>
            Interface to lights
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Lighting.ILight.DiffuseColor">
            <summary>
            Gets or sets the color of this light
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Lighting.ILight.SpecularColor">
            <summary>
            Gets or sets the color of this light
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Lighting.ILight.Enabled">
            <summary>
            Gets or sets the enabled status of this light
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Lighting.LightBase">
            <summary>
            Base class for positioned lights
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Lighting.LightBase.mDiffuseColor">
            <summary>
            The color of this light.  The default value is (1,1,1).
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Lighting.LightBase.mSpecularColor">
            <summary>
            The color of this light.  The default value is (0,0,0).
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Lighting.LightBase.mEnabled">
            <summary>
            Whether or not this light is enabled
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Lighting.LightBase.GetDirectionTo(Microsoft.DirectX.Vector3)">
            <summary>
            This is mostly for the Windows Phone system
            All lights on the phone are directional, relative to the object being lit.
            </summary>
            <param name="objectPosition"></param>
            <returns></returns>
        </member>
        <member name="P:FlatRedBall.Graphics.Lighting.LightBase.DiffuseColor">
            <summary>
            Gets or sets the RGB color of this light
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Lighting.LightBase.SpecularColor">
            <summary>
            Gets or sets the RGB color of this light
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Lighting.LightBase.Enabled">
            <summary>
            Gets or sets whether or not this light is enabled
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Tile.GridRelativeState`1.X">
            <summary>
            The relative X position.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Tile.GridRelativeState`1.Y">
            <summary>
            The relative Y position.
            </summary>
        </member>
        <member name="T:FlatRedBall.Network.NetSprite">
            <summary>
            Summary description for NetSprite.
            </summary>
        </member>
        <member name="T:FlatRedBall.Network.NetworkManager">
            <summary>
            [Undocumented]
            </summary>
        </member>
        <member name="P:FlatRedBall.Network.NetworkManager.AdditionalLag">
            <summary>
            The amount of time in seconds that the NetworkManager will hold information before sending it.
            This is used to help simulate lag for debugging.
            </summary>
        </member>
        <member name="M:FlatRedBall.Renderer.DrawVBList(System.Collections.Generic.List{Microsoft.DirectX.Direct3D.VertexBuffer},System.Collections.Generic.List{FlatRedBall.Graphics.RenderBreak},System.Int32)">
            <summary>
            Renders the contents of a VertexBuffer to the screen.
            </summary>
            <remarks>
            This method makes a few assumptions:
            
            <para>
            The BeginDrawing method has been called.
            </para>
            <para>
            Asside from states stored in the renderBreaks, the states have been set appropriately.
            </para>
            <para>
            The world matrix has been set according to the camera.
            </para>
            
            </remarks>
            <param name="vertexBufferList">List of vertex buffers.  When the method finishes
            rendering one VertexBuffer, it moves on to the next.</param>
            <param name="renderBreaks">A list of RenderBreaks.</param>
            <param name="numberOfTrianglesToRender">The total number of triangles.</param>
        </member>
        <member name="T:FlatRedBall.SpriteCustomBehavior">
            <summary>
            Delegate for methods which can be assigned to the Sprite for every-frame
            custom logic or when a Sprite is removed.
            </summary>
            <remarks>
            <seealso cref="F:FlatRedBall.Sprite.CustomBehavior"/>
            <seealso cref="E:FlatRedBall.Sprite.Remove"/>
            </remarks>
            <param name="sprite">The Sprite on which the logic should execute.</param>
        </member>
        <member name="T:FlatRedBall.Sprite">
            <summary>
            Encapsulates information for a visual element on the screen.  Includes the ability
            to set behavior, animation and other properties.
            </summary>
            <remarks>
            Sprites are the heart of the visual portion of a game.  A sprite is an object that
            contains an image to display, called a <see cref="T:FlatRedBall.Texture2D">Texture</see>.
            The Sprite class contains properties and methods to set the behavior of the sprite -
            including movement, animation, attachment, and others.
            </remarks>
            <seealso cref="T:FlatRedBall.Texture2D"/>
            <seealso cref="T:FlatRedBall.SpriteManager"/>
        </member>
        <member name="F:FlatRedBall.Sprite.mEmpty">
            <summary>
            Used by particles to flag a particular Sprite as empty.
            </summary>
            <remarks>
            The SpriteManager is responsible for particle recycling and uses this value to indicate
            whether a Sprite is currently used.  This should not be manually modified.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Sprite.#ctor">
            <summary>
            Instantiates a new Sprite.
            </summary>
            <remarks>
            This method is generally not used to create new Sprites as most Sprites are created through the
            SpriteManager's AddSprite method.  Sprites created through this method will not be drawn on screen
            until they are added to the SpriteManager's internal arrays through the AddSprite method.
            <seealso cref="M:FlatRedBall.SpriteManager.AddSprite(System.String)"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.Sprite.Initialize(System.Boolean)">
            <summary>
            Initializes all Sprite variables.
            </summary>
            <remarks>
            This method is generally not explicitly called as Sprites created through the SpriteManager
            or the Sprite constructor already have all values initialized.  Particles can be used to reduce
            garbage collection, so Sprite recycling is generally not recommended.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Sprite.Clone``1">
            <summary>
            Creates a clone of the Sprite.
            </summary>
            <remarks>
            All value fields will be copied to the returned Sprite.  There are a few 
            things to consider when using this method:
            
            <para>
            The cloned Sprite will be attached to this Sprite's parent, but 
            the parent will not know about the child.  Therefore, it may be 
            necessary to call AttachTo to the Parent if the relationship is to
            be a two way relationship.
            </para>
            <para>
            The cloned Sprite will not belong to any arrays that this instance does including the SpriteManager's
            internal arrays.
            </para>
            <para>
            The cloned Sprite will not have any children.
            </para>
            <para>Unlike early versions of the engine, the cloned Sprite will have a cloned 
            InstructionArray and all cloned FrbInstructions will reference the new Sprite.  
            Remove instructions will not be set for the new Sprite as
            this Instruction is stored by the SpriteManager.
            </para>
            <para>
            The cloned Sprite will have a new animationChains reference, but each
            contained AnimationChain will be the same reference as stored in this
            instance's AnimationChain reference.
            
            </para>
            
            </remarks>
            <returns>The cloned Sprite.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.AnimateSelf(System.Double)">
            <summary>
            This adjusts the Sprite's currentFrame according to its currentChain, animationSpeed, and global time.  It also sets
            the Sprite's texture accordingly if there is a change in frame.
            </summary>
            <remarks>
            A frame will show as long as its frameTime/animationSpeed indicates.  Therefore, if
            a Sprite has 3 AnimationFrames with the following times:  A 300, B 100, C 50, then A will show for 300/animationSpeed
            milliseconds, B for 100/animationSpeed and so on.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Sprite.AddAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)">
            <summary>
            Stores a reference to an AnimationChain in the Sprite's internal AnimationChainArray.
            </summary>
            <remarks>
            Giving a Sprite a reference to an AnimationChain is a good way to abstract switching of animations.
            <seealso cref="M:FlatRedBall.Sprite.SetAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)"/>
            </remarks>
            <param name="chainToAdd">The AnimationChain to store.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.AddAnimationChainList(FlatRedBall.Graphics.Animation.AnimationChainList)">
            <summary>
            Stores references to all passed AnimationChains in the Sprite's internal AnimationChainArray.
            </summary>
            <remarks>
            Giving a Sprite a reference to an AnimationChain is a good way to abstract switching of animations.
            Each reference in the argument AnimationChainArray is copied to the Sprite's internal AnimationChainArray.
            Calling this method multiple times with different AnimationChains will result in the Sprite storing
            references to all AnimationChains referenced in the series of calls.  This is mentioned because the
            reference to the argument AnimationChainArray is not copied over the internal AnimationChainArray field.
            <seealso cref="M:FlatRedBall.Sprite.SetAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)"/>
            </remarks>
            <param name="chainArrayToAdd">The AnimationChainArray referencing all AnimationChains to add.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.ClearAnimationChains">
            <summary>
            Clears all references to AnimationChains, sets the currentChain to null, and sets the animate field to false.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.RemoveAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)">
            <summary>
            Removes the AnimationChain from the Sprite's internal AnimationChainArray.
            </summary>
            <remarks>
            If the chainToRemove is also the currentChain, the currentChain reference is set to null and the animate field 
            is set to false.
            </remarks>
            <param name="chainToRemove">The AnimationChain to remove.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.SetAnimationChain(FlatRedBall.Graphics.Animation.AnimationChain)">
            <summary>
            Sets the argument chainToSet as the animationChain. If the argument chainToSet is not
            part of the Sprite's internal list of AnimationChains, it is added.
            </summary>
            <remarks>
            This differs from FlatRedBall MDX - this method on FlatRedBall MDX does not add the argument
            AnimationChain to the Sprite's internal list.
            <para>
            This does not set any animation-related properties, but it does set the current
            texture to the current frame's texture.
            </para>
            </remarks>
            <param name="chainToSet">The AnimationChain to set as the current AnimationChain.  This is
            added to the internal AnimationChains property if it is not already there.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.SetAnimationChain(System.String)">
            <summary>
            Sets the current AnimationChain by name and keeps the CurrentFrame the same.
            </summary>
            <remarks>
            This method assumes that the Sprite contains a reference to an AnimationChain with the name matching chainToSet.  Passing a
            name that is not found in the Sprite's AnimationChainArray will not cause any changes.
            
            <para>This method will keep the CurrentFrame property the same (unless it exceeds the bounds of the new AnimationChain).  In the 
            case that the CurrentFrame is greater than the bounds of the new AnimationChain, the animation will cycle back to the beginning.
            The animate field is not changed to true if it is false.</para>
            <seealso cref="P:FlatRedBall.Sprite.AnimationChains"/>
            </remarks>
            <param name="chainToSet">The name of the AnimationChain to set as current.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.AttachAsLostChild(FlatRedBall.PositionedObject)">
            <summary>
            Sets the Parent without the parent PositionedObject knowing about the attachment.
            </summary>
            <remarks>
            <para>
            This method should not be used in most situations, as the two way relationship between Parent and Child
            is necessary for many FRB functions.  This method is included for rare situations when a Sprite needs to store
            an attachment for reference, as is common in the FRBDK for undoing actions.</para>
            <para>In this situation, to reestablish the two-way relationship between parent and child, the child
            Sprite must first be Detached and then reattached with the AttachTo method.</para>
            
            <para>In general, the AttachTo method should be used for regular attachments.</para>
            <seealso cref="!:FlatRedBall.Sprite.AttachTo"/>
            </remarks>
            <param name="poToAttachTo">The parent to be set.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.GetAllDescendantsOneWay(FlatRedBall.SpriteList)">
            <summary>
            Fills SpriteArray with all Sprites lower (children of) in the hierarchical Sprite structure.
            </summary>
            <remarks>
            All Sprites are added one-way.  Passing a null reference will throw an exception.
            </remarks>
            <param name="spriteArray">The SpriteArray to fill.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.UpdateDependencies(System.Double)">
            <summary>
            Updates the absolute position and rotation using relative values and the Parent PositionedObject.
            </summary>
            <remarks>
            This method recurs up the hierarchical chain calling UpdateDependencies so that the entire family of 
            PositionedObjects is positioned appropriately.
            </remarks>
            <param name="currentTime">The currentTime used to mark the time the update is made.  The currentTime is used to 
            mark when the last update was made so that the same Sprite isn't updated multiple times per frame.</param>
            <param name="secondDifference">The number of seconds that have passed during the last frame.</param>
            <param name="secondDifferenceSquaredDividedByTwo">A precalculated value to speed up acceleration affects on position.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.CollideAgainst(FlatRedBall.SpriteList)">
            <summary>
            Returns a one-way SpriteArray containing all Sprites in the argument sa which collide against this instance.
            </summary>
            <remarks>
            Each Sprite in the argument sa is tested using the CollideAgainst method which accepts a Sprite argument.
            </remarks>
            <param name="sa">The Sprites to collide against.</param>
            <returns>The one-way SpriteArray with all Sprites collided against.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.CollideAgainst(FlatRedBall.Collections.SpriteArrayArray)">
            <summary>
            Returns a one-way SpriteArray containing all Sprites in the argument sa which collide against this instance.
            </summary>
            <remarks>
            Each Sprite in the argument sa is tested using the CollideAgainst method which accepts a Sprite argument.</remarks>
            <param name="sa">The Sprites to collide against.</param>
            <returns>The one-way SpriteArray with all Sprites collided against.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.AreCustomFunctionsClear">
            <summary>
            Returns whether the customFunctions is clear.
            </summary>
            <returns>Whether the customFunctions is clear.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.ClearCustomFunctions">
            <summary>
            Clears the customFunctions.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.ClearOnRemoveSprite">
            <summary>
            Clears the onRemoveSprite customFunction.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.CustomFunctionContains(FlatRedBall.SpriteCustomBehavior)">
            <summary>
            Returns whether a particular customFunction has been added to the Sprite's customFunctions.
            </summary>
            <param name="cf">The customFunction to search for.</param>
            <returns>Whether the Sprite's customFunctions has had the argument added.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.IsOnRemoveSpriteClear">
            <summary>
            Returns whether the onRemoveSprite customFunction is clear.
            </summary>
            <returns>Whether the onRemoveSprite customFunction is clear.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.OnRemoveSpriteContains(FlatRedBall.SpriteCustomBehavior)">
            <summary>
            Returns whether a particular customFunction as been added to the Sprite's onRemoveSprite customFunction.
            </summary>
            <param name="cf">The customFunction to search for.</param>
            <returns>Whether the Sprite's onRemoveSprite has had the argument added.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.RotateOnXAxis(System.Single)">
            <summary>
            Rotates the Sprite on its own X axis by radians.
            </summary>
            <remarks>
            If the Sprite is attached to a PositionedObject, the relative rotation values will
            be changed.  This method may modify any of the absolute or relative rotational values to
            accomplish the desired rotation.
            </remarks>
            <param name="rotationAmount">The amount to rotate the Sprite on the Y Axis in radians.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.RotateOnYAxis(System.Single)">
            <summary>
            Rotates the Sprite on its own Y axis by radians.
            </summary>
            <remarks>
            If the Sprite is attached to a PositionedObject, the relative rotation values will
            be changed.  This method may modify any of the absolute or relative rotational values to
            accomplish the desired rotation.
            </remarks>
            <param name="rotationAmount">The amount to rotate the Sprite on the Y Axis in radians.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.RotateOnZAxis(System.Single)">
            <summary>
            Rotates the Sprite on its own Z axis by radians.
            </summary>
            <remarks>
            If the Sprite is attached to a PositionedObject, the relative rotation values will
            be changed.  This method may modify any of the absolute or relative rotational values to
            accomplish the desired rotation.
            </remarks>
            <param name="rotationAmount">The amount to rotate the Sprite on the Z Axis in radians.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.AreInstructionsClear">
            <summary>
            Determines whether the Sprite has any FrbInstructions left to execute.
            </summary>
            <returns>Whether there are any FrbInstructions left to execute.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.ClearInstructions">
            <summary>
            Clears all stored FrbInstructions.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.TimedActivity(System.Single,System.Double,System.Single)">
             <summary>
             Conducts timed activity.
             </summary>
             <remarks>
             This method is responsible for changing all position, numerical state, and velocity
             values according to velocity and acceleration values.  This method:
            
             <para> - Updates absolute position according to absolute velocity.</para>
            	<para> - Updates absolute velocity and absolute position according to absolute acceleration.</para>
             <para> - Updates absolute velocity according to drag.</para>
             <para> - Updates absolute rotation according to absolute rotation velocity.</para>
             <para> - Updates scale according to scale velocity.</para>
             <para> - Updates fade according to fadeRate.</para>
             <para> - Updates tints according to tintRates.</para>
             <para> - Sets lastState according to the state value.</para>
             <para> - Updates real velocity and acceleration if keepTrackOfReal is true.</para>
             <para> - Conducts particle emission if emitting and if Emitters are attached.</para>
             
             This method cannot be overridden.  
             
             </remarks>
             <param name="secondDifference">The amount of time since the last call to TimedActivity which is usually the length of the last frame.</param>
             <param name="secondDifferenceSquaredDividedByTwo">The number of seconds squared and divided by two - used in applying acceleration to position.</param>
             <param name="lastSecondsPassed">The number of seconds passed last time this method was called - used to calculate real velocities and accelerations.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.GetTextureName">
            <summary>
            Returns the referenced FrbTexture's fileName, or an empty string if no FrbTexture is referenced.
            </summary>
            <returns>The file name of the referenced FrTexture.</returns>
        </member>
        <member name="M:FlatRedBall.Sprite.SetFromSave(FlatRedBall.Content.Scene.SpriteSave,System.String)">
            <summary>
            Sets the Sprite's fields so that it reflects the saveToSetFrom SpriteSave.
            </summary>
            <remarks>
            If the Sprite is to be used regularly, then its texture, attachments, and whether it is ordered must be 
            validated.
            
            <seealso cref="!:FlatRedBall.SpriteManager.ValidateDependencies"/>
            <seealso cref="M:FlatRedBall.SpriteManager.ValidateOrdered"/>
            <seealso cref="!:FlatRedBall.SpriteManager.ValidateSpriteTextureAndAnimations"/>
            </remarks>
            <param name="saveToSetFrom">The SpriteSave to set from.</param>
        </member>
        <member name="M:FlatRedBall.Sprite.SetScaleYRatioToX">
            <summary>
            Sets the ScaleY so that the ScaleX/ScaleY ratio is the same as the source image used for the Sprite's texture.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.SetScaleXRatioToY">
            <summary>
            Sets the ScaleY so that the ScaleX/ScaleY ratio is the same as the source image used for the Sprite's texture.
            </summary>
        </member>
        <member name="M:FlatRedBall.Sprite.ToString">
            <summary>
            Returns a string representation of the Sprite.
            </summary>
            <returns>A string representation of the Sprite.</returns>
        </member>
        <member name="P:FlatRedBall.Sprite.Alpha">
            <summary>
            Controls the Sprite's transparency.
            </summary>
            <remarks>
            Fade controls a Sprite's transparency.   A completely opaque Sprite has an
            Alpha of 1 while a completely transparent object has an Alpha of 0.
            
            Setting the AlphaRate of a completely opaque Sprite to -1 will 
            make the sprite disappear in one second.  Invisible Sprites continue
            to remain in memory and are managed by the SpriteManager.  The Alpha variable
            will automatically regulate itself if the value is set to something outside of the
            0 - 1 range.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.ColorOperation">
            <summary>
            The DirectX TextureOperation to apply to the Sprite's tints.
            </summary>
            <remarks>
            The general formula for determining the final color of a Sprite is as follows:
            
            <para>Final Color = arg1 (Sprite Texture) operator (how to apply the tint) arg2 (tint)</para>
            
            For example, if the colorOperation is ADD,then the operation is:
            
            <para>Final Color = arg 1 (Sprite Texture) + arg2 (tint)</para>
            
            There are many types of TextureOperations which are covered in the DirectX documentation.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.BlendOperation">
            <summary>
            The blend mode to use when drawing the Sprite.
            </summary>
            <remarks><seealso cref="T:FlatRedBall.Graphics.BlendOperation"/></remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.ScaleX">
            <summary>
            The unit distance from the center of the sprite to the left or right edge
            </summary>
            <remarks>
            <para>
            The ScaleX variable sets a Sprite's size.  This variable is not the width of
            the Sprite, but the distance from the center to the edge of the sprite.  The
            width of a Sprite is its ScaleX variable multiplied by two.
            </para>
            Setting ScaleX to a negative value does flip a Sprite, but is not recommended
            because it can cause collision and culling problems problems - Sprites may not be drawn when they should be.
            
            Scl values can also be set through the pixelSize property.
            <seealso cref="P:FlatRedBall.Sprite.PixelSize"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.ScaleY">
             <summary>
             The unit distance from the center of the sprite to the top or bottom edge
             </summary>
             <remarks>
             <para>
             The ScaleY variable sets a Sprite's size.  This variable is not the height of
             the Sprite, but the distance from the center to the edge of the sprite.  The
             height of a Sprite is its ScaleY variable multiplied by two.
             </para>
             Setting ScaleY to a negative value does flip a Sprite, but is not recommended
             because it can cause collision and culling problems problems - Sprites may not be drawn when they should be.
            
             Scl values can also be set through the pixelSize property.
             <seealso cref="P:FlatRedBall.Sprite.PixelSize"/>
             </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.ScaleXVelocity">
            <summary>
            ScaleX change in units per second
            </summary>
            <remarks>
            This variable is how fast the Sprite's ScaleX is changing.  It is measured
            in units per second.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.ScaleYVelocity">
            <summary>
            ScaleY change in units per second
            </summary>
            <remarks>
            This variable is how fast the Sprite's ScaleY is changing.  It is measured
            in units per second.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.CursorSelectable">
            <summary>
            Determines whether a Sprite can be selected by a cursor
            </summary>
            <remarks>
            The Cursor class has functionality built in for editing Sprites.
            By default, Sprites are active.  Setting active to false will
            require a double-click to select a sprite rather than a single
            click.  Aside from Cursor interaction, active has no functionality.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.FlipHorizontal">
            <summary>
            Whether to flip the Sprite's texture on the y Axis (left and right switch).
            </summary>
            <remarks>
            This kind of texture rotation can be accomplished by simply rotating 
            a Sprite on its yAxis; however, there are times when this
            is inconvenient or impossible due to attachment relationships.  There 
            is no efficiency consequence for using either method.  If a Sprite
            is animated, this value will be overwritten by the AnimationChain being used.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.FlipVertical">
            <summary>
            Whether to flip the Sprite's texture on the x Axis (top and bottom switch).
            </summary>
            <remarks>
            This kind of texture rotation can be accomplished by simply rotating a 
            Sprite on its xAxis; however, there are times when this
            is inconvenient or impossible due to attachment relationships.  
            There is no efficiency consequence for using either method.  If a Sprite
            is animated, this value will be overwritten by the AnimationChain being used.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.TimeCreated">
            <summary>
            The time returned by the TimeManager when the Sprite was created.
            </summary>
            <remarks>
            This value is automatically set when the Sprite
            is added through the SpriteManager.  If a Sprite is created manually (either as a
            Sprite or a class inheriting from the Sprite class) this value should be set manually
            if it is to be used later.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.Visible">
            <summary>
            Controls the visibility of the Sprite
            </summary>
            <remarks>
            This variable controls the visiblity of the Sprite.  Sprites are visible
            by default.  Setting visible to false will make the sprite invisible, but
            the Sprite will continue to behave regularly; custom behavior, movement, attachment,
            and animation are still executed, and collision is possible.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Sprite.Vertices">
            <summary>
            These can be used to change Sprite appearance
            on individual vertices.
            </summary>
            <remarks>
            The index begins counting at the top left (index 0)
            and increases moving clockwise.
            </remarks>
        </member>
        <member name="T:FlatRedBall.SpriteManager">
             <summary>
             The SpriteManager is a class which manages creation, destruction, movement, custom
             function calling, layering, attachments, animating, and loading Sprites.
             </summary>
             <remarks>
            	The SpriteManager is the "core" of the FlatRedBall engine.  It is responsible
            	for managing almost all Sprite, and Camera behavior. 
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManager.Exiting">
            <summary>
            Tells the SpriteManager that the program is exiting and that it should not try to reaquire a lost device.
            </summary>
            <remarks>
            The SpriteManager will automatically try to reaquire the D3D Device in the BeginDrawing method if it is lost unless
            this value is set to true.  Generally, there is no need to set this to true unless the device is actively disposed.  
            Generally (if using the default FRB Template), exiting is done in the GameForm.Exit method.  This disposes the form
            which keeps the while(frm.Created) loop from cycling, but still keeps all objects alive as the references are 
            still kept in the Main method during the last run of the loop.
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.Initialize(FlatRedBall.SpriteManagerSettings)">
            <summary>
            Instantiates a new SpriteManager.
            </summary>
            <remarks>
            <para>The SpriteManager's construction does the following:</para>
            <para> - Creates the Direct3D Device which is responsible for drawing.</para>
            <para> - Allocates memory for Particle Sprites.</para>
            <para> - Creates the TextureManager</para>
            <para> - Creates the TextManager</para>
            <para> - Creates one camera in the ca array.</para>
            <para> - Sets the orderingStyle to Ordering.Z</para>
            </remarks>
            <param name="sms">SpriteManagerSettings to use when creating the SpriteManager.</param>
            <param name="sr">A StreamWriter which recieve information about the construction of the SpriteManager.</param>
            <param name="formToUse">The form (Window) to which the SpriteManager will draw to.</param>
            <param name="defaultTextLocation">The location of the defaultText.tga and defaultText.fnt files.  If these
            are not found, calling TextManager.BeginDraw will thrown an exception.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveSprite(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite from the SpriteManager.
            </summary>
            <remarks>
            <para>If the Sprite contains any Emitters in its Children, the Emitter is disposed.  This
            disposes any IDisposables that the Emitter references.</para>
            <para>This method calls the Sprite's callOnRemove event.</para>
            <para>The argument Sprite will also remove itself from all two way SpriteArrays it 
            belongs to.</para>
            <para>If the Sprite is a particle Sprite, it is recycled back into the 
            available particleSprites pool.</para>
            <para>This method calls the argument Sprite's ClearRelationships method.</para>
            <seealso cref="!:FlatRedBall.Sprite.ClearRelationships"/>
            </remarks>
            <param name="spriteToRemove"></param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveSpriteList``1(FlatRedBall.Math.AttachableList{``0})">
            <summary>
            Removes all Sprites contained in the SpriteArray from the SpriteManager.
            </summary>
            <remarks>
            All Sprites in the
            SpriteArray will be removed unless the relationship between the PositionedObjectArray
            and the Sprite was one-way.
            <para>If the Sprite contains any Emitters in its Children, the Emitter is disposed.  This
            disposes any IDisposables that the Emitter references.</para>
            </remarks>
            <param name="arrayToRemove"></param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveLayer(FlatRedBall.Graphics.Layer)">
            <summary>
            Removes all Sprites and DynamicSprites from the argument layerToRemove and removes the SpriteLayer from the SpriteManager.
            </summary>
            <remarks>
            The Text objects in the layerToRemove are not automatically removed by this method.
            This method calls the RemoveSprite(Sprite) method.  For more information, see
            that method's entry.
            <seealso cref="M:FlatRedBall.SpriteManager.RemoveSprite(FlatRedBall.Sprite)"/>
            </remarks>
            <param name="layerToRemove">The layer to be removed.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveSpriteAndChildren(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite and all Sprites below it in the attachment hierarchy.
            </summary>
            <param name="spriteToRemove">This Sprite will be removed.  Also, all descendants of this Sprite
            will be removed.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveSpriteAndChildren(FlatRedBall.SpriteList)">
            <summary>
            Removes all Sprites held in argument SpriteArray and all Sprites below in the attachment hierarchies.
            </summary>
            <param name="spriteToRemove">The SpriteArray containing all Sprites to be removed.  All descendants
            of the Sprites in the SpriteArray will also be removed.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveSpritePreserveRelationships(FlatRedBall.Sprite)">
            <summary>
            Removes the Sprite from the SpriteManager but preserves emitters, attachment and children references. 
            </summary>
            <remarks>
            Although the removed Sprite will preserve its parent and children, the parent will 
            no longer see this Sprite as its child, and the children will no longer see this 
            Sprite as their parent.  The preservation of relationships is not a functional one.  Usually
            this method is used to keep relationships alive on a removed Sprite for reattachment at
            a later time.
            </remarks>
            <param name="spriteToRemove">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.RemoveAllParticleSprites">
            <summary>
            Removes all particle Sprites and refills the particle Sprite pool.
            </summary>
            <remarks>
            This method uses the particle initialization function to initialize all particles.
            <seealso cref="!:FlatRedBall.Sprite.SetParticleInitializationFunction"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.CallCustomFunctions">
            <summary>
            Calls all contained Sprites' customFunctions.
            </summary>
            <remarks>
            This method operates on all regular (and particle), layered, top overlay, and managed invisible Sprites.
            Unordered Sprites' customFunctions are also called if the SpriteManagerSetting's 
            callCustomFunctionsUnorderedSprites used in the SpriteManger's construction was set to true.
            This method is called automatically by the FrbTemplate in GameMain.cs.
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.Update">
            <summary>
            Calls TimedActivity on all Cameras and Sprites excluding Unordered Sprites.
            </summary>
            <remarks>
            Uses the TimeManager's secondDifference for movement.
            This method is called automatically by the FrbTemplate in GameMain.cs.
            <seealso cref="M:FlatRedBall.Sprite.TimedActivity(System.Single,System.Double,System.Single)"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.Update(System.Single)">
            <summary>
            Calls TimedActivity on all Cameras and Sprites.
            </summary>
            <remarks>
            This method excludes Unordered Sprites if the SpriteManagerSettings passed
            to the SpriteManager constructor indicate that the UnorderedSprites should be 
            excluded.
            <seealso cref="M:FlatRedBall.Sprite.TimedActivity(System.Single,System.Double,System.Single)"/>
            </remarks>
            <param name="secondDifference">The secondDifference to use for timed activity.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.Sort">
            <summary>
            Performs sorting according to the orderingStyle.
            </summary>
            <remarks>
            This method is called automatically by the FrbTemplate in GameMain.cs.
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.SortSecondaryY">
            <summary>
            Sorts all Sprites with the same Z value by their Y value.
            </summary>
            <remarks>
            <para>
            This method is fast enough to be called every frame without any slow down.
            </para>
            
            This method is very useful when creating top-down games.  Consider two Sprites, 
            both with the same Z value.  They may appear as follows:
            
            <code>
            +----+
            |    |
            |  +-----+
            |  |\\\\\|
            +--|\\\\\|
               |\\\\\|
               +-----+
            </code>
            
            If the shaded Sprite is our game character and the unshaded Sprite is a tree, 
            we would expect the character to move "behind" the tree.  But since the 
            SpriteManager considers Z sorting (or distance from camera if that orderingStyle
            is selected), the following will occur when the player moves up:
            
            <code>
               +-----+
               |\\\\\|
            +--|\\\\\|
            |  |\\\\\|
            |  +-----+
            |    |
            +----+
            </code>
               
            
            <para>
            One way to solve this would be to adjust the Z value of the Sprites so that the 
            character is moved just "behind" the tree.  This method is not the best 
            because it introduces Z breaks in the SpriteArray which can reduce performance 
            (very slightly), and can have some side effects like objects not sorting 
            correctly with what is below or above them if the value range is not
            carefully selected. Also, constantly monitoring the Z value of the character 
            can be a hassle, and if the scene consists of many buildings, trees, 
            and other NPCs, the monitoring can become even more difficult. 
            </para>
            
            <para>
            Calling the SortSecondaryY method will tell the SpriteManager to sort all 
            Sprites with the same Z value by their Y value.  If SortSecondaryY
            is called, the two Sprites would be drawn as follows:
            </para>
            
            <code>
               +-----+
               |\\\\\|
            +----+\\\|
            |    |\\\|
            |    |---+
            |    |
            +----+
            </code>
            
            This is the quickest way of enforcing ordering that is useful for 
            top-down games.  Another method is to use SpriteLayers.
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.UpdateDependencies">
            <summary>
            Adjusts the absolute position and rotation of all Sprites that have attachments.
            </summary>
            <remarks>
            This method updates the dependencies of regular Sprites, managed invisible Sprites, unordered Sprites, layered Sprites, and topOverlay Sprites.
            This method is called automatically by the FrbTemplate in GameMain.cs.
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.FindSpriteByName(System.String)">
            <summary>
            Searches for and returns a Sprite with the name matching the argument nameToLookFor.
            </summary>
            <remarks>
            This method will return the first Sprite found with the matching name.  The order searched is
            regular, unordered, layered, topOverlay, managed invisible.  This does not search for DynamicSprites.
            </remarks>
            <param name="nameToLookFor">The exact name to match.</param>
            <returns>The Sprite with the matching name or null if no match is found.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.FindSpriteByName(System.String,FlatRedBall.Sprite)">
            <summary>
            Searches for and returns a Sprite with the name matching the argument nameToLookFor and skipping over the argument spriteToSkip.
            </summary>
            <remarks>
            This method will return the first Sprite found with the matching name skipping over the argument spriteToSkip.  The order searched is
            regular, unordered, layered, topOverlay, managed invisible.  This does not search for DynamicSprites.
            </remarks>
            <param name="nameToLookFor">The exact name to match.</param>
            <param name="spriteToSkip">Reference to a Sprite to skip in the search.</param>
            <returns>The Sprite with the matching name or null if no match is found.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.FindSpriteWithNameContaining(System.String)">
            <summary>
            Searches for and returns the first Sprite found with the name containing the argument nameToLookFor.
            </summary>
            <remarks>
            The order searched is regular, unordered, layered, topOverlay, managed invisible.  A search for "one" might
            return a Sprite with the name "boneChip" or "phone", but not "spriteOne".    This does not search for DynamicSprites.
            </remarks>
            <param name="nameToLookFor">The string which should appear in the Sprite's name.</param>
            <returns>The Sprite with name containing the argument nameToLookFor or null if no match is found.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.FindSpritesWithNameContaining(System.String)">
            <summary>
            Returns a one-way SpriteArray containing all Sprites with the name containing the argument nameToLookFor.
            </summary>
            <remarks>
            It is common practice to designate a particular string that will appear in all Sprites for a particular behavior when creating
            scenes in the SpriteEditor.  For example, when creating a side-scrolling platformer, certain Sprites may be marked as being
            Sprites that the character can collide against and walk on.  In this case, these Sprites may include "_co_" or perhaps "_c" in
            their name.  After the scene is loaded in a project, all Sprites that the character can collide against and walk on can be found
            by calling this method with the appropriate string.  For efficiency reasons, this method can also be called through SpriteArrays.
            <seealso cref="!:FlatRedBall.Collections.SpriteArray.FindSpritesWithNameContaining"/>
            </remarks>
            <param name="nameToLookFor">The string which should appear in the Sprite's name.</param>
            <returns>A one-way SpriteArray with all Sprites' names containing the argument nameToLookFor.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.FindSpriteAt(System.Single,System.Single)">
            <summary>
            [Deprecated] Finds a Sprite at a particular location.
            </summary>
            <remarks>
            This method is incomplete and will be removed in future versions of the engine.  It searches for Sprites at a particular location,
            but does not consider rotation and only searches regular and unordered Sprites.
            </remarks>
            <param name="x">The absolute x location.</param>
            <param name="y">The absolute y location.</param>
            <returns>The Sprite at the particular location.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.CompleteAttachments(FlatRedBall.Sprite)">
            <summary>
            Fixes any broken two-way relationships between the argument spriteToComplete's parents and itself as well
            as the spriteToComplete's children and itself.
            </summary>
            <remarks>
            This method is useful for completing attachments when a Sprite was attached using AttachAsLostChild method or if
            the Sprite's children don't recognize the Sprite as its parent, which can result from calling RemoveSpritePreserveRelationships.
            <seealso cref="M:FlatRedBall.Sprite.AttachAsLostChild(FlatRedBall.PositionedObject)"/>
            <seealso cref="M:FlatRedBall.SpriteManager.RemoveSpritePreserveRelationships(FlatRedBall.Sprite)"/>
            </remarks>
            <param name="spriteToComplete">Reference to the Sprite that should have its relationships completed.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.ValidateOrdered">
            <summary>
            Categorizes Sprites into the ordered/unordered SpriteArrays according to each Sprite's
            ordered property.
            </summary>
            <remarks>
            This method is usually called after a .scn file containing unordered Sprites is loaded.  All
            Sprites in memory are tested using this method.
            </remarks>
        </member>
        <member name="M:FlatRedBall.SpriteManager.ValidateOrdered(FlatRedBall.Sprite)">
            <summary>
            Categorizes the argument spriteToValidate into the ordered/unordered SpriteArray according to its
            ordered property.
            </summary>
            <remarks>
            This method is usually called after a .scn file containing unordered Sprites is loaded.
            </remarks>
            <param name="spriteToValidate">The Sprite to categorize.</param>
        </member>
        <member name="M:FlatRedBall.SpriteManager.IsTextureReferenced(FlatRedBall.Texture2D)">
            <summary>
            Determines whether any stored Sprites or DynamicSprites reference the argument texture.
            </summary>
            <remarks>
            This method checks ordered, unordered, layered, topOverlay, camera, managedInvisible Sprites,
            and DynamicSprites.
            It is possible for this method to inaccurately report the referencing of SpriteGrid textures.
            This method only sees the references of Sprites in memory, but the SpriteGrid stores
            the textures it references in an internal TextureGrid.  Therefore, if a texture is referenced
            in the TextureGrid, but the particular location is off screen (and the Sprite is not in memory)
            </remarks>
            <param name="texture">The texture to test for references.</param>
            <returns>Whether any Sprites in the SpriteManager's memory are referenced.</returns>
        </member>
        <member name="M:FlatRedBall.SpriteManager.ConvertToOrderedSprite(FlatRedBall.Sprite)">
            <summary>
            Makes a Sprite a regular (ordered) Sprite in the SpriteManger's memory.
            </summary>
            <remarks>
            Currently assumes that the Sprite is an Unordered Sprite (not layered, not already 
            ordered, belongs to the SpriteManager), or a DynamicSprite (also belonging to the
            SpriteManager).  If either of these is not the case, this method will not
            do anything.
            
            <para>WARNING:  If the Sprite being converted was a DynamicSprite, not all fields
            will be copied over, and children and array membership will not be copied.  For
            information on what is not copied, see Sprite.SetFromDynamicSprite.
            <seealso cref="!:FlatRedBall.Sprite.SetFromDynamicSprite"/></para>
            
            </remarks>
            <param name="s">Sprite to make an Ordered Sprite.</param>
            <returns>Returns reference to the newly created Sprite which occurs
            when the argument is a DynamicSprite.  Otherwise, no new instance is created
            and the method returns null.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlatRedBall.SpriteManager.SaveScreenshot(System.String)" -->
        <member name="M:FlatRedBall.SpriteManager.UpdateUnordered(System.Boolean)">
            <summary>
            Updates the vertices of the unordered Sprites but performs no culling.
            </summary>
            <param name="orderBlocksByZ">Whether to order the texture blocks by z.
            This should be false if the Unordered Sprites are manually updated every frame.
            If this value is true, the method takes longer to execute, but results in a
            more efficient order of UnorderedSprites which results in a faster render.</param>
        </member>
        <member name="P:FlatRedBall.SpriteManager.Cameras">
            <summary>
            Gets the list of cameras.
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.AutoIncrementParticleCountValue">
            <summary>
            When not set to 0 and the number of particles on screen exceed what is available, then
            the MaxParticleCount will be incremented by this amount.  Otherwise, it will throw
            an out of particles exception.
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.SpriteFrames">
            <summary>
            Read-only collection of SpriteFrames managed by the SpriteManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.OrderedSortType">
            <summary>
            Gets and sets the sorting type used on Sprites, Text objects, and DrawableBatches
            in the world (not on layers).
            </summary>
        </member>
        <member name="P:FlatRedBall.SpriteManager.inRenderLoop">
            <summary>
            Determines whether the SpriteManager is currently rendering.
            </summary>
            <remarks>
            This is set to true when the BeginDrawing method is called and the device is not lost, and set to
            false after the EndDrawing method is called.  If this is true, the D3DDevice can be used to draw
            on the screen with various DirectX calls.
            </remarks>
        </member>
        <member name="P:FlatRedBall.SpriteManager.lostDevice">
            <summary>
            Reports whether a device is lost.
            </summary>
            <remarks>
            This variable is automatically set by the SpriteManager in its BeginDrawing, Draw, and EndDrawing methods.
            This value is also looked at by the TextManager and GuiManager for rendering.  When writing custom rendering code,
            this value should always be checked, and if it is true, then rendering should not occur during the current frame.  The
            SpriteManager will automatically try to reaquire the D3D Device in the BeginDrawing if it is lost unless the exiting value
            is true.
            <seealso cref="F:FlatRedBall.SpriteManager.Exiting"/>
            <seealso cref="M:FlatRedBall.SpriteManager.BeginDrawing(System.Drawing.Color)"/>
            </remarks>
        </member>
        <member name="T:FlatRedBall.SpriteManagerSettings">
            <summary>
            Summary description for SpriteManagerSettings.
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.animateUnorderedSprites">
            <summary>
            Whether the SpriteManager should animate Unordered Sprites.
            </summary>
            <remarks>
            Setting to false can give a slight performance increase if there are a large number of Unordered Sprites.
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.callCustomFunctionsUnorderedSprites">
            <summary>
            Whether the SpriteManager should call customFunctions on Unordered Sprites.
            </summary>
            <remarks>
            Setting to false can give a slight performance increase if there is a large number of Unordered Sprites.
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.executeTimedActivityUnorderedSprites">
            <summary>
            Whether the SpriteManager should perform TimedActivity and attachment logic on Unordered Sprites.
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.executeInstructionsUnorderedSprites">
            <summary>
            Whether the SpriteManager should execute instructions on Unordered Sprites
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.fullScreen">
            <summary>
            Whether the application should run in full screen mode.
            </summary>
            <remarks>
            <para>By default, the FRB Template will create a window that occupies the entire desktop; however, this is not
            a full screen application in that it does not control the desktop settings and does not receive full screen
            performance increases.</para>
            <para>
            Caution: Running an application in full screen can force a manual restart if the IDE attempts to
            obtain focus when execution is frozen.  The full screen will not allow Windows to regain control
            of the desktop, so this mode should only be run when not debugging or on a multi-monitor system.
            </para>
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.filtering">
            <summary>
            Whether filtering should be used when loading and displaying Sprites.
            </summary>
            <remarks>
            Filtering reduces the pixellated look of Sprites when they are larger on the screen
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.maxNumOfParticles">
            <summary>
            The maximum number of particles that can exist at one time.
            </summary>
            <remarks>
            If this number is exceeded, the SpriteManager will return a null reference when calling AddParticle.
            <seealso cref="M:FlatRedBall.SpriteManager.AddParticleSprite(FlatRedBall.Texture2D)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.ThousandUnorderedSprites">
             <summary>
             The number of 1,000 Sprite groups to create.
             </summary>
            <remarks>
            Specifies the maximun number of UnorderedSprites that can exist at one time.</remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.ThousandDynamicSprites">
            <summary>
            [Undocumented] Maximum number (in thousands) of Dynamic Sprites
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.screenHeight">
            <summary>
            The pixel height of the displayable area.
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.screenWidth">
            <summary>
            The pixel width of the displayable area.
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.vSync">
            <summary>
            Whether the display rate is tied to the monitor's refresh rate.
            </summary>
            <remarks>
            <para>Turing on vSync helps animation and scrolling look smoother.</para>
            
            If vSync is true, the game's frame rate will be capped at the monitor's
            refresh rate, but can drop below.  The frame rate will be set in such a way
            that the refresh rate of the monitor will always be a whole multiple of the
            frame rate.  For example, if a monitor's refresh rate is set to 75 hz and the
            game cannot run at 75 frames per second (fps), the fps will be reduced to
            37.5.  This is not a constant reduction.  Depending on the application, the
            actual frame rate may bounce between values.</remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.autoUpdateUnordered">
            <summary>
            Whether Unordered Sprites should automatically be updated every frame.
            </summary>
            <remarks>
            Setting this to false can improve Unordered Sprite performance, but
            Unordered Sprites must be explicitly updated for changes to appear.
            <seealso cref="M:FlatRedBall.SpriteManager.UpdateUnordered(System.Boolean)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.ThousandCameraDynamicSprites">
            <summary>
            Maximun number (in thousands) of DynamicSprites per camera layer
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.FixedFunction">
            <summary>
            Whether the Rendering will be performed using fixed function.  Currently, shaders are not supported.
            </summary>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.PixelDepthFormat">
            <summary>
            The format of each pixel used for display.
            </summary>
            <remarks>
            Common 16 bit format is Microsoft.DirectX.Direct3D.Format.R5G6B5.
            Common 32 bit format is Microsoft.DirectX.Direct3D.Format.A8R8G8B8.
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.D3DDeviceType">
            <summary>
            The device type to use when creating the device.
            </summary>
            <remarks>
            The device type is Hardware by default and should only be changed if required
            features are not functioning properly.
            </remarks>
        </member>
        <member name="F:FlatRedBall.SpriteManagerSettings.UseFade">
            <summary>
            Whether the SpriteManager should consider Sprite.Fade when rendering Sprites.
            </summary>
            <remarks>
            Older graphics cards may not support Fade, so this may need to be turned off if
            on older computers.
            </remarks>
        </member>
        <member name="T:FlatRedBall.TextureState">
            <summary>
            Useful struct for storing color and transparency information.
            </summary>
            <remarks>
            This struct is used in the DynamicSprite class to give each vertex independent colors
            and transparencies.
            </remarks>
        </member>
        <member name="M:FlatRedBall.TextureState.Initialize">
            <summary>
            Sets all values to 0.
            </summary>
        </member>
        <member name="M:FlatRedBall.TextureState.TimedActivity(System.Double)">
            <summary>
            Changes fade and tint according to the respective rate variables.
            </summary>
            <param name="secondDifference">The number of seconds passed last frame.</param>
        </member>
        <member name="P:FlatRedBall.TextureState.fade">
            <summary>
            Represents the transparency
            </summary>
            <remarks>
            Represents an object's transparency.   A completely transparent object has a 
            fade of 255, while a completely opaque object has a fade of 0.
            
            Setting the fadeRate of a completely opaque Object to 255 will 
            make the sprite disappear in one second.  The fade variable
            will automatically regulate itself if the value is set to something outside of the
            0 - 255 range.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Texture2D">
            <summary>
            A graphical element that represents the visual portion of a Sprite.
            </summary>
            <remarks>
            An Texture2D in FlatRedBall MDX is 
            essentially a wrapper around a DirectX 
            Texture.  Textures are referenced by a variety
            of FlatRedBall objects including Sprites and PositionedModels.
            
            Textures are graphics, that comes from physical files or from embedded 
            resources in your project.   Textures themselves are rarely built procedurally 
            (although they can be).  Instead, they are primarily created via FlatRedBallServices 
            or other managers which call FlatRedBallServices.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Texture2D.Width">
            <summary>
            The number of pixels in the X direction the texture is.
            </summary>
            <remarks>
            This is the width of an image.
            This field is rarely set manually, the methods in the 
            </remarks>
        </member>
        <member name="F:FlatRedBall.Texture2D.Height">
            <summary>
            The number of pixels in the Y direction the texture is.
            </summary>
            <remarks>
            This is the height of an image.
            This field is rarely set manually.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Texture2D.Name">
            <summary>
            The name of the file on the physical disk or embedded resource.
            </summary>
            <remarks>
            This field is used by the TextureManager to keep track of texture caching.  This is the unique
            ID of the Texture2D.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Texture2D.texture">
            <summary>
            The underlying DirectX Texture object
            </summary>
        </member>
        <member name="T:FlatRedBall.TimeManager">
            <summary>
            Class with static methods responsibel for timing in the FRB engine.
            </summary>
            <remarks>
            As all methods are static for scope reasons, the TimeManager should not be instantiated.
            The TimeManager is initialized in the FRB Template in the constructor of the form with the
            rest of the engine.  The Update method is usually called once per frame at the beginning of the frame -
            although it can be called more frequently to discard the previous secondDifference if a particular
            frame has taken too long.  This is generally done after scenes are loaded so that the 
            movement of the first frame does not reference a large secondDifference.
            
            <para>
            The TimeManager is also useful for profiling code and can accurately report time differences
            with high precision.
            </para>
            </remarks>
        </member>
        <member name="F:FlatRedBall.TimeManager.mCurrentTime">
            <summary>
            The amount of time in seconds that has passed since the application has started.
            </summary>
            <remarks>
            This value is cached every frame to prevent calculations from being performed every
            time the user uses the CurrentTime property.  This works with the mTickExecutionStarted
            value.
            </remarks>
        </member>
        <member name="F:FlatRedBall.TimeManager.mTickExecutionStarted">
            <summary>
            Marks the tick when the application started.
            </summary>
            <remarks>
            Starts at a negative value to mark that this value
            hasn't been updated yet.
            </remarks>
        </member>
        <member name="M:FlatRedBall.TimeManager.CurrentTimeAfterXSeconds(System.Double)">
            <summary>
            The system tick after xSeconds have passed.  Useful for marking time in the future for things like FrbInstructions.
            </summary>
            <param name="xSeconds">The number of seconds to look forward.</param>
            <returns>The system tick after xSeconds have passed.</returns>
        </member>
        <member name="M:FlatRedBall.TimeManager.ReportFPS">
            <summary>
            Reports the average frames per second since TimeManager.StartFPSRecording was called.  
            </summary>
            <remarks>
            TimeManager.StartFPSRecording must be called at least once for accurate frames per second reporting.
            <seealso cref="M:FlatRedBall.TimeManager.StartFPSRecording"/></remarks>
            <returns>The average frames per second.</returns>
        </member>
        <member name="M:FlatRedBall.TimeManager.GetTimedSections">
            <summary>
            Returns a report of all timed sections since the last time Update was called.
            </summary>
            <remarks>
            Timed sections can report the amount of time passed since either the last time Update
            or TimeSection was called.
            <seealso cref="M:FlatRedBall.TimeManager.TimeSection"/>
            </remarks>
            <returns>A string reporting the timed sections.</returns>
        </member>
        <member name="M:FlatRedBall.TimeManager.GetSystemTick">
            <summary>
            Returns the actual current tick
            </summary>
            <remarks>
            This asks the system for the current tick.  It does not update the currentTick property, and actually queries the performance
            counter.  This method is usually only used to time within-frame periods.
            </remarks>
        </member>
        <member name="M:FlatRedBall.TimeManager.GetSystemSecondsSince(System.Double)">
            <summary>
            Returns the system time since the passed System Time
            </summary>
            <remarks>
            This asks the system for the current tick.  This does not update the currentTick property, and actually queries the performance
            counter.  This method is usually only used to time within-frame periods.
            </remarks>
        </member>
        <member name="M:FlatRedBall.TimeManager.StartFPSRecording">
            <summary>
            Resets variables used to time frames per second. This must be called at least once for accurate frames per second reporting.
            <seealso cref="M:FlatRedBall.TimeManager.ReportFPS"/>
            </summary>
        </member>
        <member name="M:FlatRedBall.TimeManager.TimeSection">
            <summary>
            Stores an unnamed timed section.
            </summary>
            <remarks>
            A timed section is the amount of time (in seconds) since the last time either Update
            or TimeSection has been called.  The sections are reset every time Update is called.
            The sections can be retrieved through the GetTimedSections method.
            <seealso cref="M:FlatRedBall.TimeManager.GetTimedSections"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.TimeManager.TimeSection(System.String)">
            <summary>
            Stores an named timed section.
            </summary>
            <remarks>
            A timed section is the amount of time (in seconds) since the last time either Update
            or TimeSection has been called.  The sections are reset every time Update is called.
            The sections can be retrieved through the GetTimedSections method.
            <seealso cref="M:FlatRedBall.TimeManager.GetTimedSections"/>
            </remarks>
            <param name="label">The label for the timed section.</param>
        </member>
        <member name="M:FlatRedBall.TimeManager.Update">
            <summary>
            Marks the end of a timed period and begins a new one.
            </summary>
            <remarks>
            <para>
            If using the FRB Template, this method is automatically called once at the beginning of every frame in the
            GameMain.cs file.  This method updates the tickDifference, currentTick, and secondDifference properties, as well as 
            increments the frame count used when timing the frames per second.  The
            currentTick is retrieved once from the system when the Update method is called, and remains the same until the
            next time Update is called.  Therefore, if Update is not called for a long period of time, currentTick will remain
            the same.  This both improves performance, as the system is not constantly queried for the current tick, and it allows for
            things in the same frame to occur at the same time, although different parts of the frame are executed at different "real" times.
            </para>
            <para>
            The tickDifference and secondDifference measure the number of ticks and seconds since the last Update call.  If the
            default one call per frame is left in tact, then the secondDifference reports the amount of time the last frame took, and is
            useful for time-dependent movement.
            </para>
            <para>
            The Update method can also be called to reset or clear out the amount of time that occured since last frame.  For example,
            if a level is loaded, the time required to access slower memory to retrieve graphical and level data may take considerable time.
            If things are moving during this load time, the user will experience a large jump once the level is finished loading.  Therefore,
            it can be useful to call Update after events like loading from the hard drive which can cause a slowdown in the game.
            Although this solution will "freeze" time based movement during the load, instruction time will continue to advance.  
            </para>
            When timing frames per second, the TimeManager assumes that Update is called once per frame.  Calling Update more frequently
            than once per frame will increase the frame count and inflate the frames per second value returned by TimeManager.ReportFPS().
            <para>
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.TimeManager.tickDifference">
            <summary>
            The number of ticks passed between the last two TimeManager.Update calls.
            <seealso cref="M:FlatRedBall.TimeManager.Update"/>
            </summary>
        </member>
        <member name="P:FlatRedBall.TimeManager.SecondDifference">
            <summary>
            The number of seconds passed between the last two TimeManager.Update calls.
            <seealso cref="M:FlatRedBall.TimeManager.Update"/>
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.VertexPositionColorTexture">
            <summary>
            Summary description for CustomVertex.
            </summary>
        </member>
        <member name="T:FlatRedBall.AI.Pathfinding.Link">
            <summary>
            Represents a one-way const-including path to a PositionedNode.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.Link.#ctor(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single)">
            <summary>
            Creates a new Link.
            </summary>
            <param name="nodeLinkingTo">The node to link to.</param>
            <param name="cost">The cost to travel the link.</param>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.Link.Cost">
            <summary>
            The cost to travel the link.
            </summary>
            <remarks>
            This is by default the distance to travel; however it can manually
            be changed to be any value to reflect different terrain, altitude, or other
            travelling costs.
            </remarks>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.Link.NodeLinkingTo">
            <summary>
            The destination PositionedNode.  The starting PositionedNode is not stored by the Link instance.
            </summary>
        </member>
        <member name="T:FlatRedBall.AI.Pathfinding.NodeNetwork">
            <summary>
            Stores a collection of PositionedNodes and provides common functionality for
            pathfinding logic.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.#ctor">
            <summary>
            Creates an empty NodeNetwork.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.AddNode">
            <summary>
            Creates a new PositionedNode and adds it to the NodeNetwork.
            </summary>
            <returns>The newly-created PositionedNode.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.AddNode(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Adds an already-created PositionedNode to the NodeNetwork.
            </summary>
            <remarks>
            Will not add the PositionedNode if it is already part of the NodeNetwork
            </remarks>
            <param name="nodeToAdd">The PositionedNode to add.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.FindByName(System.String)">
            <summary>
            Finds a PositionedNode by the argument nameofNode.
            </summary>
            <param name="nameOfNode">The name of the PositionedNode to search for.</param>
            <returns>The PositionedNode with the matching Name, or null if no PositionedNodes match.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetClosestNodeTo(Microsoft.DirectX.Vector3@)">
            <summary>
            Returns the PositionedNode that's the closest to the argument position.
            </summary>
            <param name="position">The point to find the closest PositionedNode to.</param>
            <returns>The PositionedNode that is the closest to the argument position.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetVisibleNodeRadius(FlatRedBall.Camera,System.Int32)">
            <summary>
            Returns the radius of the PositionedNode visible representation Polygons.
            </summary>
            <remarks>
            The size of the PositionedNode visible representation Polygons depends on the
            camera's Z position - as the Camera moves further away, the Polygons are drawn larger.
            If the Camera is viewing down the Z axis then changing the Z will not affect the visible
            size of the PositionedNode visible representation.
            </remarks>
            <param name="camera">The camera to use when calculating the size.</param>
            <param name="nodeIndex">The index of the PositionedNode in the NodeNetwork.  Since nodes can be in 
            3D space the individual PositionedNode is required.</param>
            <returns>The radius of the node.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPath(FlatRedBall.AI.Pathfinding.PositionedNode,FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start PositionedNode to the end PositionedNode.
            </summary>
            <remarks>
            If start and end are the same node then the List returned will contain that node.
            </remarks>
            <param name="start">The PositionedNode to begin the path at.</param>
            <param name="end">The destination PositionedNode.</param>
            <returns>The list of nodes to travel through to reach the end PositionedNode from the start PositionedNode.  The
            start and end nodes are included in the returned List.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPath(Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start Vector3 to the end Vector3.
            </summary>
            <remarks>
            This method finds the closest nodes to each of the arguments, then calls the overload for GetPath which takes
            PositionedNode arguments.
            </remarks>
            <param name="startPoint">The world-coordinate start position.</param>
            <param name="endPoint">The world-coordinate end position.</param>
            <returns>The list of nodes to travel through to reach the closest PositionedNode to the endPoint from the closest
            PositionedNode to the startPoint.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPathOrClosest(FlatRedBall.AI.Pathfinding.PositionedNode,FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start PositionedNode to the end PositionedNode, or the node closest to the end node which is linked through the network to the start PositionedNode.
            </summary>
            <remarks>
            If start and end are the same node then the List returned will contain that node.
            </remarks>
            <param name="start">The PositionedNode to begin the path at.</param>
            <param name="end">The optimal destination PositionedNode.</param>
            <returns>The list of nodes to travel through to reach the end PositionedNode, or the node closest to the PositionedNode which is connected to the start PositionedNode, from the start PositionedNode.  The
            start and end nodes are included in the returned List.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetPathOrClosest(Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Returns the List of PositionedNodes which make the path from the start Vector3 to the end Vector3, or to the node closest to the end Vector3 available if the end node is not linked in some way to the start node. 
            </summary>
            <remarks>
            This method finds the closest nodes to each of the arguments, then calls the overload for GetPathOrClosest which takes
            PositionedNode arguments.
            </remarks>
            <param name="startPoint">The world-coordinate start position.</param>
            <param name="endPoint">The world-coordinate end position.</param>
            <returns>The list of nodes to travel through to reach the closest PositionedNode which is linked to the closest PositionedNode to the startPoint.
            </returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetCollisionOptimizedPath(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Returns a List of Vector3s that will be an optimized version of GetPath given the NodeNetwork and a Collision Map to test against.
            </summary>
            <remarks>
            This method will get the optimal path between the two vectors using GetPath, and then will optimize it by
            testing line of sight between the nodes to see if the path can be optimized further (for more optimized
            pathfinding). When optimizing the path between two nodes, it will check if the midpoint is in line of sight with the
            startingPosition, and if it is, change the path to the midpoint instead of the current target node. the numberOfOptimizations
            decides how many times it will take the midpoint and optimize further.
            
            This method assumes that the node network does NOT fall within collidable objects.
            </remarks>
            <param name="startingPosition">The world-coordinate of the starting position.</param>
            <param name="destination">The world-coordinate of the destination.</param>
            <param name="collisionMap">The collision map which will have the obstacles you are trying to path around.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.GetCollisionOptimizedPath(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32,System.Int32,System.Single,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Returns a List of Vector3s that will be an optimized version of GetPath given the NodeNetwork and a Collision Map to test against.
            </summary>
            <remarks>
            This method will get the optimal path between the two vectors using GetPath, and then will optimize it by
            testing line of sight between the nodes to see if the path can be optimized further (for more optimized
            pathfinding). When optimizing the path between two nodes, it will check if the midpoint is in line of sight with the
            startingPosition, and if it is, change the path to the midpoint instead of the current target node. the numberOfOptimizations
            decides how many times it will take the midpoint and optimize further.
            </remarks>
            <param name="startingPosition">The world-coordinate of the starting position.</param>
            <param name="destination">The world-coordinate of the destination.</param>
            <param name="numberOfOptimizations">The number of times the algorithm will take the midpoint between
            two nodes to test if they are within line of sight of each other (higher means nearer to optimal path).</param>
            <param name="collisionThreshold">Usually the object using the path will be larger than 0, use the size of the collision for testing line of sight.</param>
            <param name="collisionMap">The collision map which will have the obstacles you are trying to path around.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.Remove(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Removes the argument PositionedNode from the NodeNetwork.  Also destroys any links
            pointing to the argument PositionedNode.
            </summary>
            <param name="nodeToRemove">The PositionedNode to remove.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.Remove(FlatRedBall.AI.Pathfinding.PositionedNode,System.Boolean)">
            <summary>
            Removes the argument PositionedNode from the NodeNetwork.  Also destroys any links
            pointing to the argument PositionedNode.
            </summary>
            <param name="nodeToRemove">The PositionedNode to remove from the network.</param>
            <param name="scanAndRemoveOneWayReferences">Scans the entire network and removes all links to this node. Used when not all link relationships are two way.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.NodeNetwork.UpdateShapes">
            <summary>
            Updates the visible representation of the NodeNetwork.  This is only needed to be called if the NodeNetwork
            is visible and if any contained PositionedNodes or Links have changed.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.Nodes">
            <summary>
            All nodes in this NodeNetwork.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.NodeVisibleRepresentation">
            <summary>
            The polygons used to represent PositionedNodes.  This is populated and managed by the
            NodeNetwork if Visible is set to true.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.NodeColor">
            <summary>
            The Color that Node polygons should use when Visible is true;
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.NodeNetwork.Visible">
            <summary>
            Controls the visibility of the NodeNetwork.  This is usually only set to 
            true for debugging and testing purposes.  
            </summary>
            <remarks>
            Setting this value to true creates Polygons and Lines to represent the
            NodeNetwork.  Setting it back to false destroys all objects used for visible
            representation.
            </remarks>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.IsInLineOfSight(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Tests if two vector positions are within line of sight given a collision map.
            </summary>
            <param name="position1">The first world-coordinate position.</param>
            <param name="position2">The second world-coordinate position.</param>
            <param name="collisionMap">The list of polygons used to test if the two positions are within line of sight.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.IsInLineOfSight(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Tests if two vector positions are within line of sight given a collision map.
            </summary>
            <param name="position1">The first world-coordinate position.</param>
            <param name="position2">The second world-coordinate position.</param>
            <param name="collisionThreshold">Distance from position2 to the polygon it's colliding against.
            If a polygon is within this threshold, this will return false.</param>
            <param name="collisionMap">The list of polygons used to test if the two positions are within line of sight.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.Midpoint(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Returns the midpoint between two Vector3s.
            </summary>
            <param name="position1">The first position.</param>
            <param name="position2">The connecting position.</param>
            <returns>The midpoint between the two positions.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PathfindingFunctions.OptimalVisiblePoint(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32,System.Single,FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Polygon})">
            <summary>
            Calculates the closest visible point to outOfSightPosition given the currentPosition.
            </summary>
            <param name="currentPosition">The position with which to test Line Of Sight</param>
            <param name="inSightPosition">The connector to the outOfSightPosition with which to find midpoint optimizations.</param>
            <param name="outOfSightPosition">The guide to find the optimal in sight position.</param>
            <param name="numberOfOptimizations">The number of times we will midpoint optimize, higher means closer to optimal.</param>
            <param name="collisionThreshold">Usually the object using the path will be larger than 0, use the size of the collision for testing line of sight.</param>
            <param name="collisionMap">Polygon list which we will use for collision (without it, everything is straight line of sight).</param>
            <returns></returns>
        </member>
        <member name="T:FlatRedBall.AI.Pathfinding.PositionedNode">
            <summary>
            An object which has position properties 
            </summary>
        </member>
        <member name="F:FlatRedBall.AI.Pathfinding.PositionedNode.mParentNode">
            <summary>
            The node that links to this node.  This is reset every time the 
            containing NodeNetwork searches for a path.
            </summary>
        </member>
        <member name="F:FlatRedBall.AI.Pathfinding.PositionedNode.mCostToGetHere">
            <summary>
            The cost to get to this node from the start node.  This variable is
            set when the containing NodeNetwork searches for a path.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.#ctor">
            <summary>
            Creates a new PositionedNode.
            </summary>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.BreakLinkBetween(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Disconnects all Links between this and the argument node.
            </summary>
            <param name="node">The PositionedNode to break links between.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.IsLinkedTo(FlatRedBall.AI.Pathfinding.PositionedNode)">
            <summary>
            Returns whether this has a Link to the argument PositionedNode.
            </summary>
            <remarks>
            If this does not link to the argument PositionedNode, but the argument
            links back to this, the method will return false.  It only checks links one-way.
            </remarks>
            <param name="node">The argument to test linking.</param>
            <returns>Whether this PositionedNode links to the argument node.</returns>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.LinkTo(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single)">
            <summary>
            Creates Links from this to the argument nodeToLinkTo, and another Link from the
            argument nodeToLinkTo back to this.
            </summary>
            <remarks>
            If either this or the argument nodeToLinkTo already contains a link to the other 
            PositionedNode, then the cost of the link is set to the argument costTo.
            </remarks>
            <param name="nodeToLinkTo">The other PositionedNode to create Links between.</param>
            <param name="costTo">The cost to travel between this and the argument nodeToLinkTo.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.LinkTo(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single,System.Single)">
            <summary>
            Creates Links from this to the argument nodeToLinkTo, and another Link from the
            argument nodeToLinkTo back to this.
            </summary>
            <remarks>
            If either this or the argument nodeToLinkTo already contains a link to the other 
            PositionedNode, then the cost of the link is set to the argument costTo or costFrom as appropriate.
            </remarks>
            <param name="nodeToLinkTo">The other PositionedNode to create the Links between.</param>
            <param name="costTo">The cost to travel from this to the argument nodeToLinkTo.</param>
            <param name="costFrom">The cost to travel from the nodeToLinkTo back to this.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.LinkToOneWay(FlatRedBall.AI.Pathfinding.PositionedNode,System.Single)">
            <summary>
            Creates a link from this PositionedNode to the argument nodeToLinkTo.  Links
            on the argument nodeToLinkTo are not modified.
            </summary>
            <remarks>
            If this already links to the arugment nodeToLinkTo, the cost is set to the argument
            costTo.
            </remarks>
            <param name="nodeToLinkTo">The PositionedNode to create a link to.</param>
            <param name="costTo">The cost to travel from this to the argument nodeToLinkTo.</param>
        </member>
        <member name="M:FlatRedBall.AI.Pathfinding.PositionedNode.ToString">
            <summary>
            Returns the string representation of this.
            </summary>
            <returns>The string representation of this.</returns>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.CostToGetHere">
            <summary>
            Returns the cost to get to this node from the start node.  This
            value is only accurate if the node is contained in list returned
            by the last call to NodeNetwork.GetPath.
            </summary>
            <remarks>
            This value is reset anytime GetPath is called on the containing NodeNetwork.
            </remarks>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Name">
            <summary>
            The Node's name.  Mainly used for saving NodeNetworks since saved Links reference
            PositionedNodes by name.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.X">
            <summary>
            The X position of the PositionedNode.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Y">
            <summary>
            The Y position of the PositionedNode.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Z">
            <summary>
            The Z position of the PositionedNode.
            </summary>
        </member>
        <member name="P:FlatRedBall.AI.Pathfinding.PositionedNode.Links">
            <summary>
            The links belonging to this PositionedNode.
            </summary>
            <remarks>
            This is a list of Links which reference the PositionedNodes that this links to.
            Links are one-way and PositionedNodes that this links to do not necessarily contain
            Links back to this.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Attributes.ExternalInstance">
            <summary>
            Defines a member as an external instance.  Members which are external instances
            are not read by ContentReaders.  Rather they're set by ExternalInstances of referenced
            content such as Texture2Ds.
            </summary>
        </member>
        <member name="T:FlatRedBall.Attributes.ExternalInstanceList">
            <summary>
            Attribute marking a member in a save class as an external instance.  That is, it should
            be treated as external content by the ObjectReaders and ObjectWriters in the FlatRedBall
            content pipeline.
            </summary>
        </member>
        <member name="T:FlatRedBall.Attributes.InstanceListMember">
            <summary>
            Used internally by the engine to determine the order of 
            reading and writing for instances.
            </summary>
        </member>
        <member name="T:FlatRedBall.Attributes.InstanceMember">
            <summary>
            Matches the marked member with the member to set when this instance is loaded through
            the content pipeline.  This attribute is usually applied to ExternalReference objects.
            </summary>
        </member>
        <member name="T:FlatRedBall.CodeGeneration.SaveClassOptions">
            <summary>
            A class containing options used when programatically generating a "Save" class.
            </summary>
            <remarks>
            <seealso cref="T:FlatRedBall.CodeGeneration.SaveClassCodeGenerator"/>
            </remarks>
        </member>
        <member name="T:FlatRedBall.Content.AI.Pathfinding.LinkSave">
            <summary>
            An XML-Serializable object representing the state of a Link.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.AI.Pathfinding.PositionedNodeSave">
            <summary>
            Save class for the PositionedNode class.  This class is used in the
            .nntx (Node Network XML) file type.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.AnimationChain.AnimationChainListSaveBase`1">
            <summary>
            Base class for AnimationChainListSave and AnimationChainListSaveContent.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.AnimationChain.AnimationChainListSave.FromAnimationChainList(FlatRedBall.Graphics.Animation.AnimationChainList)">
            <summary>
            Create a "save" object from a regular animation chain list
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.AnimationChain.AnimationChainSaveBase`1">
            <summary>
            The base class for AnimationChainSave and AnimationChainSaveContent.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationChainSaveBase`1.ParentFile">
            <summary>
            This is used if the AnimationChain actually comes from 
            a file like a .gif.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase">
            <summary>
            The base class for AnimationFrameSave and AnimationFrameSaveContent.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.FlipHorizontal">
            <summary>
            Whether the texture should be flipped horizontally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.FlipVertical">
            <summary>
            Whether the texture should be flipped on the vertidally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.TextureName">
            <summary>
            Used in XML Serialization of AnimationChains - this should
            not explicitly be set by the user.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.FrameLength">
            <summary>
            The amount of time in seconds the AnimationFrame should be shown for.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.LeftCoordinate">
            <summary>
            The left coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.RightCoordinate">
            <summary>
            The right coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.TopCoordinate">
            <summary>
            The top coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.BottomCoordinate">
            <summary>
            The bottom coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.RelativeX">
            <summary>
            The relative X position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.AnimationChain.AnimationFrameSaveBase.RelativeY">
            <summary>
            The relative Y position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.ContentManager.RemoveDisposable(System.IDisposable)">
            <summary>
            Removes an IDisposable from the ContentManager.  This method does not call Dispose on the argument Disposable.  It 
            must be disposed 
            </summary>
            <param name="disposable">The IDisposable to be removed</param>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.AnimationSequenceSave">
            <summary>
            Save class which stores AnimationSequence information.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.InstructionBlueprintListSave">
            <summary>
            A save class containing a list of InstructionSaves.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Instructions.InstructionSetSave.mFileName">
            <summary>
            The file that this InstructionSetSave was deserialized from.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.InstructionSetSaveList">
            <summary>
            An XML serializable list of InstructionSetSaves.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.KeyframeSave">
            <summary>
            Save class for a Keyframe (A list of Instructions).
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Instructions.TimedKeyframeListSave">
            <summary>
            A savable reference to a TimedKeyframe.  This does not actually store the contents
            of the TimedKeyframe; instead it stores a string reference.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Math.Splines.SplineSave">
            <summary>
            A savable representation of a Spline.  This is used in SplineSaveLists.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Math.Splines.SplineSaveList">
            <summary>
            Save class for lists of Splines. 
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Model.ModelMeshSave">
            <summary>
            Save class for information about ModelMeshes. This contains a list of ModelMeshPartSaves.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.EmissionSettingsSave">
            <summary>
            Save class for the EmissionSettings class.  This class is used
            in the .emix (Emitter XML) file.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Particle.EmitterSaveBase`1">
            <summary>
            Base class for EmitterSave and EmitterSaveContent.
            </summary>
            <typeparam name="T">The type for the ParticleBlueprint.  This should be or inherit SpriteSaveBase.</typeparam>
        </member>
        <member name="T:FlatRedBall.Content.Saves.BitmapFontSave">
            <summary>
            Save class storing information for a BitmapFont.  
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Saves.TextSave">
            <summary>
            An XML Serializable class representing the state of a Text.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Saves.TextSaveBase">
            <summary>
            Base class for TextSave and TextSaveContent.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.Scene.CameraSave">
            <summary>
            An XML serializable "Save" class which can be included in other Save classes to store Camera information.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.X">
            <summary>
            The absolute X position.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.Y">
            <summary>
            The absolute Y position.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.Z">
            <summary>
            The absolute Z position.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.Orthogonal">
            <summary>
            Whether the Camera is using an orthogonal projection matrix.  If this is false, the Camera is using a perspective projection matrix.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.Scene.CameraSave.OrthogonalHeight">
            <summary>
            The orthogonal height of the camera's view.  
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.Scene.CameraSave.#ctor">
            <summary>
            Creates a new CameraSave.  This is used by the XmlSerializer when deserializing an XML.
            Usually CameraSaves are created using the FromCamera static method.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.Scene.CameraSave.FromCamera(FlatRedBall.Camera)">
            <summary>
            Creates a new CameraSave instance using members from the passed Camera argument.
            </summary>
            <param name="camera">The Camera to copy properties from.</param>
        </member>
        <member name="M:FlatRedBall.Content.Scene.CameraSave.SetCamera(FlatRedBall.Camera)">
            <summary>
            Sets the argument Camera's properties to the properties stored in this CameraSave.
            </summary>
            <remarks>
            Usually "Save" classes include a To[RuntimeType] method.  The CameraSave does not follow
            this pattern because it's most common that a CameraSave is loaded when a Camera is already
            created by the engine.  In this case, it's not very convenient to have to destroy the existing
            Camera and replace it by a new instance.  Instead, the SetCamera method will simply set the properties
            on an existing Camera
            </remarks>
            <param name="camera">The Camera to set the properties on.</param>
        </member>
        <member name="T:FlatRedBall.Content.SpriteEditorScene">
            <summary>
            This is the class that is serialized and deserialized to/from the XML file representing a scene.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SpriteEditorSceneBase`6.DynamicSpriteList">
            <summary>
            DynamicSpriteList for compatability with FlatRedBall Managed DirectX.
            </summary>
            <remarks>
            The DynamicSpriteList and SpriteList will be combined into one list later
            in the content pipeline.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Content.SpriteFrame.SpriteFrameSaveBase`1">
            <summary>
            Serves as the base class for SpriteFrameSave and SpriteFrameSaveContent.
            </summary>
            <typeparam name="T">The type of the ParentSprite.  This is generic because
            for SpriteFrameSave the generic type is SpriteSave, but for SpriteFrameSaveContent the
            generic type is SpriteSaveContent.</typeparam>
        </member>
        <member name="F:FlatRedBall.Content.SpriteFrame.SpriteFrameSaveBase`1.BorderSides">
            <summary>
            The BorderSides that this instance represents.
            </summary>
            <remarks>
            <seealso cref="T:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Content.SpriteFrame.SpriteFrameSaveBase`1.ParentSprite">
            <summary>
            The SpriteSaveBase that stores most of the Properties for the SpriteSave.
            </summary>
            <remarks>
            The SpriteSaveBase is used as a storage of properties because nearly all of its
            properties are also used by SpriteFrames.  Therefore, to prevent a lot of copy/paste,
            this class is used to store properties.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1">
            <summary>
            Base class for SpriteGridSave and SpriteGridSaveContent.
            </summary>
            <typeparam name="T">The type of the blueprint.</typeparam>
        </member>
        <member name="F:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1.Axis">
            <summary>
            Specifies the grid to use.
            </summary>
            <remarks>
            If the grid is 'y', use an XY grid.  Otherwise an XZ.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1.Name">
            <summary>
            The name of the SpriteGridSave.
            </summary>
        </member>
        <member name="F:FlatRedBall.Content.SpriteGrid.SpriteGridSaveBase`1.mFileName">
            <summary>
            This is used by the content pipeline to know which directory to look in
            for Textures.  Otherwise this variable is unused.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.#ctor">
            <summary>
            Constructs a new PoseChain.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.AddPose(FlatRedBall.ManagedSpriteGroups.Pose)">
            <summary>
            Appends the argument Pose to the PoseChain then sorts the contained Poses by time.
            </summary>
            <param name="poseToAdd">The pose to add</param>
            <returns>The index of the newly-added pose.</returns>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.GetPose(System.Int32)">
            <summary>
            [OBSOLETE] Gets the pose at the argument index.
            </summary>
            <param name="i">The index of the pose to get.</param>
            <returns>The pose at the argument index.</returns>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.IndexOf(FlatRedBall.ManagedSpriteGroups.Pose)">
            <summary>
            Returns the number of Poses in the current PoseChain.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.InsertPose(System.Int32,FlatRedBall.ManagedSpriteGroups.Pose)">
            <summary>
            Inserts a pose at the argument Index.
            </summary>
            <remarks>
            Unlike the Add method, this method does not sort the
            PoseChain after the addition.  However, if Add is called
            at a later time the PoseChain will be sorted.
            </remarks>
            <param name="index">The index where the pose should be inserted.</param>
            <param name="poseToInsert">The pose to insert.</param>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.RemovePose(FlatRedBall.ManagedSpriteGroups.Pose)">
            <summary>
            Removes the argument Pose from the PoseChain.
            </summary>
            <param name="poseToRemove">The pose to be removed.</param>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.Sort">
            <summary>
            Sorts the contained Poses by their time.
            </summary>
        </member>
        <member name="M:FlatRedBall.Content.SpriteRig.PoseChainSave.ToString">
            <summary>
            Returns information about the PoseChain.
            </summary>
            <returns>The string info about the argument PoseChain.</returns>
        </member>
        <member name="P:FlatRedBall.Content.SpriteRig.PoseChainSave.Item(System.Int32)">
            <summary>
            Provides indexer access to the contained Poses.
            </summary>
            <param name="index">The index of the Pose to get.</param>
            <returns>The pose at the specified index.</returns>
        </member>
        <member name="P:FlatRedBall.Content.SpriteRig.PoseChainSave.Count">
            <summary>
            Gets the number of Poses contained in the PoseChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Content.SpriteRig.PoseChainSave.Poses">
            <summary>
            Provides access to the contained Poses.
            </summary>
        </member>
        <member name="P:FlatRedBall.Content.SpriteRig.PoseChainSave.Name">
            <summary>
            The Name of the PoseChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.Content.SpriteRig.PoseChainSave.TimeAnimationStarted">
            <summary>
            The game time in systems when the Animation has been started.
            </summary>
        </member>
        <member name="P:FlatRedBall.Content.SpriteRig.PoseChainSave.TotalLength">
            <summary>
            Gets total length in seconds of the PoseChain.
            </summary>
        </member>
        <member name="T:FlatRedBall.Content.SpriteRig.SpriteRigSaveBase`1">
            <summary>
            Base class for SpriteRigSave and SpriteRigSaveContent.
            </summary>
            <typeparam name="T">The type of the Sprite.  Can be SpriteSave or SpriteSaveContent.</typeparam>
        </member>
        <member name="T:FlatRedBall.ServiceContainer">
            <summary>
            Container class implements the IServiceProvider interface. This is used
            to pass shared services between different components, for instance the
            ContentManager uses it to locate the IGraphicsDeviceService implementation.
            </summary>
        </member>
        <member name="F:FlatRedBall.FlatRedBallServices.mEncryptionKey">
            <remarks>
            This is *NOT* secure, keys in code can easily be obtained by disassembling the game.
            </remarks>
        </member>
        <member name="M:FlatRedBall.FlatRedBallServices.ReplaceFromFileTexture2D(FlatRedBall.Texture2D,FlatRedBall.Texture2D,System.String)">
            <summary>
            Attempts to replace the texture. Will only work if the texture is loaded from file.
            </summary>
            <param name="oldTexture">Reference to the old texture</param>
            <param name="newTexture">Reference to the new texture</param>
            <param name="contentManagerName">The name of the content manager containing the texture</param>
        </member>
        <member name="P:FlatRedBall.FlatRedBallServices.EncryptionSaltValue">
            <summary>
            Salt value that is combined with the EncryptionKey string for generating encryption keys
            </summary>
        </member>
        <member name="P:FlatRedBall.FlatRedBallServices.EncryptionKey">
            <summary>
            Password to use for decrypting files (set this to the appropriate value before attempting to load any CSV files that were encrypted in the content pipeline)
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.AnimationChainList">
            <summary>
            A list of AnimationChains.
            </summary>
            <remarks>
            This class is often used by IAnimationChainAnimatables to store a list of
            AnimationChains.  Since the AnimationChainList provides a string indexer, it
            is common to get a reference to an AnimationChain by its name and set it as the
            IAnimationChainAnimatable's current AnimationChain.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChainList.#ctor">
            <summary>
            Instantiates a new AnimationChainList.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationChainList.#ctor(System.Int32)">
            <summary>
            Instantiates a new AnimationChainList.
            </summary>
            <param name="capacity">Sets the initial capacity to reduce memory allocation when subsequently calling Add.</param>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.FileRelativeTextures">
            <summary>
            Gets and sets whether the AnimationChainList will save the 
            Texture2Ds that its AnimationFrames reference with names relative
            to the .achx.  Otherwise, this property is not used during runtime.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.TimeMeasurementUnit">
            <summary>
            Gets or sets the TimeMeasurementUnit.  This defaults to TimeMeasurementUnit.Millisecond and
            should not be changed.  It is included for compatability with older versions of FlatRedBall.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.Name">
            <summary>
            Gets and sets the intance's name.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Animation.AnimationChainList.Item(System.String)">
            <summary>
            Gets the AnimationChain by name.  Returns null if no AnimationChain is found.
            </summary>
            <param name="animationChainName">The name of the AnimationChain to return</param>
            <returns>Reference to the AnimationChain with the specified name.</returns> 
        </member>
        <member name="T:FlatRedBall.Graphics.Animation.AnimationFrame">
            <summary>
            Stores information about one frame in a texture-flipping animation.
            </summary>
            <remarks>
            Includes
            information about which Texture2D to show, whether the Texture2D should be flipped,
            the length of time to show the Texture2D for, texture coordinates (for sprite sheets), and
            relative positioning.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.Empty">
            <summary>
            Empty AnimationFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.Texture">
            <summary>
            The texture that the AnimationFrame will show.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.FlipHorizontal">
            <summary>
            Whether the texture should be flipped horizontally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.FlipVertical">
            <summary>
            Whether the texture should be flipped on the vertidally.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.TextureName">
            <summary>
            Used in XML Serialization of AnimationChains - this should
            not explicitly be set by the user.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.FrameLength">
            <summary>
            The amount of time in seconds the AnimationFrame should be shown for.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.LeftCoordinate">
            <summary>
            The left coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.RightCoordinate">
            <summary>
            The right coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.TopCoordinate">
            <summary>
            The top coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.BottomCoordinate">
            <summary>
            The bottom coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.RelativeX">
            <summary>
            The relative X position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Animation.AnimationFrame.RelativeY">
            <summary>
            The relative Y position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.#ctor">
            <summary>
            Creates a new AnimationFrame.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.#ctor(FlatRedBall.Texture2D,System.Single)">
            <summary>
            Creates a new AnimationFrame.
            </summary>
            <param name="texture">The Texture2D to use for this AnimationFrame.</param>
            <param name="frameLength">The amount of time in seconds that this AnimationFrame will display for when 
            it is used in an AnimationChain.</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.#ctor(System.String,System.Single,System.String)">
            <summary>
            Creates a new AnimationFrame.
            </summary>
            <param name="textureName">The string name of the Texture2D to use for this AnimationFrame.
            This will be loaded through the content pipeline using the arugment contentManagerName.</param>
            <param name="frameLength">The amount of time in seconds that this AnimationFrame will display for when
            it is used in an AnimationChain.</param>
            <param name="contentManagerName">The content manager name to use when loading the Texture2D .</param>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.Clone">
            <summary>
            Creates a new AnimationFrame with identical properties.  The new AnimationFrame
            will not belong to the AnimationChain that this AnimationFrameBelongs to unless manually
            added.
            </summary>
            <returns>The new AnimationFrame instance.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.Animation.AnimationFrame.ToString">
            <summary>
            Returns a string representation of this.
            </summary>
            <returns>String representation of this.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.BatchForwardVectorSorter.Compare(FlatRedBall.Graphics.IDrawableBatch,FlatRedBall.Graphics.IDrawableBatch)">
            <summary>
            Larger comes first.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>-1 if the first comes first, 1 if the second comes first, 0 if they're equal.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.IDrawableBatch.Draw(FlatRedBall.Camera)">
            <summary>
            Used to draw assets
            Batch is sorted by Z with sprites and text
            </summary>
            <param name="camera">The currently drawing camera</param>
        </member>
        <member name="M:FlatRedBall.Graphics.IDrawableBatch.Update">
            <summary>
            Used to update the drawable batch
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.IDrawableBatch.Destroy">
            <summary>
            Used to destroy any assets that need to be destroyed
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.X">
            <summary>
            The X value to use for sorting.  This does NOT affect the position
            of objects drawn by the DrawableBatch.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.Y">
            <summary>
            The Y value to use for sorting.  This does NOT affect the position
            of objects drawn by the DrawableBatch.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.Z">
            <summary>
            The Z value to use for sorting.  This does NOT affect the position
            of objects drawn by the DrawableBatch.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.IDrawableBatch.UpdateEveryFrame">
            <summary>
            Whether or not this batch should be updated
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.GraphicsOptions.ResetTextureFilter">
            <summary>
            Resets the texture filtering mode on the graphics device
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.GraphicsOptions.TextureFilter">
            <summary>
            Gets or sets the current texture filter
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.EmissionSettings">
            <summary>
            Defines the state of Sprites immediately after being created by the containing Emitter.
            </summary>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.EmissionSettings.VelocityRangeType">
            <summary>
            Sets the type of velocity to use.  This impacts which Velocity values are
            applied to emitted Sprites.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Component">
            <summary>
            Each individual component (X, Y, Z) had an independent range.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Radial">
            <summary>
            The X and Y components are set according to a random angle spanning a full circle and a radial velocity or rate value.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Spherical">
            <summary>
            The X,Y,and Z components are set according to a random point on a full sphere and a radial velocity or rate value.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Wedge">
            <summary>
            The X and Y components are set according to a random angle within wedge values using a radial velocity or rate value.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.RangeType.Cone">
            <summary>
            The X, Y, and Z components are set according to a random point on a 
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.Emitter">
            <summary>
            An emitter is an invisible object which can create one or more Sprites at a specific 
            rate or on a method call.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.mRemovalEvent">
            <summary>
            This is used only in the ParticleEditor.  
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.Particle.Emitter.Emit(FlatRedBall.SpriteList)">
            <summary>
            Emits particles as specified by the Emitter class
            </summary>
            <remarks>
            This method initiates one emission of particles.  The number of particles emitted
            depends on the numberPerEmission variable.  This method does not consider emission timing, and the time
            is not recorded for emission timing.  
            
            The argument SpriteList stores all Sprites which were emitted
            during the call.  The Sprites are added regularly, rather than in a one way relationship.  This enables
            modification of emitted particles after the method ends.  null can be passed as an argument
            if specific action is not needed for emitted particles.  Particles are automatically created
            through the SpriteManager as Particle Sprites.
            <seealso cref="M:FlatRedBall.Graphics.Particle.Emitter.TimedEmit"/>
            <seealso cref="M:FlatRedBall.SpriteManager.AddParticleSprite(FlatRedBall.Texture2D)"/>
            
            </remarks>
            <param name="spriteList">The list of Sprites (which can be null) to add all Sprites created
            by this call.</param>
        </member>
        <member name="P:FlatRedBall.Graphics.Particle.Emitter.SecondsLasting">
            <summary>
            Specifies the number of seconds that particles will remain on the screen and in memory.  This is only considered
            if the RemovalEvent is set to RemovalEventType.TIMED;
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.None">
            <summary>
            No removal event specified.
            </summary>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.OutOfScreen">
            <summary>
            Particles will be removed when out of the screen.
            </summary>
            <remarks>
            This uses the camera's IsSpriteInView method.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.Alpha0">
            <summary>
            Particles will be removed when Alpha is 0
            </summary>
            <remarks>
            Setting the Alpha to 0 manually on a particle created by an emitter with this removal event will
            also remove the Sprite.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Graphics.Particle.Emitter.RemovalEventType.Timed">
            <summary>
            Particles will be removed after a certain amount of time has passed after emission.  This value is set through the
            SecondsLasting property.
            </summary>
        </member>
        <member name="T:FlatRedBall.Graphics.Particle.EmitterList">
            <summary>
            List of Emitters provoding shortcut methods for interacting with all contained Emittes.
            </summary>
            <remarks>
            This is the runtime object created when loading .emix files.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Graphics.TextField">
            <summary>
            Summary description for TextField.
            </summary>
        </member>
        <member name="M:FlatRedBall.Graphics.TextManager.AddText(System.String,FlatRedBall.Camera)">
            <summary>
            Creates a new Text with the argument string which will only be drawn in the argument Camera's
            destination.
            </summary>
            <remarks>
            The new text will be stored both by the camera and the TextManager's managed invisible Texts array.
            The text is automatically attached to the argument Camera so to be moved, it must either
            be detached or moved with relative variables.
            </remarks>
            <param name="s">The string to show.</param>
            <param name="cameraToAddTo">The camera that the newly created Text belongs to.</param>
            <returns>Reference to the newly created Text.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.TextManager.AddText(FlatRedBall.Graphics.Text,FlatRedBall.Camera)">
            <summary>
            Adds an already-created Text instance to the argument camera.
            </summary>
            <remarks>
            The argument Text should not already be in the TextManager's memory when this
            method is called.
            </remarks>
            <param name="textToAdd">Reference to the text object to add.</param>
            <param name="cameraToAddTo">Reference to the camera to be added to.</param>
            <returns>The added text.</returns>
        </member>
        <member name="M:FlatRedBall.Graphics.TextManager.GetWidth(System.String)">
            <summary>
            Returns the width of the rendered text assuming the spacing is 1.
            </summary>
            <remarks>
            If there are newline characters in the string, GetWidth returns the width of the longest line.
            Spaces are considered characters as well so "Hello " will be longer than "Hello".
            </remarks>
            <param name="text">The text to measure.</param>
            <returns>The width of the longest line in the text.</returns>
        </member>
        <member name="T:FlatRedBall.Graphics.Texture.BitmapList">
            <summary>
            A list of Bitmaps which can be created from a loaded .gif.
            </summary>
            <remarks>
            This class can be created through the FlatRedBallServices.Load method.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Graphics.Texture.ImageData.RemoveRow(System.Int32)">
            <summary>
            Removes the index row from the contained data.  Row 0 is the top of the texture.
            </summary>
            <param name="rowToRemove">The index of the row to remove.  Index 0 is the top row.</param>
        </member>
        <member name="T:FlatRedBall.Gui.Button">
            <summary>
            A UI element which displays text and visually responds to pushes.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Button.mDrawBase">
            <summary>
            Whether the base (center and borders) are drawn
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Button.ButtonPushedState">
            <summary>
            Gets the current ButtonPushedState.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Button.DrawBase">
            <summary>
            Whether the Window draws its base and borders.  Setting to false will only draw the Window's texture.
            </summary>
            <remarks>
            Set this to false if the Button is used to draw a texture.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Button.Enabled">
            <summary>
            Gets and sets whether the Button can be interacted with.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.Button.FlipHorizontal">
            <summary>
            Gets and sets whether to horizontally flip the overlayed texture.
            </summary>
            <remarks>
            This property only affects the appearance of the Button if SetOverlayTexture is called to change the
            overlay texture.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Button.FlipVertical">
            <summary>
            Gets and sets whether to horizontally flip the overlayed texture.
            </summary>
            <remarks>
            This property only affects the appearance of the Button if SetOverlayTexture is called to change the
            overlay texture.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Button.HighlightOnDown">
            <summary>
            Gets and sets whether the button should draw itself lighter when pressed if it
            is referencing an overly texture.  Default value is true.
            </summary>
            <remarks>
            This property has no impact if the button is not referencing an overlay texture.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Button.Text">
            <summary>
            The string to display and the tool tip text to display when the cursor
            moves over the button.
            </summary>
            <remarks>
            This is only on the Button if the overlay texture is null.  The tool tip will show
            regardless of whether the button is showing a texture or not.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Button.UpOverlayTexture">
            <summary>
            The overlay texture the button is displaying.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.CollapseItem">
            <summary>
            Summary description for CollapseItem.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.CollapseItem.AddIcon(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Adds an icon to the CollapseItem
            </summary>
            <remarks>
            Do not use $ in the name of the icon as the Collapse list boxes use this character for 
            icons such as + and - boxes for expanding CollapseItems with children.
            </remarks>
            <param name="top"></param>
            <param name="bottom"></param>
            <param name="left"></param>
            <param name="right"></param>
            <param name="name"></param>
        </member>
        <member name="M:FlatRedBall.Gui.CollapseItem.Contains(System.Object)">
            <summary>
            Returns whether this or any children CollapseItems contain the argument object as their ReferenceObject.
            </summary>
            <param name="objectToSearchFor">The object to search for.</param>
            <returns>Whether this or any children CollapseItems reference the argument.</returns>
        </member>
        <member name="T:FlatRedBall.Gui.CollapseListBox">
            <summary>
            A List Box which can hold collapsable items.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.IInputReceiver">
            <summary>
            Interface for objects which can receive input from the InputManager.
            </summary>
            <remarks>
            
            This interface should only be used for Gui elements specifically because the GuiManager will change the InputManager.ReceivingInput
            reference depending on the activity of the cursor and other Gui elements.  The InputManager will only keep track of one IInputReceiver
            at a time, and each IInputReceiver needs to assign itself as the target for input through the static InputManager.ReceivingInput field.
            
            <para>Since this is only used for Gui elements, this interface is rarely used in games.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.OnFocusUpdate">
            <summary>
            Called by the InputManager automatically every frame.
            </summary>
            <remarks>
            The implementation of this method should raise the FocusUpdate event.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.OnGainFocus">
            <summary>
            Called by the engine automatically when an IInputReceiver gains focus.
            </summary>
            <remarks>
            The implementation of this method should raise the GainFocus event.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.LoseFocus">
            <summary>
            Called by the engine automatically when an IInputReceiver loses focus.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.IInputReceiver.ReceiveInput">
            <summary>
            The method called every frame by the InputManager in the Update method
            if this is the IInputReceiver referenced by the InputManager.  This does
            not have to be called automatically.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.IInputReceiver.TakingInput">
            <summary>
            A method which determines whether the instance can currently receive focus as an input receiver.
            </summary>
            <returns>Whether the instance is taking input.</returns>
        </member>
        <member name="P:FlatRedBall.Gui.IInputReceiver.NextInTabSequence">
            <summary>
            The next IInputReceiver in the tab sequence.  In other words, if this element is currently
            receiving input (is the InputManager's ReceivingInput), pressing tab will set the NextInTabSequence
            to be the InputManager's ReceivingInput.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IInputReceiver.GainFocus">
            <summary>
            Raised when the instance gains input focus (becomes the InputManager's ReceivingInput).
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.IInputReceiver.FocusUpdate">
            <summary>
            Event raised every frame if there is a non-null InputManager.ReceivingInput.  This allows
            the IInputReceiver to perform custom every-frame logic when it has focus, such as a ListBox
            listening for the Delete key to delete highlighted elements.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.ListBoxBase.mInsertLocation">
            <summary>
            Marks where to insert CollapseItems if reordering with the mouse.
            Default is -1, which specifies that it shouldn't be drawn.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.ListBoxBase.mYPositionPushed">
            <summary>
            When the user pushes the mouse over the list box
            this value will be set.  Then this value can be compared
            against to see if reordering should occur.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.ListBoxBase.GetItem(System.Int32)">
            <summary>
            Returns the CollapseItem at index itemNumber traversing from the top of the list down.
            </summary>
            <remarks>
            This method will skip over items that are children of collapsed items.  
            The list is traversed
            down ignoring hierarchy, but only counting "visible" items.
            </remarks>
            <param name="itemNumber">The index to return</param>
            <returns>The item at index itemNumber.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.ListBoxBase.RemoveItemByName(System.String)">
            <summary>
            Removes the item from the CollapseListBox.
            </summary>
            <remarks>
            This method removes the item from the CollapseListBox and detaches the item's children and
            reattaches them to the box.  The assumption here is that the item will not be reattached.
            </remarks>
            <param name="itemToRemove"></param>
            <returns></returns>
        </member>
        <member name="P:FlatRedBall.Gui.ListBoxBase.NumberOfVisibleElements">
            <summary>
            Returns the number of elements that can be shown in the list box.  Increasing the ScaleY or decreasing
            the DistanceBetweenLines increases this value.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.ListBoxBase.OnNewHighlight">
            <summary>
            This event is fired when highlighting an item that was not 
            previously highlighted.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.CollapseListBox.DetachItem(System.String)">
            <summary>
            Detaches the item from the CollapseListBox.
            </summary>
            <remarks>
            This method will keep all children of the detached item in tact so that the item can simply
            be reattached again.
            </remarks>
            <param name="itemToRemove"></param>
            <returns></returns>
        </member>
        <member name="T:FlatRedBall.Gui.CollapseWindow">
            <summary>
            Summary description for CollapseWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.ComboBox">
            <summary>
            Summary description for ComboBox.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.ComboBox.OnDropDownButtonClick(FlatRedBall.Gui.Window)">
            <summary>
            Event clicked when the dropDownButton is clicked.  If the ListBox is not visible
            it will appear.
            </summary>
            <param name="callingWindow"></param>
        </member>
        <member name="T:FlatRedBall.Gui.Cursor">
            <summary>
            The cursor is a controllable graphical icon which can interact with FRB elements and
            stores information about mouse activity.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.sensitivity">
            <summary>
            Controls how sensitive the cursor is to mouse movements.
            </summary>
            <remarks>
            Default value is 1, so setting the value to 2 will make the mouse
            twice as sensitive.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.si">
            <summary>
            The Sprite that the cursor uses to draw itself.
            </summary>
            <remarks>
            This field can be modified to change how the Sprite is drawn.  The following Sprite values modify the cursor:
            
            <para>x - relative to the camera</para>
            <para>y - relative to the camera</para>
            <para>ScaleX</para>
            <para>ScaleY</para>
            <para>RotationX</para>
            <para>RotationY</para>
            <para>RotationZ</para>
            <para>texture</para>
            <para>fade</para>
            <para>visible</para>
            <para>
            Other values will not modify how the Sprite is drawn.
            </para>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.tipXOffset">
            <summary>
            The x distance from the center of the Cursor which is used as the cursor's tip for selection.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.tipYOffset">
            <summary>
            The y distance from the center of the Cursor which is used as the cursor's tip for selection.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.mWindowSecondaryPushed">
            <summary>
            The window that the cursor was over when the mouse button was pressed.
            </summary>
            <remarks>
            When the secondary (right) mouse button is pushed down, this value is set - either to null 
            if the mouse is not over any Windows or to the Window that the mouse is over.  
            When the secondary mouse button is released (clicked), this value is set to null.  
            This value is useful for clicking on Windows.  Specifically, when the cursor is clicked
            on a Button, the WindowPushed value is tested to make sure that it is the same as 
            the Window clicked on.  This allows for players to push on a Button but move 
            the mouse away and click elsewhere without clicking on the Button originally 
            pushed and without accidentally clicking on other Buttons.  This is also used
            with ToggleButtons to control when they are pressed and unpressed.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.StaticPosition">
            <summary>
            If this value is true, the Cursor will not move in response to the mouse or gamepad.
            </summary>
            <remarks>
            This value can be set to true if the Cursor should not move in response to input.
            The staticPosition value is only used by the engine when over the button on an UpDown.  When pushing down
            on an UpDown button, the staticPosition is set to true, and set to false when releasing the mouse button.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.mWindowGrabbed">
            <summary>
            The window that the cursor has grabbed.
            </summary>
            <remarks>
            When the mouse button is released, the windowGrabbed reference is set to null.  If a Window is grabbed, it will
            move as the mouse moves.  This is used commonly for dragging on menu bars and scroll bars.  The cursor does
            not recognize which types of Windows can be dragged, so windows must be grabbed through the Cursor.GrabWindow
            method.  The windowGrabbed's onDrag event is fired every frame.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.mObjectGrabbed">
            <summary>
            Storage for reference to a grabbed object.
            </summary>
            <remarks>
            This variable has no internal engine functionality.  It merely provies a place to store a reference
            to a grabbed Object - useful in graphical applications where the Cursor can grab and move objects such
            as Sprites or Text objects.
            The ObjectGrabbedRelativeX and ObjectGrabbedRelativeY can also be set to keep the object static after a click rather than
            "snapping" its center to the Cursor's tip.
            <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.ObjectGrabbedRelativeX">
            <summary>
            The relative x position of a grabbed object from the center of the cursor.
            </summary>
            <remarks>
            This value can be set through the SetObjectRelativePosition.  
            This value used in the GetCursorPositionForSprite method.
             <seealso cref="M:FlatRedBall.Gui.Cursor.GetCursorPositionForSprite(System.Single@,System.Single@,System.Single)"/>
             <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.ObjectGrabbedRelativeY">
            <summary>
            The relative y position of a grabbed object from the center of the cursor.
            </summary>
            <remarks>
            This value can be set through the SetObjectRelativePosition.  
            This value used in the GetCursorPositionForSprite method.
             <seealso cref="M:FlatRedBall.Gui.Cursor.GetCursorPositionForSprite(System.Single@,System.Single@,System.Single)"/>
             <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryPush">
            <summary>
            Determines whether the primary button was pushed this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryDown">
            <summary>
            Determines whether the primary button is down this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryClick">
            <summary>
            Determines whether the primary button was clicked (released) this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.PrimaryDoubleClick">
            <summary>
            Determines whether the primary button was double clicked this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryPush">
            <summary>
            Determines whether the secondary button was pushed this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryDown">
            <summary>
            Determines whether the secondary button is down this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryClick">
            <summary>
            Determines whether the secondary button was clicked (released) this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.SecondaryDoubleClick">
            <summary>
            Determines whether the secondary button was double clicked this frame.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Cursor.mCamera">
            <summary>
            Reference to the camera to which the cursor belongs.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.#ctor(FlatRedBall.Camera,System.Windows.Forms.Control)">
            <summary>
            Creates a new Cursor
            </summary>
            <remarks>
            Usually the cursor does not have to be created explicitly.  Calling
            the GuiManager's constructor without a cursor reference (default in the
            FrbTemplate) creates a cursor automatically.  New cursors should only
            be created if multiple cursors are needed, or if you are inheriting
            from the Cursor class.  Usually multiple cursors are only needed
            in games with multiple cameras.
            </remarks>
            <param name="cameraToUse">The camera that the cursor will belong to.</param>
            <param name="formToUse">Reference to the form that the application is running on.</param>
            <param name="inpMan">Reference to the InputManager.</param>
            <param name="SpriteManager">Reference to the SpriteManager</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.ActualXVelocityAt(System.Single)">
            <summary>
            Returns the xVelocity of the cursor at a particular Z.
            </summary>
            <remarks>
            As the cursor can control objects at various Z values, this method returns the X velocity
            of the cursor at a paritular Z.  This method assumes that the Camera is unrotated (looking
            down the Z axis.
            </remarks>
            <param name="z">The z value to measure the velocity at.</param>
            <returns>The X velocity at the particular Z.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.ActualYVelocityAt(System.Single)">
            <summary>
            Returns the yVelocity of the cursor at a particular Z.
            </summary>
            <remarks>
            As the cursor can control objects at various Z values, this method returns the Y velocity
            of the cursor at a paritular Z.  This method assumes that the Camera is unrotated (looking
            down the Z axis.
            </remarks>
            <param name="z">The z value to measure the velocity at.</param>
            <returns>The Y velocity at the particular Z.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetCursorPosition(System.Single@,System.Single@,System.Single)">
            <summary>
            Modifies the x and y arguments to show the point of the cursor's tip at at the z value.
            </summary>
            <remarks>
            This method assumes that the Camera is unrotated (looking
            down the Z axis).
            </remarks>
            <param name="x">The x value to change.</param>
            <param name="y">The y value to change.</param>
            <param name="z">The z value to use.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetCursorPositionForSprite(System.Single@,System.Single@,System.Single)">
            <summary>
            Modifies the x and y arguments to show the position that the grabbed Sprite should be at.
            </summary>
            <remarks>
            This method assumes that the camera's currentFollowingStyle is Camera.LOOKINGSTYLE.DOWNZ.  The x and y
            arguments will represent the location of the cursor's tip and adds the relative Sprite positions.
            
            <seealso cref="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)"/>
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetCursorPosition(FlatRedBall.PositionedObject,System.Single)">
            <summary>
            Gets the cursor's position and sets the argument positionedObject's
            x and y values to the cursor's position at the argument Z value.
            </summary>
            <remarks>
            This is a simple way to set the position of an object
            to the cursor's position.
            </remarks>
            <param name="positionedObject">Reference to the positioned object.</param>
            <param name="z">The Z value at which the position should be set.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <remarks>
            This method will not return inactive Sprites (Sprites with the .active variable set to false).  To consider inactives as well
            call the GetSpriteOver(SpriteArray, bool) overload.
            </remarks>
            <param name="spriteArray">The SpriteArray to search through.</param>
            <returns>The Sprite that is found, or null if the cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver``1(System.Collections.Generic.IList{``0},System.Boolean,System.Boolean)">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <param name="spriteArray">The SpriteArray to search through.</param>
            <param name="considerInactives">Whether inactive Sprites (Sprites with the .active variable set to false) are considered.</param>
            <returns>The Sprite that is found, or null if the cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver(System.Collections.Generic.IList{FlatRedBall.SpriteList})">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <param name="spriteArrayArray">The SpriteArrayArray to search through.</param>
            <returns>The Sprite that is found, or null if the cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver(FlatRedBall.Graphics.Layer)">
            <summary>
            Returns the Sprite the cursor is over giving preference to the closest Sprite to the Camera.
            </summary>
            <param name="spriteLayer">The SpriteLayer to search through.</param>
            <returns>The Sprite that is found, or null if the Cursor is not over any Sprites.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GetSpriteOver(System.Collections.Generic.List{FlatRedBall.ManagedSpriteGroups.SpriteGrid})">
            <summary>
            Returns the Sprite that the cursor is over in the argument SpriteGridArray.
            </summary>
            <param name="sga">Reference to the SpriteGridArray.</param>
            <returns>The Sprite that the cursor is over.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.GrabWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Grabs a Window with the Cursor.
            </summary>
            <remarks>
            The windowGrabbed reference will automatically be set to null when the primary button is 
            released (clicked) by the GuiManager.Control method.
            <seealso cref="M:FlatRedBall.Gui.GuiManager.Control"/>
            </remarks>
            <param name="windowToGrab">The Window to grab.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn(FlatRedBall.Sprite)">
            <summary>
            Determines whether the cursor is on a Sprite, but only considers rotation on the z axis (RotationZ).
            </summary>
            <remarks>
            This method will not consider whether spriteToTest is rotated on the x or y axes, and assumes
            that the camera is looking down the Z axis (the Camera is unrotated).  Cursor.IsOn3D
            works properly for any rotation..
            
            <para>This method will not select Sprites which are closer that the camera's nearClipPlane or
            further than the camera's farClipPlane.</para>
            </remarks>
            <param name="spriteToTest">The Sprite to test if the cursor is over.</param>
            <returns>Whether the cursor is on the Sprite.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn(FlatRedBall.Graphics.Text)">
            <summary>
            Determines whether the cursor is over a textObject.
            </summary>
            <remarks>
            This method will not consider whether the Text is rotated on the x or y axes, and assumes
            that the cursor is looking down the Z axis(the camera.LookStyle is DOWNZ).  
            
            <para>This method will not select Texts which are closer that the camera's nearClipPlane or
            further than the camera's farClipPlane.</para>
            
            Currently, the method treats the text object as one rectangle, so the width of the Text will be equal
            to the widest line.  For example:
            
            <code>
            // if the text were centered, the collidable area would be as follows
            +-------------------------+
            |       The outline       |
            |represents the collidable|
            |    area of the Text.    |
            |  Notice that the border |
            |    extends to include   |
            |    the longest line.    |
            +-------------------------+
            
            // if the text were left aligned, the area would still be the same:
            +-------------------------+
            |The outline              |
            |represents the collidable|
            |area of the Text.        |
            |Notice that the border   |
            |extends to include       |
            |the longest line.        |
            +-------------------------+
            </code>
            </remarks>
            <param name="textObject">The TextObject to test if the cursor is over.</param>
            <param name="TextManager">Reference to the TextManager which is used to retrieve dimensions of the Text object.</param>
            <returns>Whether the cursor is on the TextObject.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn(FlatRedBall.Gui.IWindow)">
            <summary>
            Returns whether the cursor is over the argument windowToTest.
            </summary>
            <remarks>
            This method will work accurately for both GuiManager-drawn Windows
            and SpriteFrame Windows.
            </remarks>
            <param name="windowToTest">Reference to the window to test.</param>
            <returns>Whether the cursor is over the argument Window.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn``1(``0)">
            <summary>
            Returns whether the cursor is over the argument SpriteFrame.
            </summary>
            <param name="sf">Reference to the SpriteFrame to test.</param>
            <returns>Whether the cursor is over the argument SpriteFrame.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn3D(FlatRedBall.Sprite)">
            <summary>
            Determines whether the Cursor is on a Sprite.
            </summary>
            <remarks>
            This is the "full featured" version of the IsOn method, considering rotation on all axes for
            both the spriteToTest and the camera.  All lookingStyles are considered and will return accurate results.
            This method is slower than the IsOn method, and if Sprites are facing the camera under its
            default orientation, the IsOn method should be used.
            
            <para>This method will not select Sprites if the cursor is over them on a point
            that is closer that the camera's nearClipPlane or further than the camera's 
            farClipPlane.</para>
            
            </remarks>
            <param name="spriteToTest">The Sprite to test if the Cursor is over.</param>
            <returns>Whether the Cursor is over the Sprite.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsOn3D(FlatRedBall.Sprite,Microsoft.DirectX.Vector3@)">
            <summary>
            Determines whether the Cursor is on a Sprite and stores the intersection point in a Vector3.
            </summary>
            <remarks>		
            This is the "full featured" version of the IsOn method, considering rotation on all axes for
            both the spriteToTest and the camera.  All lookingStyles are considered and will return accurate results.
            This method is slower than the IsOn method, and if Sprites are facing the camera under its
            default orientation, the IsOn method should be used.
            
            This method also modifies a Vector3 which marks the intersection point on the Sprite.
            
            <para>This method will not select Sprites if the cursor is over them on a point
            that is closer that the camera's nearClipPlane or further than the camera's 
            farClipPlane.</para>
            </remarks>
            <param name="spriteToTest">The Sprite to test if the Cursor is over.</param>
            <param name="intersectionPoint">The point where the cursor touches the Sprite.</param>
            <returns>Whether the Cursor is on the Sprite.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsCursorTexture(System.String)">
            <summary>
            Checks to see if the Cursor's texture matches the passed argument.
            </summary>
            <param name="textureToTest">The texture to compare to.</param>
            <returns>Whether the argument is the same as the Cursor's texture.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.IsInWindow">
            <summary>
            Determines whether the cursor is currently in the active Control which owns the application.
            </summary>
            <returns>Whether the cursor is currently in the active Control which owns the application.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.SetCursor(FlatRedBall.Texture2D,System.Single,System.Single,System.Single)">
            <summary>
            Sets the texture, ScaleX and ScaleY, and the tip offsets.
            </summary>
            <remarks>
            This method just sets the properties in one call.  The individual properties can
            also be set individually.
            </remarks>
            <param name="textureToUse">Texture to use.</param>
            <param name="ScaleX">The ScaleX to set.  ScaleY will be set according to the source texture's dimensions.</param>
            <param name="TipXOffset">The relative x value of the tip of the Cursor from its center.</param>
            <param name="TipYOffset">the relative y value of the tip of the Cursor from its center.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.SetJoystickControl(FlatRedBall.Joystick)">
            <summary>
            Sets the cursor to be controlled by the joystick rather than the mouse.
            </summary>
            <param name="js">Refernce to the joystick that will control the cursor.</param>
        </member>
        <member name="M:FlatRedBall.Gui.Cursor.SetObjectRelativePosition(FlatRedBall.Math.IStaticPositionable)">
            <summary>
            Tells the Cursor to store the relative position of the Sprite to the Cursor's tip.
            </summary>
            <remarks>
            The relative Sprite position is used in the GetCursorPositionForSprite method.  Relative values
            keep objects from "snapping" to the center of the cursor when grabbed.
            <seealso cref="M:FlatRedBall.Gui.Cursor.GetCursorPositionForSprite(System.Single@,System.Single@,System.Single)"/>
            </remarks>
            <param name="spriteToSetTo">The Sprite that the relative values should be set to.</param>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.Active">
            <summary>
            Sets whether the cursor is active.
            </summary>
            <remarks>
            An inactive cursor will not move or read any input.
            Setting the active property to false will also clear the following
            fields:
            
            <para>primaryClick</para>
            <para>primaryDoubleClick</para>
            <para>primaryDown</para>
            <para>primaryPush</para>
            <para>secondaryClick</para>
            <para>secondaryDoubleClick</para>
            <para>secondaryDown</para>
            <para>secondaryPush</para>
            
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.XForUI">
            <summary>
            The cursor's X position relative to the camera at 100 units away from the camera.
            </summary>
            <remarks>
            As objects can have varying distances away from the camera, when trying to move
            objects with the cursor, it is usually not accurate to say:
            <code>
            someObject.X = cursor.X;
            someObject.Y = cursor.Y;
            </code>
            This will only be accurate if the object is also 100 units away from the camera and
            if the camera is centered on the origin.  The
            x and y values must be passed to the GetCursorPosition method.
            <seealso cref="M:FlatRedBall.Gui.Cursor.GetCursorPosition(System.Single@,System.Single@,System.Single)"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.YForUI">
            <summary>
            The cursor's Y position relative to the camera at 100 units away from the camera.
            </summary>
            <remarks>
            As objects can have varying distances away from the camera, when trying to move
            objects with the cursor, it is usually not accurate to say:
            <code>
            someObject.X = cursor.X;
            someObject.Y = cursor.Y;
            </code>
            This will only be accurate if the object is also 100 units away from the camera and
            if the camera is centered on the origin.  The
            x and y values must be passed to the GetCursorPosition method.
            <seealso cref="M:FlatRedBall.Gui.Cursor.GetCursorPosition(System.Single@,System.Single@,System.Single)"/>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.XVelocity">
            <summary>
            The change in x since last frame in world units at 100 units away from the camera.
            </summary>
            <remarks>
            Cursor velocity properties do not counsider bounds; that is, a cursor will still have an xVelocity
            even if it is pressed against the right side of the screen and being moved to the right.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.YVelocity">
            <summary>
            The change in y since last frame in world units at 100 units away from the camera.
            </summary>
            <remarks>
            Cursor velocity properties do not counsider bounds; that is, a cursor will still have an xVelocity
            even if it is pressed against the right side of the screen and being moved to the right.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ZVelocity">
            <summary>
            The movement rate of the controlling input (usually mouse) on the z axis.
            </summary>
            <remarks>
            Cursor velocity properties do not counsider bounds; that is, a cursor will still have an xVelocity
            even if it is pressed against the right side of the screen and being moved to the right.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.WindowPushed">
            <summary>
            The window that the cursor was over when the mouse button was pressed.
            </summary>
            <remarks>
            When the mouse button is pushed down, this value is set - either to null 
            if the mouse is not over any Windows or to the Window that the mouse is over.  
            When the mouse button is released (clicked), this value is set to null.  
            This value is useful for clicking on Windows.  Specifically, when the cursor is clicked
            on a Button, the WindowPushed value is tested to make sure that it is the same as 
            the Window clicked on.  This allows for players to push on a Button but move 
            the mouse away and click elsewhere without clicking on the Button originally 
            pushed and without accidentally clicking on other Buttons.  This is also used
            with ToggleButtons to control when they are pressed and unpressed.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.Cursor.ObjectGrabbed">
            <summary>
            Assigns the ObjectGrabbed and calculates the relative position of the
            grabbed object.  After this method is called, UpdateObjectGrabbedPosition can be called
            every frame to position the grabbed object.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.EditAndSetButtons">
            <summary>
            UI element used to give the user an option whether to edit an existing 
            instance of an object or to reassign it.
            </summary>
            <remarks>
            This object is usually used in PropertyGrids.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Gui.FileTextBox">
            <summary>
            A TextBox-like window which allows the user to browse the folder structure and select a 
            file.  The selected file will appear in the TextBox.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.FileTextBox.SetFileType(System.String)">
            <summary>
            Sets the filetype that the FileWindow can view. 
            </summary>
            <remarks>
            This method also clears all types.  Setting a filter then calling SetFileType clears the filter.
            
            Setting the filetype as "graphic" sets all of the file types that FRB can load.
            <seealso cref="P:FlatRedBall.Gui.FileWindow.Filter"/>
            </remarks>
            <param name="FileType">The file types specified by extension.  </param>
        </member>
        <member name="M:FlatRedBall.Gui.FileWindow.OnFileTypeChange(FlatRedBall.Gui.Window)">
            <summary>
            If the user selects an item in the mFileTypesBox 
            </summary>
            <param name="callingWindow"></param>
        </member>
        <member name="M:FlatRedBall.Gui.FileWindow.#ctor(FlatRedBall.Gui.Cursor)">
            <summary>
            Creates a new FileWindow.
            </summary>
            <remarks>
            By default, the save name TextBox is invisible making this a text box for loading.  Call
            SetToSave to make the box appear.
            </remarks>
            <param name="InpMan"></param>
            <param name="SprMan"></param>
        </member>
        <member name="M:FlatRedBall.Gui.FileWindow.SetFileType(System.String)">
            <summary>
            Sets the filetype that the FileWindow can view. 
            </summary>
            <remarks>
            This method also clears all types.  Setting a filter then calling SetFileType clears the filter.
            
            Setting the filetype as "graphic" sets all of the file types that FRB can load.
            <seealso cref="P:FlatRedBall.Gui.FileWindow.Filter"/>
            </remarks>
            <param name="FileType">The file types specified by extension.  </param>
        </member>
        <member name="P:FlatRedBall.Gui.FileWindow.Filter">
            <summary>
            Specifies the possible filetypes that the FileWindow can save or load.
            </summary>
            <remarks>
            <code>
            // assuming someFileWindow is a valid
            // This sets a single filter for EXE
            someFileWindow.Filter = "Executable File (*.exe)|*.exe";
            // Or you can set multiple ones
            someFileWindow.Filter = "SpriteEditor Binary Scene (*.scn)|*.scn|SpriteEditor XML Scene (*.scnx)|*.scnx";
            </code>
            </remarks>
        </member>
        <member name="T:FlatRedBall.Gui.FocusUpdateDelegate">
            <summary>
            Event raised by the Keyboard every frame on the InputManager's ReceivingInput reference.
            </summary>
            <param name="inputReceiver">The current IInputReceiver.</param>
        </member>
        <member name="T:FlatRedBall.Gui.InfoBar">
            <summary>
            UI element which stretches across the bottom of the screen.  This element
            automatically resizes horiontally to fill the entire bottom of the screen.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.ListBox">
            <summary>
            Summary description for ListBox.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.ListBox.Clear">
            <summary>
            Removes all items from the list box.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.ListBoxFunction">
            <summary>
            Delegate for actions to be taken when the user clicks on an icon.
            </summary>
            <param name="collapseItem">The CollapseItem containing the icon that was clicked.</param>
            <param name="listBoxBase">The ListBoxBase containing the CollapseItem that contains the ListBoxIcon.</param>
            <param name="listBoxIcon">The ListboxIcon that was clicked.</param>
        </member>
        <member name="F:FlatRedBall.Gui.ListDisplayWindow.mExtraChildrenWindows">
            <summary>
            List of windows which are always shown.  This can be used to modify the ListDisplayWindow
            to support more windows and behavior.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.ListDisplayWindow.mTypeList">
            <summary>
            This must be set prior to calling ShowCreationWindow if element creation
            is to be handled by FlatRedBall.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.ListDisplayWindow.mUndoInstructions">
            <summary>
            The list that the Grid's UndoInstructions are set to.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.ListDisplayWindow.AddWindow(FlatRedBall.Gui.IWindow)">
            <summary>
            Adds an always-displayed Window to the PropertyGrid.  This window will appear
            after all member-displaying Windows and will automatically be positioned appropriately.
            </summary>
            <param name="windowToAdd">The window to add.</param>
        </member>
        <member name="M:FlatRedBall.Gui.ListDisplayWindow.GetStringForObject(System.Object)">
            <summary>
            Returns the String representation for an object.  The string returns
            depends on whether a string representation has been set for this object and
            whether the object is a FlatRedBall.Utilities.INameable.
            </summary>
            <param name="objectToGetStringFor">The object to get the string representation of.</param>
            <returns>The string representation of the argument.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.ListDisplayWindow.HighlightObjectNoCall(System.Object,System.Boolean)">
            <summary>
            Highlights the argument objectToHighlight, but does not raise the Highlighted event.
            </summary>
            <param name="objectToHighlight">The object to highlight.</param>
            <param name="addToHighlighted">Whether to add the argument to the highlighted items.  If 
            true is passed then mulitple objects can be highlighted.  If false is passed then only the 
            argument will be highlighted.</param>
        </member>
        <member name="P:FlatRedBall.Gui.ListDisplayWindow.AllowCut">
            <summary>
            Whether the ListDisplayWindow has CTRL+X cut and CTRL+V paste functionality.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.ListDisplayWindow.ConsiderAttachments">
            <summary>
            Whether the ListDisplayWindow attempts to display attachments.  If the list
            being displays contains IAttachables and this is true then the tree structure
            will be rerpesented in the CollapseListBox.  Default is false.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.ListDisplayWindow.MemberDisplaying">
            <summary>
            If this ListDisplayWindow was created by a PropertyGrid then
            it is displaying a member that is a List.  MemberDisplaying is
            the string name of the member being displayed.  This defaults
            to null if this Window was not created by a PropertyGrid.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.Marker">
            <summary>
            Summary description for Marker.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Marker.ScaleX">
            <summary>
            The distance from the center to the edge on the X axis.  Increasing
            this makes the Marker wider.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Marker.ScaleY">
            <summary>
            The distance from the center to the edge on the Y axis.  Increasing
            this makes the Marker taller.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.Marker.ReferenceObject">
            <summary>
            The object that the Marker represents.
            </summary>
            <remarks>
            This can be used if an object is to be selected on a MarkerTimeLine, like an animation frame.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Marker.Value">
            <summary>
            The value in the MarkerTimeLine that the Marker is located.
            </summary>
            <remarks>
            Usually the value represents time.  Therefore, if a Marker is being used to show
            when an animation frame executes, this value should be the animation frame's time.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.Marker.Texture">
            <summary>
            UNUSED
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.MarkerTimeLine">
            <summary>
            Summary description for MarkerTimeLine.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.TimeLine">
            <summary>
            Summary description for TimeLine.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.ClickEvent(FlatRedBall.Gui.Window)">
            <summary>
            Method raised when the user clicks on the Window.  This moves
            the position bar to the appropriate location.
            </summary>
            <param name="callingWindow">The window raising this event.</param>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.#ctor(FlatRedBall.Gui.Cursor)">
            <summary>
            Creates a new TimeLine;
            </summary>
            <param name="cursor">The Cursor that will interact with the TimeLine.</param>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.#ctor(FlatRedBall.Gui.GuiSkin,FlatRedBall.Gui.Cursor)">
            <summary>
            Creates a new TimeLine using the argument GuiSkin to control the visible representation.
            </summary>
            <param name="guiSkin">The GuiSkin to use.</param>
            <param name="cursor">The Cursor that will interact with the TimeLine.</param>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.AutoCalculateVerticalLineSpacing">
            <summary>
            Automatically sets the VerticalBarIncrement and SmallVerticalBarIncrement
            based off of the ValueWidth property.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.CallOnGUIChange">
            <summary>
            Raises the events which raise when the GUI changes.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.ClearEvents">
            <summary>
            Clears all events.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.FixBar">
            <summary>
            Keeps the position bar within the visible range of the TimeLine.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.GetPosOnBar(System.Double)">
            <summary>
            Converts an absolute value to visible position on the bar
            </summary>
            <param name="valueToGet">The absolute value to convert to position.</param>
            <returns>The position on the bar.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.PositionToValueAbsolute(System.Single)">
            <summary>
            Returns the precision-adjusted value of the time line given an absolute position.
            </summary>
            <param name="pos">The absolute X position.</param>
            <returns>The precision-adjusted value.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.PositionToValueRelative(System.Single)">
            <summary>
            Converts the argument relative-to-TimeLine argument to a value that it represents.
            </summary>
            <remarks>
            This mehod is used to convert the position bar's relative X to an actual value.
            </remarks>
            <param name="worldUnitRelativeX">The relative-to-Timeline position.</param>
            <returns>The value that corresponds to the argument position.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.TimeLine.ValueToPositionRelative(System.Double)">
            <summary>
            Converts the value to the corresponding relative X position on the timeline.
            </summary>
            <param name="value">The value to convert to a relative position.</param>
            <returns>The corresponding relative position.</returns>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.BeforeChangeValue">
            <summary>
            The TimeLine's value before the last change was initiated.  Can be used for undos.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.CurrentValue">
            <summary>
            The precision-adjusted current value on the TimeLine.
            </summary>
            <remarks>
            This value will always fall between the MinimumValue and MaximumValue properties.
            Setting this value will also change the position of the bar and potentially change the
            Start property so that the bar is in view.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.MinimumValue">
            <summary>
            The minimum value on the TimeLine.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.MaximumValue">
            <summary>
            The maximum value on the TimeLine
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.Precision">
            <summary>
            The number of decimal points that the TimeLine rounds its CurrentValue to.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.ScaleY">
            <summary>
            The Y scale of the TimeLine.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.ScaleX">
            <summary>
            The X scale of the TimeLine.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.Start">
            <summary>
            The first visible value in the TimeLine.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.TimeUnitDisplayed">
            <summary>
            The TimeUnit that the PropertyGrid displays.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.ValueWidth">
            <summary>
            The displayed range.  The last visible value equals Start + ValueWidth.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.VerticalBarIncrement">
            <summary>
            The distance between the larger markings on the TimeLine.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.SmallVerticalBarIncrement">
            <summary>
            The distance between the smaller markings on the TimeLine.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TimeLine.ShowValues">
            <summary>
            Whether values (as text) are drawn above the TimeLine.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.TimeLine.GuiChange">
            <summary>
            Raised when the user changes the CurrentValue with the Cursor - by dragging
            the position bar or clicking to reposition the position bar.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.TimeLine.TimeUnit">
            <summary>
            The time units that the TimeLine can show.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.TimeLine.TimeUnit.Millisecond">
            <summary>
            The time unit of 1/1000 fo a second.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.TimeLine.TimeUnit.Second">
            <summary>
            The time unit of one second.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.MarkerTimeLine.MarkerClicked">
            <summary>
            Tells which marker was clicked on.
            </summary>
            <remarks>
            This variable is only to be used in the MarkerClick event.  
            </remarks>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.#ctor(FlatRedBall.Gui.Cursor)">
            <summary>
            Instantiates a new MarkerTimeLine which will interact with the argument Cursor.
            </summary>
            <param name="cursor">The Cursor that the MarkerTimeLine will interact with.</param>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.AddMarker(System.Double,System.Object)">
            <summary>
            Adds a Marker which will be positioned at the time specified
            by the "value" argument referencing the referenceObject argument.
            </summary>
            <param name="value">The time at which to place the new Marker.</param>
            <param name="referenceObject">The object that the Marker will reference - can be null.</param>
            <returns>The newly-created Marker.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.AddMarker(System.Double,System.Object,FlatRedBall.Texture2D)">
            <summary>
            Adds a custom-textured Marker which will be positioned at the time specified
            by the "value" argument referencing the referenceObject argument.
            </summary>
            <param name="value">The time at which to place the new Marker.</param>
            <param name="referenceObject">The object that the Marker will reference - can be null.</param>
            <param name="textureToUse">The new Marker's texture - will use the default texture if null.</param>
            <returns>The newly-created Marker.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.AddMarkers``1(System.Collections.Generic.List{``0})">
            <summary>
            Adds markers according to the argument List of ITimed objects.
            </summary>
            <typeparam name="T">The type of object being added.</typeparam>
            <param name="timedList">The list of ITimed objects.</param>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.ClearMarkers">
            <summary>
            Clears all Markers.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.FindMarkerByReferenceObject(System.Object)">
            <summary>
            Returns the first Marker found with its ReferenceObject property
            matching the argument referenceObject or null if no matchers are found.
            </summary>
            <param name="referenceObject">The referenceObject to search for.</param>
            <returns>The Marker found or null if none are found.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.MoveMarker(System.Object,System.Double)">
            <summary>
            Finds the Marker that references the argument referenceObject
            and changes its Value property (usually it's time) to the argument
            newValue.
            </summary>
            <param name="referenceObject">The object to search for.</param>
            <param name="newValue">The new value to set.</param>
            <returns>The index of the new Marker after the value change.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.MarkerTimeLine.RemoveMarker(System.Object)">
            <summary>
            Removes the Marker which references the argument referenceObject.
            </summary>
            <param name="referenceObject">The object to search for.</param>
        </member>
        <member name="E:FlatRedBall.Gui.MarkerTimeLine.MarkerClick">
            <summary>
            Event raised when the user clicks on a Marker.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.MenuItem">
            <summary>
            A clickable item in a MenuStrip or item in a sub-menu.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.TextDisplay">
            <summary>
            Summary description for TextDisplay.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.MenuStrip">
            <summary>
            UI Element used to provide compact access to functionality.  Appears in
            most applications as the collection of menus beginning with File, Edit, etc.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.MessageBox">
            <summary>
            Summary description for TextInputWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.MultiButtonMessageBox">
            <summary>
            Summary description for MultiButtonMessageBox.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.NewWindowLimitation">
            <summary>
            Enum used by the ObjectDisplayManager to indicate how
            old IObjectDisplayers are treated when new IObjectDisplayers are created.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.ObjectDisplayManager.sStringRepresentations">
            <summary>
            The methods to call for each type to get the string representation for referenced objects.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.OkCancelWindow">
            <summary>
            Summary description for OkCancelWindow.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.OkCancelWindow.GainFocus">
            <summary>
            Event raised when the OkCancelWindow gets keyboard input.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGridMemberSettings">
            <summary>
            Object which holds a list of strings that can be used
            to tell the PropertyGrid which members to exclude when
            creating a new PropertyGrid of a specific type.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGrids.BoolPropertyGrid">
            <summary>
            A StructReferencePropertyGrid used by the FlatRedBall Engine when editing bools in a ListDisplayWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGrids.DoublePropertyGrid">
            <summary>
            A StructReferencePropertyGrid used by the FlatRedBall Engine when editing doubles in a ListDisplayWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGrids.EnumPropertyGrid`1">
            <summary>
            A StructReferencePropertyGrid used by the FlatRedBall Engine when editing enums in a ListDisplayWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGrids.FloatPropertyGrid">
            <summary>
            A StructReferencePropertyGrid used by the FlatRedBall Engine when editing floats in a ListDisplayWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGrids.IntPropertyGrid">
            <summary>
            A StructReferencePropertyGrid used by the FlatRedBall Engine when editing ints in a ListDisplayWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGrids.LongPropertyGrid">
            <summary>
            A StructReferencePropertyGrid used by the FlatRedBall Engine when editing longs in a ListDisplayWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyGrids.StringPropertyGrid">
            <summary>
            A StructReferencePropertyGrid used by the FlatRedBall Engine when editing strings in a ListDisplayWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.VisibilitySetting">
            <summary>
            Settings which can be used to set the visibility of member elements
            depending on the value of another member.
            </summary>
            <remarks>
            This enum is used by MemberVisibleCondition which is used in the 
            PropertyGrid's SetConditionalMemberVisibility method to set how the
            state of one property can impact the visibility of another property.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyWindowAssociation">
            <summary>
            Base non-generic class for the generic PropertyWindowAssociation class.
            </summary>
            <remarks>
            Contains information about an element in the PropertyGrid.  Information includes the
            UI element displaying the property, its associated Label, the member name, read/write
            permissions, and category.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.PropertyWindowAssociation.Window">
            <summary>
            The window that allows for editing of the property.
            </summary>
            <remarks>
            Fore example, a bool property would have a ComboBox.
            </remarks>
        </member>
        <member name="F:FlatRedBall.Gui.PropertyWindowAssociation.IsViewable">
            <summary>
            When a property is not a base type understood by
            the PropertyGrid it is represented by a button.  These
            properties can then be viewed in their own PropertyGrid.
            Even if CanWrite is false on these properties the user should
            still be able to view them.  If CanWrite is false but this is 
            true then the UI (button) representing this property will be enabled.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gui.PropertyWindowAssociation.ChildFloatingWindow">
            <summary>
            The window that allows for more detailed editing of an object.
            This window will appear if the user clicks on an "Edit Property" button.
            </summary>
            <remarks>
            Some types like ints and floats have natural representations, but other custom
            types do not.  Therefore if a member that the PropertyGrid does not how to display
            is included, then the PropertyGrid will show a button that says "Edit Property".  Pressing
            this button will bring up a new window which will show the details of an object in a new PropertyGrid
            or ListBox.  This will hold the reference to the window.
            
            Holding the reference not only eliminates some garbage collection and memory allocation, but it also allows
            the user to get a reference to it to add events for custom behavior.
            </remarks>
        </member>
        <member name="E:FlatRedBall.Gui.PropertyWindowAssociation.ChangeEvent">
            <summary>
            Raised whenever a property is changed through the PropertyGrid.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.PropertyWindowAssociation`1">
            <summary>
            Generic class storing associations between UI elements and settings for the member
            in the PropertyGrid.
            </summary>
            <remarks>
            <seealso cref="T:FlatRedBall.Gui.PropertyWindowAssociation"/>
            </remarks>
            <typeparam name="T">The type of the member being shown.</typeparam>
        </member>
        <member name="T:FlatRedBall.Gui.ScrollBar">
            <summary>
            Summary description for ScrollBar.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.ScrollBar.#ctor(FlatRedBall.Gui.Cursor)">
            <summary>
            Instantiates a new ScrollBar instance.  The new instance will not automatically be
            added to the GuiManager.
            </summary>
            <param name="cursor">The Cursor that the ScrollBar will interact with.</param>
        </member>
        <member name="M:FlatRedBall.Gui.ScrollBar.#ctor(FlatRedBall.Gui.GuiSkin,FlatRedBall.Gui.Cursor)">
            <summary>
            Instantiates a new ScrollBar using a GuiSkin.  The new instance will not automatically be
            added to the GuiManager.
            </summary>
            <param name="guiSkin">The GuiSkin to customize the appearance of the ScrollBar.</param>
            <param name="cursor">The Cursor that the ScrollBar will interact with.</param>
        </member>
        <member name="M:FlatRedBall.Gui.ScrollBar.GetNumDown">
            <summary>
            Gets the index of the first element shown in a list given the position of the position bar.
            </summary>
            <remarks>
            Prior to this method being called, the SetView function must be called and the Sensitivity 
            property must be set.
            </remarks>
            <returns>The number of elements down.</returns>
        </member>
        <member name="M:FlatRedBall.Gui.ScrollBar.SetScrollPosition(System.Int32)">
            <summary>
            Sets the position bar so that it reflects the number down passed as the argument.
            </summary>
            <param name="numDown">The number down to match with the PositionBar's position.</param>
        </member>
        <member name="M:FlatRedBall.Gui.ScrollBar.SetSkin(FlatRedBall.Gui.GuiSkin)">
            <summary>
            Sets the ScrollBar's skin and refreshes its appearance.
            </summary>
            <param name="guiSkin">The GuiSkin to set.</param>
        </member>
        <member name="M:FlatRedBall.Gui.ScrollBar.FixBar">
            <summary>
            Keeps the ScrollBar's position bar from overlapping the up and down buttons and 
            keeps its horizontal position inside the ScrollBar.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.ScrollBar.ScaleY">
            <summary>
            The distance from the center to the edge of the ScrollBar on the Y axis.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.ScrollBar.ScaleX">
            <summary>
            The distance from the center to the edge of the ScrollBar on the X axis.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.ScrollBar.Sensitivity">
            <summary>
            The ratio of the ScrollBar (excluding the up and down buttons) that the
            position bar should travel when pusing the up or down buttons.
            </summary>
            <remarks>
            This value is generally set to 1 divided by the number of elements.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gui.ScrollBar.View">
            <summary>
            Sets the size of the position bar - this value should be the number
            of elements in view divided by the total number of elements in a list.
            </summary>
            <remarks>
            This value should be between 0 and 1.  For example, if a ListBox has
            10 items, but 5 are visible, then the SetView method should be called with
            .5 as the argument (5/10).
            </remarks>
        </member>
        <member name="T:FlatRedBall.Gui.TextBox">
            <summary>
            Summary description for TextBox.
            </summary>
            
        </member>
        <member name="M:FlatRedBall.Gui.TextBox.FixNumericalInput">
            <summary>
            Makes sure the current text can be successfully parsed, and if not, changes it to 0.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TextBox.CursorXPosition">
            <summary>
            Gets the position of the visible text cursor given the mAbsoluteCursorPosition.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TextBox.AbsoluteCursorPosition">
            <summary>
            The position of the cursor on the text in the TextBox.  This is always greater than 0 and less than
            the length of the text.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.TextBox.TextChange">
            <summary>
            Raised when the displayed text changes.  This will be called for every
            letter typed when the user is typing - it does not wait for an Enter or
            loss of focus.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.TextBox.TakingInput">
            <summary>
            Whether the user can type in this Text Box.  Setting this to false makes the TextBox "read only".
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.TextInputWindow">
            <summary>
            Summary description for TextInputWindow.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.ToggleButton">
            <summary>
            Summary description for ToggleButton.
            </summary>
            
        </member>
        <member name="M:FlatRedBall.Gui.ToggleButton.Press">
            <summary>
            Presses the ToggleButton down and calls the onClick event.
            </summary>
        </member>
        <member name="M:FlatRedBall.Gui.ToggleButton.PressNoCall">
            <summary>
            Presses the ToggleButton down but does not call the onClick event.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.UpDown">
            <summary>
            Summary description for UpDown.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.UpDown.change">
            <summary>
            Gets the value change for this frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Gui.UpDown.Sensitivity">
            <summary>
            The speed at which dragging over the button changes the value.  Default is .1f.
            </summary>
        </member>
        <member name="E:FlatRedBall.Gui.UpDown.AfterValueChanged">
            <summary>
            This event is raised whenever the user types in a
            new value in the TextBox or when the user has finished
            changing the value by clicking and dragging on the button.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.UserNamePasswordWindow">
            <summary>
            Window which can be used to read a user name and password.  The password text box
            displays ****** instead of the actual passwords.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.WindowArray">
            <summary>
            Summary description for WindowArray.
            </summary>
        </member>
        <member name="T:FlatRedBall.Gui.WindowArrayVisibilityListBox">
            <summary>
            Summary description for WindowArrayVisibilityListBox.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.Keyboard.KeyTyped(Microsoft.DirectX.DirectInput.Key)">
            <summary>
            Returns whether a key was "typed".  A type happens either when the user initially pushes a key down, or when
            it gets typed again from holding the key down.  This works similar to how the keyboard types in text editors
            when holding down a key.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>Whether the key was typed.</returns>
        </member>
        <member name="F:FlatRedBall.Input.Mouse.mXAt100Units">
            <summary>
            The camera-relative X coordinate position of the Mouse at 100 units away.
            </summary>
        </member>
        <member name="M:FlatRedBall.Input.Mouse.IsOn(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Returns whether the Mouse is over the argument Circle.
            </summary>
            <param name="circle">The Circle to check.</param>
            <returns>Whether the mouse is over the argument Circle.</returns>
        </member>
        <member name="M:FlatRedBall.Input.Mouse.IsOn3D``1(``0,System.Boolean,FlatRedBall.Camera,Microsoft.DirectX.Vector3@)">
            <summary>
            Determines whether the Mouse is over the objectToTest argument.
            </summary>
            <remarks>
            If a Text object is passed this method will only work appropriately if 
            the Text object has centered text.  See the IsOn3D overload which takes a Text argument.
            </remarks>
            <typeparam name="T">The type of the first argument.</typeparam>
            <param name="objectToTest">The object to test if the mouse is on.</param>
            <param name="relativeToCamera">Whether the object's Position is relative to the Camera.</param>
            <param name="intersectionPoint">The point where the intersection between the ray casted from the 
            mouse into the distance and the argument objectToTest occurred.</param>
            <returns>Whether the mouse is over the argument objectToTest</returns>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.GrabbedPositionedObject">
            <summary>
            Grabs a PositionedObject.  The PositionedObject will automatically update
            its position according to mouse movement while the reference remains.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.X">
            <summary>
            Returns the client rectangle-relative X pixel coordinate of the cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.Y">
            <summary>
            Returns the client rectangle-Y pixel coordinate of the cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.XChange">
            <summary>
            The number of pixels that the mouse has moved on the
            X axis during the last frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.YChange">
            <summary>
            The number of pixels that the mouse has moved on the
            Y axis during the last frame.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.XVelocity">
            <summary>
            The rate of change of the X property in 
            pixels per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.Input.Mouse.YVelocity">
            <summary>
            The rate of change of the Y property in 
            pixels per second.
            </summary>
        </member>
        <member name="T:FlatRedBall.Input.Recording.InputEvent`2">
            <summary>
            Information about an input event that has occurred.  This class can be used for playbacks
            or for saving input information.
            </summary>
            <typeparam name="EventType">The event type.  This can be enum values defined by the end user or enums
            provided by other libraries, such as a Keys value representing which key experienced the event.</typeparam>
            <typeparam name="EventValue">The type of actions that can be performed on the given EventType.  For example
            this could be an enum defining whether a key was pressed or released.</typeparam>
        </member>
        <member name="T:FlatRedBall.Utilities.ITimed">
            <summary>
            Interface for an object which has a specified time.
            </summary>
        </member>
        <member name="P:FlatRedBall.Utilities.ITimed.Time">
            <summary>
            The time associated with the object.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.GenericInstruction">
            <summary>
            Base class for typed Instructions.  This type can be used
            to identify if an Instruction is a generic Instruction.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Instruction`2">
            <summary>
            Generic method of setting a particular variable at a given time.
            </summary>
            <typeparam name="TargetType">The type of object to operate on (ex. PositionedObject)</typeparam>
            <typeparam name="ValueType">The type of the value.  For example, the X value in PositionedObject is float.</typeparam>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.#ctor">
            <summary>
            Used when deserializing .istx files.  Not to be called otherwise.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.#ctor(`0,`1,System.Double)">
            <summary>
            To be used when inheriting from this class since you won't need the property's name
            </summary>
            <param name="targetObject">The object to operate on (ex. a PositionedObject)</param>
            <param name="value">The value to set to the property when the instruction is executed</param>
            <param name="timeToExecute">Absolute time to executing this instruction</param>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.#ctor(`0,System.String,`1,System.Double)">
            <param name="targetObject">The object to operate on (ex. a PositionedObject)</param>
            <param name="property">The name of the property to set</param>
            <param name="value">The value to set to the property when the instruction is executed</param>
            <param name="timeToExecute">Absolute time to executing this instruction</param>
        </member>
        <member name="M:FlatRedBall.Instructions.Instruction`2.Execute">
            <summary>
            Uses reflection to set the target object's property.
            </summary>
            <remarks>If you need more performance out of a section, you can simply
            inherit from this generic class and override the Execute method to avoid 
            delegating the call to the late binder class.</remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionBlueprint">
            <summary>
            A class that can be used to quickly create create identical Instructions for individual targets.
            </summary>
            <remarks>Cannot be serialized as an InstructionBlueprint, but can be converted into an InstructionSave via 
            InstructionSave.FromInstructionBlueprint().</remarks>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionBlueprint.BuildInstruction(System.Object,System.Double)">
            <summary>
            Builds an Instruction using the information stored in the InstructionBlueprint.
            </summary>
            <param name="target">The object that the returned Instruction will execute on</param>
            <param name="currentTime">The current time to use as an offset for the Instruction's Time of execution</param>
            <throws exception="ArgumentException">If target's type is not this InstructionBlueprint's TargetType</throws>
            <throws exception="NullReferenceException">If this InstructionBlueprint was fully initialized before this call to BuildInstruction.</throws>
            <returns>An Instruction created from this InstructionBlueprint's information</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionBlueprintList">
            <summary>
            A list of InstructionBlueprint objects
            
            <remarks>Can be used to quickly create InstructionLists for a specific target.</remarks>
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionBlueprintList.BuildInstructionList(System.Object,System.Double)">
            <summary>
            Creates an InstructionList containing Instructions that were created by the InstructionBlueprints in
            this list. 
            </summary>
            <param name="target">The object that the Instructions will be executed on.</param>
            <param name="currentTime">The current time to be used as an offset for each Instruction's execution.</param>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionList">
            <summary>
            List of Instructions which also provides methods for common
            actions such as sorting and executing the contained Instructions.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionList.Execute">
            <summary>
            Executes all contained Instructions in order of index.  Contained instructions are not removed.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.RelativeRotateToAccurate(FlatRedBall.PositionedObject,System.Single,System.Single,System.Single,System.Double)">
            <summary>
            Sets the relative rotational velcoities of a PositionedObject so that it rotates 
            to the desired relative orientation in a given amount of time.
            </summary>
            <remarks>
            This method first sets the relative rotational velocities of the PositionedObject then 
            sets instructions to stop the relative rotational velocities and
            finally sets the rotational values to fix any problems introduced by timing.
            </remarks>
            <param name="positionedObject">The Sprite to rotate.</param>
            <param name="rotX">The final relative rotX value.</param>
            <param name="rotY">The final relative rotY value.</param>
            <param name="rotZ">The final relative rotZ value.</param>
            <param name="secondsToTake">The number of seconds to take in the rotation.</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.UncastedSetMember(System.Object,System.String,System.Object)">
            <summary>
            Sets a member on an uncasted object.  If the type of objectToSetOn is known, use
            LateBinder for performance and safety reasons.
            </summary>
            <param name="objectToSetOn">The object whose field or property should be set.</param>
            <param name="memberName">The name of the field or property to set.</param>
            <param name="valueToSet">The value of the field or property to set.</param>
        </member>
        <member name="M:FlatRedBall.Instructions.InstructionManager.Update(System.Double)">
            <summary>
            Executes contained instructions.
            </summary>
            <param name="currentTime">The number of seconds since the start of application execution.</param>
        </member>
        <member name="P:FlatRedBall.Instructions.InstructionManager.Instructions">
            <summary>
            Holds instructions which will be executed by the InstructionManager
            in its Update method (called automatically by FlatRedBallServices).
            </summary>
            <remarks>
            Instructions for managed PositionedObjects like Sprites and Text objects
            should be added to the object's internal InstructionList.  This prevents instructions
            from referencing removed objects and helps with debugging.  This list should only be used
            on un-managed objects or for instructions which do not associate with a particular object.
            </remarks>        
        </member>
        <member name="P:FlatRedBall.Instructions.InstructionManager.IsExecutingInstructions">
            <summary>
            Whether the (automatically called) Update method executes instructions.  Default true.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.InstructionSet">
            <summary>
            Represents a set of KeyframeLists which can be applied to objects or
            used to perform scripted events.
            </summary>
            <remarks>
            When used to perform scripted events, InstructionSets can be compared
            to texture animation.  There are many levels of Lists in an InstructionSet.
            The following comparison to AnimationChainLists provides some clarity to the
            layers:
            <para>
            InstructionSet (List of KeyframeLists) : AnimationChainList (List of AnimationChains)
            </para>
            <para>
            KeyframeList (List of Keyframes - aka InstructionLists) : AnimationChain (List of AnimationFrames)
            </para>
            <para>
            InstructionList (Applied to an object to change any properties) : AnimationFrame (Applied to an object to change its appearance);
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Instructions.InstructionSet.Item(System.String)">
            <summary>
            Gets a KeyframeList by name.  Returns null if none is found
            </summary>
            <param name="keyframeListName">Name of the KeyframeList to return.</param>
            <returns>Reference to the KeyframeList with the specified name.</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.DoubleInterpolator">
            <summary>
            Provides interpolation for doubles - used for interpolating between
            Keyframes in InstructionSets.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.IInterpolator`1">
            <summary>
            Generic interface for an interpolator.  These are used to interpolate
            Keyframes in InstructionSets.
            </summary>
            <typeparam name="T">The type that the Interpolator interpolates.</typeparam>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.IInterpolator">
            <summary>
            Base interface for interpolators - to be used in lists.
            </summary>
        </member>
        <member name="M:FlatRedBall.Instructions.Interpolation.IInterpolator`1.Interpolate(`0,`0,System.Double)">
            <summary>
            Interpolates between the first two arguments using the third as the interpolation value.
            </summary>
            <param name="start">The first value to use in interpolation.</param>
            <param name="end">The second value to use in interpolation.</param>
            <param name="interpolationValue">The interpolation value - should be between 0 and 1.</param>
            <returns>The result of the interpolation.</returns>
        </member>
        <member name="M:FlatRedBall.Instructions.Interpolation.DoubleInterpolator.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Interolates between the two argument doubles using the interpolation value.
            </summary>
            <param name="start">The first or starting value.</param>
            <param name="end">The end value.</param>
            <param name="interpolationValue">A value between 0 and 1 that determines how
            the values are interpolated.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.FloatAngleInterpolator">
            <summary>
            An interpolator which interpolates between angle floats.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.FloatInterpolator">
            <summary>
            An IInterpolator which can interpolate float values.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.IntInterpolator">
            <summary>
            An IInterpolator which can interpolate integer values.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Interpolation.LongInterpolator">
            <summary>
            Provides interplation methods for longs.
            </summary>
        </member>
        <member name="P:FlatRedBall.Instructions.KeyframeList.Item(System.String)">
            <summary>
            Gets a KeyframeList by name.  Returns null if none is found
            </summary>
            <param name="keyframeName">Name of the KeyframeList to return.</param>
            <returns>Reference to the KeyframeList with the specified name.</returns>
        </member>
        <member name="T:FlatRedBall.Instructions.MethodInstruction">
            <summary>
            Base abstract class for the generic MethodInstruction class.
            </summary>
            <remarks>
            This class is provided to support lists of MethodInstructions.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.MethodInstruction`1">
            <summary>
            Generic Instruction class which calls a method when executed.
            </summary>
            <typeparam name="T">The type of the object which contains the method to be called.</typeparam>
        </member>
        <member name="F:FlatRedBall.Instructions.Pause.UnpauseInstruction`1.mCreationTime">
            <summary>
            The game time when the instruction was created.  This is compared to the
            TimeManager's CurrentTime property when Execute is called to delay the instructions
            by the appropriate amount of time.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.LateBinder`1">
            <summary>
            Provides a simple interface to late bind a class.
            </summary>
            <remarks>The first time you attempt to get or set a property, it will dynamically generate the get and/or set 
            methods and cache them internally.  Subsequent gets uses the dynamic methods without having to query the type's 
            meta data.</remarks>
        </member>
        <member name="M:FlatRedBall.Instructions.Reflection.LateBinder`1.SetProperty``1(System.Object,System.String,``0)">
            <summary>
            Sets the supplied property on the supplied target
            </summary>
            <typeparam name="K">the type of the value</typeparam>
        </member>
        <member name="M:FlatRedBall.Instructions.Reflection.LateBinder`1.GetProperty``1(`0,System.String)">
            <summary>
            Gets  the supplied property on the supplied target
            </summary>
            <typeparam name="K">The type of the property being returned</typeparam>
        </member>
        <member name="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Target">
            <summary>
            The instance that this binder operates on by default
            </summary>
            <remarks>This can be overridden by the caller explicitly passing a target to the indexer</remarks>
        </member>
        <member name="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Item(System.String)">
            <summary>
            Gets or Sets the supplied property on the contained <seealso cref="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Instance"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws if the contained Instance is null.</exception>
        </member>
        <member name="P:FlatRedBall.Instructions.Reflection.LateBinder`1.Item(`0,System.String)">
            <summary>
            Gets or Sets the supplied property on the supplied target
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.LateBinder`1.DynamicMethodCompiler">
            <summary>
            provides helper functions for late binding a class
            </summary>
            <remarks>
            Class found here:
            http://www.codeproject.com/useritems/Dynamic_Code_Generation.asp
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.Operator">
            <summary>
            Enumeration used to define relationships between two values.  Used in MemberCondition.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.MemberCondition">
            <summary>
            Base class for the generic MemberCondition class provided for List storage.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.MemberCondition`2">
            <summary>
            Class which can be used to query the relationship of a member relative to a value.  This
            can be used in scripting and trigger data.
            </summary>
            <typeparam name="ObjectType">The type of the object containing the property to compare.</typeparam>
            <typeparam name="PropertyType">The type of the property to compare.</typeparam>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.PropertyCollection">
            <summary>
            Stores a list of properties and values for those properties (PropertyValuePair)
            </summary>
            <remarks>
            This class can be used to either store states of objects or abstract the setting of states.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.TypedMemberBase">
            <summary>
            Base class for the generic TypedMember class.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.Reflection.TypedMember`1">
            <summary>
            Class containing information about a member which can tell if two instances have
            identical members.
            </summary>
            <typeparam name="T">The type of the member.</typeparam>
        </member>
        <member name="T:FlatRedBall.Instructions.ScriptedAnimations.AnimationSequence">
            <summary>
            A list of TimedKeyframeLists which represents an Animation which can be
            played.
            </summary>
            <remarks>
            This class interfaces with the InstructionSetSaveList class when saving/loading.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.TimedKeyframeList">
            <summary>
            A list of timed keyframes which can be used to play an animation.
            </summary>
        </member>
        <member name="T:FlatRedBall.Instructions.StaticMethodInstruction">
            <summary>
            Instruction which calls a Static class' method.
            </summary>
            <remarks>
            This class must be used instead of 
            FlatRedBall.Instructions.MethodInstruction
            because MethodInstruction takes a reference
            to an instance of the object containing the method
            to call.  If the object is a static class then the
            compiler will complain about static objects being used
            as arguments to methods.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Instructions.VelocityValueRelationship">
            <summary>
            Stores the related state, velocity, and acceleration values.
            </summary>
            <remarks>
            This is used when interpolating instructions.
            </remarks>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CachedCsvReader">
            <summary>
            Represents a reader that provides fast, cached, dynamic access to CSV data.
            </summary>
            <remarks>The number of records is limited to <see cref="F:System.Int32.MaxValue"/> - 1.</remarks>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.  
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultBufferSize">
            <summary>
            Defines the default buffer size.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultDelimiter">
            <summary>
            Defines the default delimiter character separating each field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultQuote">
            <summary>
            Defines the default quote character wrapping every field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultEscape">
            <summary>
            Defines the default escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DefaultComment">
            <summary>
            Defines the default comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldHeaderComparer">
            <summary>
            Contains the field header comparer.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._reader">
            <summary>
            Contains the <see cref="T:TextReader"/> pointing to the CSV file.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._bufferSize">
            <summary>
            Contains the buffer size.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._comment">
            <summary>
            Contains the comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._escape">
            <summary>
            Contains the escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._delimiter">
            <summary>
            Contains the delimiter character separating each field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._quote">
            <summary>
            Contains the quotation character wrapping every field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._trimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._hasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._defaultParseErrorAction">
            <summary>
            Contains the default action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._missingFieldAction">
            <summary>
            Contains the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._supportsMultiline">
            <summary>
            Indicates if the reader supports multiline.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._skipEmptyLines">
            <summary>
            Indicates if the reader will skip empty lines.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._initialized">
            <summary>
            Indicates if the class is initialized.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldHeaders">
            <summary>
            Contains the field headers.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldHeaderIndexes">
            <summary>
            Contains the dictionary of field indexes by header. The key is the field name and the value is its index.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._currentRecordIndex">
            <summary>
            Contains the current record index in the CSV file.
            A value of <see cref="M:Int32.MinValue"/> means that the reader has not been initialized yet.
            Otherwise, a negative value means that no record has been read yet.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._nextFieldStart">
            <summary>
            Contains the starting position of the next unread field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._nextFieldIndex">
            <summary>
            Contains the index of the next unread field.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fields">
            <summary>
            Contains the array of the field values for the current record.
            A null value indicates that the field have not been parsed.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._fieldCount">
            <summary>
            Contains the maximum number of fields to retrieve for each record.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._buffer">
            <summary>
            Contains the read buffer.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._bufferLength">
            <summary>
            Contains the current read buffer length.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._eof">
            <summary>
            Indicates if the end of the reader has been reached.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._firstRecordInCache">
            <summary>
            Indicates if the first record is in cache.
            This can happen when initializing a reader with no headers
            because one record must be read to get the field count automatically
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._missingFieldsFlag">
            <summary>
            Indicates if fields are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.OnParseError(FlatRedBall.IO.Csv.ParseErrorEventArgs)">
            <summary>
            Raises the <see cref="M:ParseError"/> event.
            </summary>
            <param name="e">The <see cref="T:FlatRedBall.IO.Csv.ParseErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.EnsureInitialize">
            <summary>
            Ensures that the reader is initialized.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the field index for the provided header.
            </summary>
            <param name="header">The header to look for.</param>
            <returns>The field index for the provided header. -1 if not found.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[])">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[],System.Int32)">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> is les than zero or is equal to or greater than the length <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetCurrentRawData">
            <summary>
            Gets the current raw CSV data.
            </summary>
            <remarks>Used for exception handling purpose.</remarks>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns><see langword="true"/> if <paramref name="c"/> is white space; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ParseNewLine(System.Int32@)">
            <summary>
            Parses a new line delimiter.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if a new line delimiter was found; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.IsNewLine(System.Int32)">
            <summary>
            Determines whether the character at the specified position is a new line delimiter.
            </summary>
            <param name="pos">The position of the character to verify.</param>
            <returns>
            	<see langword="true"/> if the character at the specified position is a new line delimiter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadBuffer">
            <summary>
            Fills the buffer with data from the reader.
            </summary>
            <returns><see langword="true"/> if data was successfully read; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadField(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads the field at the specified index.
            Any unread fields with an inferior index will also be read as part of the required parsing.
            </summary>
            <param name="field">The field index.</param>
            <param name="initializing">Indicates if the reader is currently initializing.</param>
            <param name="discardValue">Indicates if the value(s) are discarded.</param>
            <returns>
            The field at the specified index. 
            A <see langword="null"/> indicates that an error occured or that the last field has been reached during initialization.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="field"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	There is no current record.
            </exception>
            <exception cref="T:FlatRedBall.IO.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:FlatRedBall.IO.Csv.MalformedCsvException">
            	The CSV data appears to be malformed.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadNextRecord">
            <summary>
            Reads the next record.
            </summary>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.SkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            Skips empty and commented lines.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.DoSkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            <para>Worker method.</para>
            <para>Skips empty and commented lines.</para>
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.SkipWhiteSpaces(System.Int32@)">
            <summary>
            Skips whitespace characters.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.SkipToNextLine(System.Int32@)">
            <summary>
            Skips ahead to the next NewLine character.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.HandleParseError(System.Exception,System.Int32@)">
            <summary>
            Handles a parsing error.
            </summary>
            <param name="error">The parsing error that occured.</param>
            <param name="pos">The current position in the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.HandleMissingField(System.String,System.Int32,System.Int32@)">
            <summary>
            Handles a missing field error.
            </summary>
            <param name="value">The partially parsed value, if available.</param>
            <param name="fieldIndex">The missing field index.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <returns>
            The resulting value according to <see cref="M:MissingFieldAction"/>.
            If the action is set to <see cref="T:MissingFieldAction.TreatAsParseError"/>,
            then the parse error will be handled according to <see cref="P:FlatRedBall.IO.Csv.CsvReader.DefaultParseErrorAction"/>.
            </returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.ValidateDataReader(FlatRedBall.IO.Csv.CsvReader.DataReaderValidations)">
            <summary>
            Validates the state of the data reader.
            </summary>
            <param name="validations">The validations to accomplish.</param>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is invalid when the reader is closed.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CopyFieldToArray(System.Int32,System.Int64,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the value of the specified field to an array.
            </summary>
            <param name="field">The index of the field.</param>
            <param name="fieldOffset">The offset in the field value.</param>
            <param name="destinationArray">The destination array where the field value will be copied.</param>
            <param name="destinationOffset">The destination array offset.</param>
            <param name="length">The number of characters to copy from the field value.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._allocStack">
            <summary>
            Contains the stack when the object was allocated.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._isDisposed">
            <summary>
            Contains the disposed status flag.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader._lock">
            <summary>
            Contains the locking object for multi-threading purpose.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Disposed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of, and if it has, throws an <see cref="T:System.ComponentModel.ObjectDisposedException"/>; otherwise, does nothing.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
            <remarks>
            	Derived classes should call this method at the start of all methods and properties that should not be accessed after a call to <see cref="M:Dispose()"/>.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            	Calls <see cref="M:Dispose(Boolean)"/> with the disposing parameter set to <see langword="true"/> to free unmanaged and managed resources.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the instance is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="E:FlatRedBall.IO.Csv.CsvReader.ParseError">
            <summary>
            Occurs when there is an error while parsing the CSV stream.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out.
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field.
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Delimiter">
            <summary>
            Gets the delimiter character separating each field.
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Quote">
            <summary>
            Gets the quotation character wrapping every field.
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.TrimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.BufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields.
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines.
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.FieldCount">
            <summary>
            Gets the maximum number of fields to retrieve for each record.
            </summary>
            <value>The maximum number of fields to retrieve for each record.</value>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.Int32,System.String)">
            <summary>
            Gets the field with the specified name and record position. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name and record position.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets the field at the specified index and record position.
            </summary>
            <value>
            The field at the specified index and record position.
            A <see langword="null"/> is returned if the field cannot be found for the record.
            </value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.String)">
            <summary>
            Gets the field with the specified name. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="E:FlatRedBall.IO.Csv.CsvReader.Disposed">
            <summary>
            Occurs when the instance is disposed of.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.IsDisposed">
            <summary>
            Gets a value indicating whether the instance has been disposed of.
            </summary>
            <value>
            	<see langword="true"/> if the instance has been disposed of; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations">
            <summary>
            Defines the data reader validations.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations.IsInitialized">
            <summary>
            Validate that the data reader is initialized.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.DataReaderValidations.IsNotClosed">
            <summary>
            Validate that the data reader is not closed.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator">
            <summary>
            Supports a simple iteration over the records of a <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator._reader">
            <summary>
            Contains the enumerated <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator._current">
            <summary>
            Contains the current record.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.#ctor(FlatRedBall.IO.Csv.CsvReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RecordEnumerator"/> class.
            </summary>
            <param name="reader">The <see cref="T:CsvReader"/> to iterate over.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next record of the CSV.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next record, <see langword="false"/> if the enumerator has passed the end of the CSV.</returns>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first record in the CSV.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CsvReader.RecordEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader._records">
            <summary>
            Contains the cached records.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader._currentRecordIndex">
            <summary>
            Contains the current record index (inside the cached records array).
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader._readingStream">
            <summary>
            Indicates if a new record is being read from the CSV stream.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.ReadToEnd">
            <summary>
            Reads the CSV stream from the current position to the end of the stream.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.MoveToStart">
            <summary>
            Moves before the first record.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.MoveToLastCachedRecord">
            <summary>
            Moves to the last record read so far.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CachedCsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CachedCsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CachedCsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:FlatRedBall.IO.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CachedCsvReader.CsvBindingList">
            <summary>
            Represents a binding list wrapper for a CSV reader.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvBindingList._csv">
            <summary>
            Contains the linked CSV reader.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvBindingList._count">
            <summary>
            Contains the cached record count.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvBindingList._properties">
            <summary>
            Contains the cached property descriptors.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvBindingList._sort">
            <summary>
            Contains the current sort property.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvBindingList._direction">
            <summary>
            Contains the current sort direction.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.CsvBindingList.#ctor(FlatRedBall.IO.Csv.CachedCsvReader)">
            <summary>
            Initializes a new instance of the CsvBindingList class.
            </summary>
            <param name="csv"></param>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CachedCsvReader.CsvPropertyDescriptor">
            <summary>
            Represents a CSV field property descriptor.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvPropertyDescriptor._index">
            <summary>
            Contains the field index.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.CsvPropertyDescriptor.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the CsvPropertyDescriptor class.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="index">The field index.</param>
        </member>
        <member name="P:FlatRedBall.IO.Csv.CachedCsvReader.CsvPropertyDescriptor.Index">
            <summary>
            Gets the field index.
            </summary>
            <value>The field index.</value>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CachedCsvReader.CsvRecordComparer">
            <summary>
            Represents a CSV record comparer.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvRecordComparer._field">
            <summary>
            Contains the field index of the values to compare.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.CachedCsvReader.CsvRecordComparer._direction">
            <summary>
            Contains the sort direction.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CachedCsvReader.CsvRecordComparer.#ctor(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the CsvRecordComparer class.
            </summary>
            <param name="field">The field index of the values to compare.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="T:FlatRedBall.IO.Csv.CsvFileManager">
            <summary>
            Class providing methods for interacting with .CSV spreadsheet files.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.CsvFileManager.Serialize``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Saves a Generic List to a CSV formatted file
            </summary>
            <param name="list">The list to save</param>
             <param name="filename">The destination file</param>
        </member>
        <member name="T:FlatRedBall.IO.Csv.ParseErrorEventArgs">
            <summary>
            Provides data for the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorEventArgs._error">
            <summary>
            Contains the error that occured.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorEventArgs._action">
            <summary>
            Contains the action to take.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.ParseErrorEventArgs.#ctor(System.Exception,FlatRedBall.IO.Csv.ParseErrorAction)">
            <summary>
            Initializes a new instance of the ParseErrorEventArgs class.
            </summary>
            <param name="error">The error that occured.</param>
            <param name="defaultAction">The default action to take.</param>
        </member>
        <member name="P:FlatRedBall.IO.Csv.ParseErrorEventArgs.Error">
            <summary>
            Gets the error that occured.
            </summary>
            <value>The error that occured.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.ParseErrorEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
            <value>The action to take.</value>
        </member>
        <member name="T:FlatRedBall.IO.Csv.MalformedCsvException">
            <summary>
            Represents the exception that is thrown when a CSV file is malformed.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MalformedCsvException._message">
            <summary>
            Contains the message that describes the error.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MalformedCsvException._rawData">
            <summary>
            Contains the raw data when the error occured.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MalformedCsvException._currentFieldIndex">
            <summary>
            Contains the current field index.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MalformedCsvException._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MalformedCsvException._currentPosition">
            <summary>
            Contains the current position in the raw data.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MalformedCsvException.#ctor">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MalformedCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MalformedCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MalformedCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MalformedCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MalformedCsvException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:FlatRedBall.IO.Csv.MalformedCsvException.RawData">
            <summary>
            Gets the raw data when the error occured.
            </summary>
            <value>The raw data when the error occured.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.MalformedCsvException.CurrentPosition">
            <summary>
            Gets the current position in the raw data.
            </summary>
            <value>The current position in the raw data.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.MalformedCsvException.CurrentRecordIndex">
            <summary>
            Gets the current record index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.MalformedCsvException.CurrentFieldIndex">
            <summary>
            Gets the current field index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:FlatRedBall.IO.Csv.MalformedCsvException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception.</value>
        </member>
        <member name="T:FlatRedBall.IO.Csv.MissingFieldCsvException">
            <summary>
            Represents the exception that is thrown when a there is a missing field in a record of the CSV file.
            </summary>
            <remarks>
            MissingFieldException would have been a better name, but there is already a <see cref="T:System.MissingFieldException"/>.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MissingFieldCsvException.#ctor">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MissingFieldCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:FlatRedBall.IO.Csv.MissingFieldCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:FlatRedBall.IO.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:FlatRedBall.IO.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.Resources.ExceptionMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.BufferSizeTooSmall">
            <summary>
              Looks up a localized string similar to Buffer size must be 1 or more..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.CannotMovePreviousRecordInForwardOnly">
            <summary>
              Looks up a localized string similar to Cannot move to a previous record in forward-only mode..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.CannotReadRecordAtIndex">
            <summary>
              Looks up a localized string similar to Cannot read record at index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.EnumerationFinishedOrNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has either not started or has already finished..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.EnumerationVersionCheckFailed">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.FieldHeaderNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field header not found..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.FieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Field index must be included in [0, FieldCount[. Specified field index was : &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.MalformedCsvException">
            <summary>
              Looks up a localized string similar to The CSV appears to be corrupt near record &apos;{0}&apos; field &apos;{1} at position &apos;{2}&apos;. Current raw data : &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.MissingFieldActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported missing field action..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.NoCurrentRecord">
            <summary>
              Looks up a localized string similar to No current record..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.NoHeaders">
            <summary>
              Looks up a localized string similar to The CSV does not have headers (CsvReader.HasHeaders property is false)..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.NotEnoughSpaceInArray">
            <summary>
              Looks up a localized string similar to The number of fields in the record is greater than the available space from index to the end of the destination array..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.ParseErrorActionInvalidInsideParseErrorEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid ParseErrorAction while inside a ParseError event..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.ParseErrorActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported ParseErrorAction..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.ReaderClosed">
            <summary>
              Looks up a localized string similar to This operation is invalid when the reader is closed..
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.Csv.Resources.ExceptionMessage.RecordIndexLessThanZero">
            <summary>
              Looks up a localized string similar to Record index must be 0 or more..
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.Csv.RuntimeCsvRepresentation">
            <summary>
            Represents the raw data loaded from a csv file.  This is
            used if the data must be processed or converted by hand to
            other object types.
            </summary>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.FileExists(System.String)">
            <summary>
            Returns whether the file exists considering the relative directory.
            </summary>
            <param name="fileName">The file to search for.</param>
            <returns>Whether the argument file exists.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.FindFileInDirectory(System.String,System.String)">
            <summary>
            Searches the passed directory and all subdirectories for the passed file.
            </summary>
            <param name="fileToFind">The name of the file including extension.</param>
            <param name="directory">The directory to search in, including all subdirectories.</param>
            <returns>The full path of the first file found matching the name, or an empty string if none is found.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.FindFileInDirectory(System.String)">
            <summary>
            Searches the executable's director and all subdirectories for the passed file.
            </summary>
            <param name="fileToFind">The name of the file which may or may not include an extension.</param>
            <returns>The full path of the first file found matching the name, or an empty string if none is found</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetExtension(System.String)">
            <summary>
            Returns the extension in a filename.
            </summary>
            <remarks>
            The extension returned will not contain a period.
            
            <para>
            <code>
            // this code will return a string containing "png", not ".png"
            FileManager.GetExtension(@"FolderName/myImage.png");
            </code>
            </para>
            </remarks>
            <param name="fileName">The filename.</param>
            <returns>Returns the extension or an empty string if no period is found in the filename.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetAllFilesInDirectory(System.String)">
            <summary>
            Returns a List containing all of the files found in a particular directory and its subdirectories.
            </summary>
            <param name="directory">The directory to search in.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetAllFilesInDirectory(System.String,System.String)">
            <summary>
            Returns a List containing all files which match the fileType argument which are 
            in the directory argument or a subfolder.  This recurs, returning all files.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.GetAllFilesInDirectory(System.String,System.String,System.Int32)">
            <summary>
            Returns a List containing all files which match the fileType argument which are within
            the depthToSearch folder range relative to the directory argument.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <param name="depthToSearch">The depth to search through.  If the depthToSearch
            is 0, only the argument directory will be searched.</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.IsGraphicFile(System.String)">
            <summary>
            Determines whether a particular file is a graphical file that can be loaded by the FRB Engine.
            </summary>
            <remarks>
            This method does conducts the simple test of looking at the extension of the filename.  If the extension inaccurately
            represents the actual format of the file, the method may also inaccurately report whether the file is graphical.
            </remarks>
            <param name="fileToTest">The file name to test.</param>
            <returns>Whether the file is a graphic file.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.RemoveExtension(System.String)">
            <summary>
            Returns the fileName without an extension, or makes no changes if fileName has no extension.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The file name with extension removed if an extension existed.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.RemovePath(System.String@)">
            <summary>
            Modifies the fileName by removing its path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name to change</param>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.RemovePath(System.String)">
            <summary>
            Returns the fileName without a path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The modified fileName if a path is found.</returns>
        </member>
        <member name="M:FlatRedBall.IO.FileManager.ResetRelativeToCurrentDirectory">
            <summary>
            Sets the relative directory to the current directory.
            </summary>
            <remarks>
            The current directory is not necessarily the same as the directory of the .exe.  If the 
            .exe is called from a different location (such as the command line in a different folder),
            the current directory will differ.
            </remarks>
        </member>
        <member name="P:FlatRedBall.IO.FileManager.RelativeDirectory">
            <summary>
            The directory that FlatRedBall will use when loading assets.  Defaults to the application's directory.
            </summary>
        </member>
        <member name="P:FlatRedBall.IO.FileManager.UserApplicationData">
            <summary>
            Gets the path to the user specific application data directory.
            </summary>
            <remarks>If your game/application will be writing anything to the file system, you will want 
            to do so somewhere in this directory.  The reason for this is because you cannot anticipate
            whether the user will have the needed permissions to write to the directory where the 
            executable lives.</remarks>
            <example>C:\Documents and Settings\&lt;username&gt;\Application Data</example> 
        </member>
        <member name="T:FlatRedBall.IO.PaletteInfo">
            <summary>
            Contains an indexed array of Colors to be used by images with ColorType 3 and possibly ColorTypes
            2 and 6.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.RGB">
            <summary>
            Simple struct used to hold sample values.
            </summary>
        </member>
        <member name="T:FlatRedBall.IO.GifLoader">
            <summary>
            Class responsible for loading GIF files.
            </summary>
            <remarks>
            For information, see:
            http://www.fileformat.info/format/gif/
            </remarks>
        </member>
        <member name="T:FlatRedBall.IO.Gif.ImageDataList">
            <summary>
            A list of ImageDatas with timing information on each element.
            </summary>
            <remarks>
            This class is used when loading GIF files to an AnimationChain.
            </remarks>
        </member>
        <member name="M:FlatRedBall.IO.Remote.FtpManager.SaveFile(System.String,System.String,System.String,System.String)">
            <summary>
            Downloads a file locally
            </summary>
            <param name="url">The remote file to download.  For example: "ftp://ftp.flatredball.com/flatredball.com/";</param>
            <param name="localFile">The local file name to download to</param>
            <param name="userName">FTP username</param>
            <param name="password">FTP password</param>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.BodySpriteState">
            <summary>
            A Save class storing a BodySprite.
            </summary>
            <remarks>
            This class is used in the SpriteRigSave class.
            </remarks>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.GridRelativeTexture">
            <summary>
            A Texture2D and relative integer position.
            </summary>
            <remarks>
            This struct is generally used to detect patterns on FlatRedBall.ManagedSpriteGroups.SpriteGrids.
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.GridRelativeTexture.#ctor(System.Int32,System.Int32,FlatRedBall.Texture2D)">
            <summary>
            Creates a new GridRelativeTexture.
            </summary>
            <param name="x">The relative X position to assign.</param>
            <param name="y">The relative Y position to assign.</param>
            <param name="texture2D">The Texture2D reference to assign.</param>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.JointState">
            <summary>
            An XML-Serializbale class representing the state of a Joint.  Used in
            the SpriteRigSave class.
            </summary>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.Pose">
            <summary>
            A snapshot of a set of rotations, scales, and positions of Sprites in a SpriteRig.
            </summary>
            <remarks>
            These poses are used as keyframes for SpriteRig animation.  SpriteRigs interpolate
            between poses to create fluid animation.
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.Pose.#ctor">
            <summary>
            Creates a new Pose with an empty but instantiated jointStateArray and bodySpriteStateArray.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.Pose.#ctor(System.String,System.Collections.Generic.List{FlatRedBall.ManagedSpriteGroups.JointState},System.Collections.Generic.List{FlatRedBall.ManagedSpriteGroups.BodySpriteState},System.Double)">
            <summary>
            Creates a new Pose with the argument name, jointStateArray, bodySpriteStateArray,
            and time (in milliseconds) from the beginning of the PoseChain.
            </summary>
            <param name="name">Name of the pose.</param>
            <param name="jointStateArray">Reference to the JointStateArray to use.</param>
            <param name="bodySpriteStateArray">Reference to the BodySpriteStateArray to use.</param>
            <param name="time">Time in milliseconds that the Pose should be set from the beginning of the PoseChain.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.Pose.DiffersFrom(FlatRedBall.ManagedSpriteGroups.Pose)">
            <summary>
            Determines whether this instance differs from the argument Pose.
            </summary>
            <remarks>
            This only tests the stored BodySpriteStates and JointStates.  This method
            does not compare the time and name variables.
            </remarks>
            <param name="poseToCompareAgainst">The Pose to compare against.</param>
            <returns>Whether this instance and the argument BodySpriteStates or PoseStates differ.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.Pose.Set(FlatRedBall.ManagedSpriteGroups.Pose)">
            <summary>
            Set's a particular Pose's poseStateArray, bodySpriteStateArray, and time to the passed argument's corresponding variables.
            </summary>
            <remarks>
            This method does not change the name of the Pose.  It will remain the same after the method is called.
            </remarks>
            <param name="poseToSetTo">The pose from which to copy the information.  This is a shallow copy - members are not cloned, but 
            rather references are copied.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.Pose.Clone">
            <summary>
            Creates a clone of this instance.  
            </summary>
            <remarks>
            The cloned Pose will have its own JointStateArray and BodySpriteState array, but each will
            have the same values.
            </remarks>
            <returns>Reference to the cloned Pose.</returns>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.Pose.Name">
            <summary>
            The name of the Pose.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.Pose.JointStates">
            <summary>
            The state of all of the joints (rotation and relative position) for this pose.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.Pose.BodySpriteStates">
            <summary>
            The state of all of the body Sprites (relative position, scale, and frame) for this pose.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.Pose.Time">
            <summary>
            The number of seconds that the pose should be executed from the beginning of the PoseChain
            </summary>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.PoseChain">
            <summary>
            Represents a collection of Poses which can be interpolated between to create
            fluid SpriteRig animation.
            </summary>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.SpriteFrameCustomBehavior">
            <summary>
            Delegate for methods which can be assigned to the SpriteFrame
            for every-frame custom logic.
            </summary>
            <remarks>
            <seealso cref="E:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CustomBehavior"/>
            </remarks>
            <param name="spriteFrame">The SpriteFrame on which the logic should execute.</param>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.SpriteFrame">
            <summary>
            Visible object with static-width borders.
            </summary>
            <remarks>
            SpriteFrames are often used for creating UI because their static-width
            borders make single-texture UI entities easy to construct and manage.
            <para>
            SpriteFrames achieve a static-width border by 
            
            </para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.#ctor">
            <summary>
            Constructs a new, empty SpriteFrame.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.#ctor(FlatRedBall.Texture2D,FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides)">
            <summary>
            Constructs a new SpriteFrame using the argument texture and border sides.
            </summary>
            <remarks>
            SpriteFrames are usually created through the SpriteManager's AddSpriteFrame method.
            <seealso cref="M:FlatRedBall.SpriteManager.AddSpriteFrame(FlatRedBall.Texture2D,FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides)"/>
            </remarks>
            <param name="textureToUse">The texture that the SpriteFrame will display.</param>
            <param name="borders">Which sides should be used by the SpriteFrame.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.#ctor(FlatRedBall.Texture2D,FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides,FlatRedBall.Graphics.Layer)">
            <summary>
            Constructs a new SpriteFrame using the argument texture, border sides, and Layer.
            </summary>
            <param name="textureToUse">The texture that the SpriteFrame will display.</param>
            <param name="borders">Which sides should be used by the SpriteFrame.</param>
            <param name="layerToAddTo">The Layer that the SpriteFrame will be drawn on.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Clone">
            <summary>
            Creates a copy of the SpriteFrame instance.
            </summary>
            <remarks>
            The cloned SpriteFrame will not belong to any of the lists that the original does.
            Since it will not be added to the SpriteManager it will not be drawn and managed.
            To add the SpriteFrame to the engine, call SpriteManager.AddSpriteFrame passing
            the newly created SpriteFrame as the argument.
            <seealso cref="M:FlatRedBall.SpriteManager.AddSpriteFrame(FlatRedBall.ManagedSpriteGroups.SpriteFrame)"/>
            </remarks>
            <returns>The newly-created SpriteFrame.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.DoesCameraRelativeRayIntersect2D(System.Single,System.Single,System.Single,FlatRedBall.Camera)">
            <summary>
            Returns whether a ray starting at the argument Camera's position and travelling through the
            point relative to the Camera specified by the arguments intersects with this instance.
            </summary>
            <remarks>
            This method does not take the camera's rotation into consideration when calculating the ray.
            </remarks>
            <param name="cameraRelativeX">The X position relative to the argument Camera.</param>
            <param name="cameraRelativeY">The Y position relative to the argument Camera.</param>
            <param name="cameraRelativeZ">The Z position relative to the argument Camera.</param>
            <param name="camera">The camera to use for the intersection test.</param>
            <returns>Whether the ray intersects the SpriteFrame.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.IsSpriteComponentOfThis(FlatRedBall.Sprite)">
            <summary>
            Returns whether the argument Sprite is a Sprite used by this instance.
            </summary>
            <param name="sprite">The Sprite to check.</param>
            <returns>Whether the argument Sprite is a component of this.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Pause(FlatRedBall.Instructions.InstructionList)">
            <summary>
            Stops all automatic behavior and stores the necessary instructions to 
            resume activity in the argument InstructionList.
            </summary>
            <param name="instructions">The List to store instructions which are executed to
            resume activity.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ToString">
            <summary>
            Returns a string with information about this instance.
            </summary>
            <returns>The string containing information about this instance.</returns>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.UpdateInternalSpriteNames">
            <summary>
            Sets the contained DynamicSpriteFrame to help identify SpriteFrame membership and side.
            </summary>
            <remarks>
            If the SpriteFrame's name is "spriteFrame1", each side will have its name be
            the SpriteFrame's name with a suffix indicating the side that the Sprite represents.
            That is, the center Sprite would be named "spriteFrame1_center", the top
            would be "spriteFrame1_top", and so on.
            
            <para>This method can be used in debugging to help identify whether DynamicSprites belong
            to a SpriteFrame, and if so, which side they represent.  Otherwise, this
            method has no engine functionality.</para>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Manage">
            <summary>
            Performs the necessary every-frame management of the SpriteFrame.  This
            method is automatically called by the SpriteManager.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteFrame.RefreshBorders(FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides)">
            <summary>
            Updates the SpriteFrame borders.  This method is called automatically
            whenever the Borders property is changed.
            </summary>
            <param name="borderSides">The new BorderSides to use.</param>
        </member>
        <member name="E:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CustomBehavior">
            <summary>
            Every-frame automatically raised by the SpriteManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Alpha">
            <summary>
            Controls the SpriteFrame's transparency.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.AlphaRate">
            <summary>
            The rate of change of the alpha component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Red">
            <summary>
            The red value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Green">
            <summary>
            The green value to use with the ColorOperation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Blue">
            <summary>
            The blue value to use with the color operation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.RedRate">
            <summary>
            The rate of change of the red component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.GreenRate">
            <summary>
            The rate of change of the green component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BlueRate">
            <summary>
            The rate of change of the blue component in units per second.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ColorOperation">
            <summary>
            The color operation to perform using the color component values and 
            Texture (if available).
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BlendOperation">
            <summary>
            The blend operation to perform using the alpha component value and
            Texture (if available).
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Animate">
            <summary>
            Whether animation is currently turned on.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.AnimationChains">
            <summary>
            Gets all animations stored in this.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.AnimationSpeed">
            <summary>
            Gets and sets how fast AnimationChains will animate.  Default is 1.  A value
            of 2 will result in AnimationChains animating twice as fast.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentChain">
            <summary>
            Gets the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentChainIndex">
            <summary>
            Gets and sets the index of the current AnimationChain.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentChainName">
            <summary>
            Gets the current AnimationChain name or sets the current AnimationChain by name.
            </summary>
            <remarks>
            Setting this property will set the search the SpriteFrame for an AnimationChain with a
            matching name and set it as the current AnimationChain.
            </remarks>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CurrentFrameIndex">
            <summary>
            Gets and sets the current AnimationFrame index.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.JustChangedFrame">
            <summary>
            Gets whether the current AnimationFrame just changed this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.JustCycled">
            <summary>
            Gets whether the current AnimationChain just cycled (looped) this frame due to animation.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.UseAnimationRelativePosition">
            <summary>
            Whether the current AnimationFrame's relative position values (RelativeX and RelativeY) are applied
            when animating.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.LayerBelongingTo">
            <summary>
            The Layer that this SpriteFrame belongs to.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.TextureBorderWidth">
            <summary>
            The width of the border in texture coordinates.
            </summary>
            <remarks>
            This defines the section of the texture that should not stretch.  Increasing this value will
            show more of the texture on the outside border Sprites and less on the inside.
            </remarks>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.SpriteBorderWidth">
            <summary>
            The width of the border Sprites in world coordinates.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Borders">
            <summary>
            The borders that the SpriteFrame uses to display.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleX">
            <summary>
            The X size of the object.  Measured as the distance from the center of the SpriteFrame 
            to its left and right edges in world coordinates.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleY">
            <summary>
            The Y size of the SpriteFrame.  Measured as the distance from the center of the SpriteFrame 
            to its top or bottom edges in world coordinates.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleXVelocity">
            <summary>
            The rate of change of the ScaleX property in units per second.  Default 0.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.ScaleYVelocity">
            <summary>
            The rate of change of the ScaleY property in units per second.  Default 0.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Visible">
            <summary>
            Whether the SpriteFrame is drawn.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.Texture">
            <summary>
            The texture to be displayed by the SpriteFrame.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CursorSelectable">
            <summary>
            Whether the instance can be selected by the Cursor.
            </summary>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteFrame.CenterSprite">
            <summary>
            Gets the SpriteFrame's center Sprite.
            </summary>
            <remarks>
            This can be used to modify the SpriteFrame's appearance.
            </remarks>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides">
            <summary>
            Defines sides which can be combined to speicfy borders on SpriteFrames.
            </summary>
            <remarks>
            The most common combinations are BorderSides.All, 
            BorderSides.Left | BorderSides.Right, and BorderSides.Top | BorderSides.Bottom.
            </remarks>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.None">
            <summary>
            No border sides - the SpriteFrame will appear similar to a regular Sprite.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Top">
            <summary>
            Include a border on the top of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Bottom">
            <summary>
            Include a border on the bottom of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.TopBottom">
            <summary>
            Include a border on the top and bottom of the SpriteFrame.  This is equivalent to 
            BorderSides.Top | BorderSides.Bottom
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Left">
            <summary>
            Include a border on the left of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.Right">
            <summary>
            Include a border on the right of the SpriteFrame.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.LeftRight">
            <summary>
            Include a border on the left and right of the SpriteFrame.  This is equivalent to 
            BorderSides.Right | BorderSides.Left
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.TopLeftRight">
            <summary>
            Include a border on the top, left, and right of the SpriteFrame.  This is 
            equivalent to BorderSides.Left | BorderSides.Right | borderSides.Top.
            </summary>
        </member>
        <member name="F:FlatRedBall.ManagedSpriteGroups.SpriteFrame.BorderSides.All">
            <summary>
            Include borders on all sides of the SpriteFrame.  This is equivalent to 
            BorderSides.Right | BorderSides.Left | BorderSides.Top | BorderSides.Bottom.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteRig.Clone">
            <summary>
            Add clone method
            Author: Chakkapun Singto-ngam, Extend Interactive Co.,Ltd.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteRig.SetPose(System.Collections.Generic.List{FlatRedBall.ManagedSpriteGroups.JointState},System.Collections.Generic.List{FlatRedBall.ManagedSpriteGroups.BodySpriteState},System.Single,System.Boolean)">
            <summary>
            Sets the pose to the argument value over tweenLengthInSeconds time
            </summary>
            <remarks>
            This method sets the pose of the SpriteRig given a set of JointStates and BodySpriteStates.  If the
            pose is to be set immediately, then tweenLengthInSeconds should be 0.  If the pose should be transitioned
            to over a given amount of time, then tweenLengthInSeconds represents how long it should take to transition
            to the argument pose values.
            </remarks>
            <param name="jointStates">The joint states to transition to.</param>
            <param name="bodySpriteStates">The bodySpriteStates to transition to.</param>
            <param name="tweenLengthInSeconds">How much time to take to transition to these values.</param>
            <param name="useInstructions">Whether to use instructions or not.  Use instructions if you want the SpiteRig to stop after reaching
            its desired state.  Setting this to true allocates some memory, and this is unnecessary if you plan on setting a new pose chanin
            after this operation finishes.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteRig.AnimateSelf">
            <summary>
            Performs Animation logic.  This is called by the Manage() method.
            </summary>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.SpriteRig.StopAllAnimation">
            <summary>
            Stops all velocities related to animation and removes all instructions used for animation.  Does not set the animate property to false.
            </summary>
            <remarks>
            This function stops the following:
            <para> - Joint relative velocity</para>
            <para> - Joint RotationZVelocity</para>
            <para> - BodySprite scale velocity</para>
            <para> - BodySprite relative velocity</para>
            This function is used to stop animation activity on joints which may be ignored
            in the current PoseChain.  Simply setting animate to false will not necessarily stop
            all activity as this only stops animation affected by the current PoseChain.
            </remarks>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteRig.Animate">
            <summary>
            Gets and sets the bool determining whether the SpriteRig should animate.
            </summary>
            <remarks>
            Insert remarks here. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            </remarks>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteRig.Root">
            <summary>
            The Sprite which is often used to move the SpriteRig.  The root should
            be the topParent of any Sprite in the SpriteRig unless it is attached to
            another Sprite which is not part of the SpriteRig.
            </summary>
            <remarks>
            The root does not belong to either the mJoints or bodySprites SpriteArray;
            however, when the SpriteRig is saved, the root is included in the bodySprite array.
            </remarks>
        </member>
        <member name="P:FlatRedBall.ManagedSpriteGroups.SpriteRig.AnimationSpeed">
            <summary>
            Sets how fast the SpriteRig animates.
            </summary>
            <remarks>
            Setting the animationSpeed to 0 sets the animate bool to 0.  Setting the animationSpeed to any value
            except 0 sets the animate bool to true.
            <seealso cref="P:FlatRedBall.ManagedSpriteGroups.SpriteRig.Animate"/>
            </remarks>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.ChangeGrid(System.Single,System.Single)">
            <summary>
            Shifts the position of all textures in the TextureGrid.
            </summary>
            <param name="x">The distance along the x axis to shift the grid.</param>
            <param name="y">The distance along the y axis to shift the grid.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.ReduceGrid(System.Single,System.Single)">
            <summary>
            This "shrinks" the grid if its edges are the same as its baseTexture
            </summary>
            <remarks>
            To use the least amount of memory, TextureGrids only store non-baseTexture strips.
            If the ends of a horizontal strip are the baseTexture, then the strip should be contracted
            inward.  If an entire horizontal strip is the baseTexture, then it should be removed.
            
            Usually, tests should begin from a specific location, as it is usually called after the
            grid is painted.  This method will first check to see if the arguments are on the left or
            right side of a strip.  Then a loop will move inward as long as it continues to encounter
            the base texture.  Once it encounters a non-baseTexture, then it stops, and reduces the
            particular horizontal strip.
            
            If an entire strip is cleared and it is either the top or bottom strip, then it will
            be removed, and the strip above or below (depending on position) will be tested as well.
            If the strip is in the center (not the top or bottom), then it will be reduced, but cannot
            be removed.
            </remarks>
            <param name="yFloat">The y location in absolute coordinates to start the tests at.</param>
            <param name="xFloat">The x location in absolute coordinates to start the tests at.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.ReduceGridAtIndex(System.Int32,System.Int32)">
            <summary>
            This "shrinks" the grid if its edges are the same as its baseTexture
            </summary>
            <remarks>
            To use the least amount of memory, TextureGrids only store non-baseTexture strips.
            If the ends of a horizontal strip are the baseTexture, then the strip should be contracted
            inward.  If an entire horizontal strip is the baseTexture, then it should be removed.
            
            Usually, tests should begin from a specific location, as it is usually called after the
            grid is painted.  This method will first check to see if the arguments are on the left or
            right side of a strip.  Then a loop will move inward as long as it continues to encounter
            the base texture.  Once it encounters a non-baseTexture, then it stops, and reduces the
            particular horizontal strip.
            
            If an entire strip is cleared and it is either the top or bottom strip, then it will
            be removed, and the strip above or below (depending on position) will be tested as well.
            If the strip is in the center (not the top or bottom), then it will be reduced, but cannot
            be removed.
            </remarks>
            <param name="yOn">The y index start the tests at.</param>
            <param name="xOn">The x index to start the tests at.</param>
        </member>
        <member name="M:FlatRedBall.ManagedSpriteGroups.TextureGrid`1.TrimGrid">
            <summary>
            Checks the boundaries of the grid and removes any references to textures that match the base Texture2D.
            </summary>
            <remarks>
            This method is called automatically by the ReplaceTexture method so that the structure 
            stays as small as possible afterchanges have been made.  
            </remarks>
        </member>
        <member name="T:FlatRedBall.ManagedSpriteGroups.TextureLocation`1">
            <summary>
            Used to paint SpriteGrids or compare differences between two TextureGrids which can be used for undos.
            </summary>
            <typeparam name="T">The type contained in the TextureLocation.  Currently FlatRedBall uses
            Texture2D, FloatRectangle, and AnimationChain in SpriteGrids.</typeparam>
        </member>
        <member name="T:FlatRedBall.Math.Collision.CollisionEnumerations">
            <summary>
            A class storing enumerations for collisions.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.IScalable3D">
            <summary>
            An interface for objects which can be scaled on the X, Y, and Z axes.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Circle.DistanceTo(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Returns the distance from this to the argument Line.  If this and the Line
            are colliding, then the value will be 0 or negative.  The smallest the 
            return value can be is -this.Radius.
            </summary>
            <param name="line">The line to test distance from.</param>
            <returns>The distance from the circle to the argument line.  Will be 0 or
            negative if the two are colliding.</returns>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Circle.LastCollisionTangent">
            <summary>
            Returns the tangent (in other words the vector parallel with the surface) where the last collision occurred.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.FloatRectangle">
            <summary>
            A rectangle class using floats for its bounds.  
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.FloatRectangle.Default">
            <summary>
            A Rectangle with its top-left point at (0,0) with a width and height of 1.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.Line">
            <summary>
            Represents a segment with defined endpoints which can be used to
            graphically display lines or to perform segment collision.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Line.RelativePoint1">
            <summary>
            The first point used to define the line.  This point is relative to the Line's position and rotation.
            <remarks>
            If a line moves or rotates it will visibly change on screen and its collisions will be modified, but the 
            RelativePoint fields will not be modified.
            </remarks>
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Line.RelativePoint2">
            <summary>
            The second point used to define the line.  This point is relative to the Line's position and rotation.
            </summary>
            <remarks>
            If a line moves or rotates it will visibly change on screen and its collisions will be modifed, but the
            RelativePoint fields will not be modified.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.#ctor">
            <summary>
            Instantiates a new Line.
            </summary>
            <remarks>
            Lines created through this method will not be visible or managed.  To add management, add
            the line to the ShapeManager through the ShapeManager's AddLine method.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.AsSegment">
            <summary>
            Returns a Segment which represents the line.
            </summary>
            <returns>The Segment representing the line.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Returns whether this instance collides with the argument Circle.
            </summary>
            <param name="circle">The Circle to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Returns whether this instance collides with the argument AxisAlignedRectangle.
            </summary>
            <param name="rectangle">The AxisAlignedRectangle to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Returns whether this instance collides with the argument Line.
            </summary>
            <param name="line">The Line to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainst(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Returns whether this instance collides with the argument Polygon.
            </summary>
            <param name="polygon">The Polygon to test collision against.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.CollideAgainstMove(FlatRedBall.Math.Geometry.Circle,System.Single,System.Single)">
            <summary>
            Returns whether this instance collides with the argument Circle.  The two
            shapes are also repositioned so they do not collide after the method is called.
            </summary>
            <param name="circle">The Circle to test collision against.</param>
            <param name="thisMass">The mass of this instance.</param>
            <param name="otherMass">The mass of the other instance.</param>
            <returns>Whether a collision has occurred.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.ScaleBy(System.Single)">
            <summary>
            Scales the line by a specified amount
            </summary>
            <param name="scale">The scaling factor</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Line.SetFromAbsoluteEndpoints(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Sets the Line's Position to the average of the two given endpoints and
            it's RelativePoints to be the distance from the new Position to each of the given Vectors.
            </summary>
            <param name="endpoint1">The first endpoint for which to find the midpoint</param>
            <param name="endpoint2">The second endpoint for which to find the midpoint</param>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Line.LastCollisionPoint">
            <summary>
            Returns the absolute position of the last collision point.  This will not 
            necessarily return the intersection point of the line with the last collided
            shape.  It may return a point inside the shape.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Line.Visible">
            <summary>
            Gets or sets the visibility of this line segment
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Line.Color">
            <summary>
            Gets or sets the color of this line segment, when drawn
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Polygon.mPoints">
            <summary>
            The points relative to the center of the Polygon.  These
            define the shape and size of the Polygon.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Polygon.mCenterPoints">
            <summary>
            The midpoint Points used for collision.  These are updated in CollideAgainstMovePreview.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.CreateEquilateral(System.Int32,System.Single,System.Single)">
            <summary>
            Returns an equilateral shape of numberOfSides sides.
            </summary>
            <remarks>
            The newly-created Polygon is invisible and is not part of the ShapeManager.
            </remarks>
            <param name="numberOfSides">The number of sides of the Polygon.  Must be at least 3.</param>
            <param name="angleOfFirstPoint">The angle relative to the polygon of the first point.</param>
            <returns>The newly-created Polygon.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.ArePointsAdjacent(System.Int32,System.Int32)">
            <summary>
            Returns whether two indexes are adjacent.  This considers wrapping and duplicate
            points for closed polygons.
            </summary>
            <param name="firstIndex">The first index.</param>
            <param name="secondIndex">The second index</param>
            <returns>Whether the two points are adjacent.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.GetPointsInside(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Returns a Vector3 array storing all of the points belonging to this instance that are inside the argument
            Polygon.
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.GetPoint(System.Int32)">
            <summary>
            Returns the relative position of the point at the argument index.
            </summary>
            <param name="index">The index of the point to get.</param>
            <returns>The point at the argument index.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.Insert(System.Int32,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Inserts a new point at the given index.  The point will be inserted at object space.
            </summary>
            <remarks>
            This method recreates the internal point list so it is expensive to call repeatedly.
            </remarks>
            <param name="index">Index where the point should be inserted.</param>
            <param name="newPoint">The (object space) point to insert.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.IsPointInside(Microsoft.DirectX.Vector3@)">
            <summary>
            Returns whether the argument vector is in this polygon.
            </summary>
            <param name="vector">The position of the point</param>
            <returns>Whether the point is inside.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.ScaleBy(System.Double,System.Double)">
            <summary>
            Scales all points in object space.
            </summary>
            <param name="scaleX">Amount to scale by on the object's X axis.</param>
            <param name="scaleY">Amount to scale by on the object's Y axis.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
            Changes the position of the point at argument index, recalculates the bounding radius, and raises the
            OnPointsChanged event.
            </summary>
            <param name="index">The index of the point to change.</param>
            <param name="xRelativeToPolygonCenter">The new X position of the point in polygon object space.</param>
            <param name="yRelativeToPolygonCenter">The new Y position of the point in polygon object space.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Polygon.VectorFrom(FlatRedBall.Math.Geometry.Point3D)">
            <summary>
            Returns a vector from the argument vector to the closest point on this.
            </summary>
            <param name="vector">The point to start from.</param>
            <returns>A vector representing the distance from the argument vector to this.</returns>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Polygon.sThrowAwayInt">
            <summary>
            Returns a vector from the argument point to the closest point on this Polygon.
            </summary>
            <param name="x">The absolute X position of the point to begin the vector at.</param>
            <param name="y">The absolute Y position of the point to begin the vector at.</param>
            <returns>The shortest vector from the argument x,y to the Polygon.</returns>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Polygon.Points">
            <summary>
            The Position-relative points of the Polygon.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Polygon.LastMoveCollisionReposition">
            <summary>
            Reports the vector along which this polygon was moved along during the last
            CollideAgainstMove method.
            </summary>
            <remarks>
            This value is reset every time CollideAgainstMove is called whether there is a
            successful collision or not.  If there is no collision, this value is set to 
            Vector3.Zero.  If reactions to collisions such as physics are being implemented
            using this value, then the behavior should be tested and applied after every
            call to CollideAgainstMove.
            <para>
            This value is set on both the instance calling the CollideAgainstMove method
            as well as the argument.
            </para>
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Polygon.LastCollisionPoint">
            <summary>
            The absolute position where the last collision was detected in a CollieAgainst method.
            </summary>
        </member>
        <member name="E:FlatRedBall.Math.Geometry.Polygon.PointsChanged">
            <summary>
            Event raised when the Points property reference is reset or when the
            SetPoint method is called.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.PhysicsPolygon.CreatePointSet">
            <summary>
            Creates a set of points by removing duplicates
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.PhysicsPolygon.GetCollisionPointSet(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Returns the collision point set of this and another polygon.
            </summary>
            <param name="polygon">The other polygon.</param>
            <returns> The union of the set of all points in this polygon that lie inside the other polygon
            and the set of all points in the other polygon that le inside this one.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.PhysicsPolygon.GetCenterOfPoints(System.Collections.Generic.List{FlatRedBall.Math.Geometry.Point})">
            <summary>
            Finds the center of a point list.
            </summary>
            <param name="points">The points.</param>
            <returns>The center of the list of points.</returns>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Segment.Point1">
            <summary>
            The first point of the segment.  
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.Segment.Point2">
            <summary>
            The second point of the segment.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.#ctor(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point)">
            <summary>
            Creates a new Segment with the argument points as the endpoints.
            </summary>
            <param name="p1">The first Point.</param>
            <param name="p2">The second Point.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.DistanceTo(FlatRedBall.Math.Geometry.Point,Microsoft.DirectX.Vector3@)">
            <summary>
            Returns the distance to the argument point as well as
            the connectin Vector3 from the Point to this.
            </summary>
            <param name="point">The point to get the distance to.</param>
            <param name="connectingVector">The connecting vector from the argument Pointn to this.</param>
            <returns>The distance between this and the argument Point.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.GetLength">
            <summary>
            Returns the length of the segment.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.IsClosestPointOnEndpoint(FlatRedBall.Math.Geometry.Point@)">
            <summary>
            Determines whether the closest point on the segment lies on one of the endpoints.
            </summary>
            <param name="point">The point to test to.</param>
            <returns>Whether the closest point on this segment to the argument point lies on the endpoints.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.Intersects(FlatRedBall.Math.Geometry.Segment)">
            <summary>
            Determines whether this segment intersects the argument segment.
            </summary>
            <param name="s2">The segment to test for intersection.</param>
            <returns>Whether the segments intersect (whether they cross).</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.IntersectionPoint(FlatRedBall.Math.Geometry.Segment@,FlatRedBall.Math.Geometry.Point@)">
            <summary>
            Returns the point where this segment intersects the argument segment.
            </summary>
            <param name="s2">The segment to test for intersection.</param>
            <returns>The point where this segment intersects the
            argument segment.  If the two segments do not touch, the point
            will have both values be double.NAN.
            </returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.MoveBy(System.Single,System.Single)">
            <summary>
            Shifts the segment by moving both points by the argument x,y values.
            </summary>
            <param name="x">The number of units to shift the segment by on the x axis.</param>
            <param name="y">The number of units to shift the segment by on the y axis.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Segment.Normalize">
            <summary>
            Sets the length of the segment to 1 unit by moving the 2nd point.
            </summary>
            <remarks>
            If the segment has 0 length (the endpoints are equal), the method
            does not change the segment; length will remain 0.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Segment.Slope">
            <summary>
            Returns the geometric slope of the segment.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.Segment.YIntercept">
            <summary>
            Returns the y intercept of the slope.
            </summary>
            <remarks>
            This method treats the segment as a line, so this will return a value even
            though the segment may not cross the x=0 line.
            </remarks>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeCollection.IsPointInside(System.Single,System.Single)">
            <summary>
            Checks if the designated 2D point is in the 2D shapes of the shape collection
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Geometry.ShapeManager">
            <summary>
            Responsible for creating, destroying, and managing shapes (Circle, AxisAlignedRectangle,
            Polygon, Line).
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForCircles">
            <summary>
            The number of vertices used when drawing a Circle.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForCapsule2Ds">
            <summary>
            The number of vertices used when drawing Capsule2Ds.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForCubes">
            <summary>
            The number of vertices used when drawing an AxisAlignedCube.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.NumberOfVerticesForSpheres">
            <summary>
            The number of vertices used when drawing a Sphere.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Geometry.ShapeManager.mAutomaticallyUpdated">
            <summary>
            List of all managed objects.  This list contains all types of shapes
            (Circles, Polygons, etc).  This list is only used for the TimedActivity;
            not for drawing.  Therefore, shapes can exist both in this list as well as
            in the type-specific lists (mCircles, mPolygons, etc).
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedRectangle">
            <summary>
            Creates and returns a new visible, managed AxisAlignedRectangle.
            </summary>
            <remarks>
            The new AxisAlignedRectangle will be visible, white, and have a ScaleX and ScaleY of 1.
            </remarks>
            <returns>The new AxisAlignedRectangle.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedRectangle(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Adds an already-created AxisAlignedRectangle to the ShapeManager.
            The newly-added AxisAlignedRectangle will be made visible by this method.
            </summary>
            <param name="axisAlignedRectangle">The AxisAlignedRectangle to add.</param>
            <returns>The same AxisAlignedRectangle as was passed to the method.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedRectangleList(FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.AxisAlignedRectangle})">
            <summary>
            Adds all AxisAlignedRectangles contained in the argument axisAlignedRectangleList to the ShapeManager.
            </summary>
            <param name="axisAlignedRectangleList">The list containing the AxisAlignedRectangles.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCapsule2D">
            <summary>
            Adds and returns a new visible, managed Capsule2D.
            </summary>
            <remarks>
            The new Capsule2D will be visible, white, and have an EndpointRadius of 1.
            </remarks>
            <returns>The new Capsule2D.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCapsule2D(FlatRedBall.Math.Geometry.Capsule2D)">
            <summary>
            Adds an already-created Capsule2D to the ShapeManager.
            The newly-added Capsule2D will be made visible by this method.
            </summary>
            <param name="capsule2D">The Capsule2D to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCircle">
            <summary>
            Adds and returns a new visible, managed Circle.
            </summary>
            <remarks>
            The new Circle will be visible, white, and have a Radius of 1.
            </remarks>
            <returns>The new Circle.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCircle(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Adds an already-created Circle to the ShapeManager.
            The newly-added Circle will be made visible by this method.
            </summary>
            <param name="circle">The Circle to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddCircleList(FlatRedBall.Math.PositionedObjectList{FlatRedBall.Math.Geometry.Circle})">
            <summary>
            Adds all Circles contained in the argument circleList to the ShapeManager.
            </summary>
            <param name="circleList">The list containing the Circles.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddSphere">
            <summary>
            Adds and returns a new visible, managed Sphere.
            </summary>
            <remarks>
            The new Sphere will be visible, white, and have a Radius of 1.
            </remarks>
            <returns>The new Sphere.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddSphere(FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Adds an already-created Sphere to the ShapeManager.
            The newly-added Sphere will be made visible by this method.
            </summary>
            <param name="sphere">The Sphere to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedCube">
            <summary>
            Adds a new visible, managed AxisAlignedCube.
            </summary>
            <returns>The new AxisAlignedCube</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddAxisAlignedCube(FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Adds an already-created AxisAlignedCube to the ShapeManager.
            The newly-added AxisAlignedCube will be made visible by this method.
            </summary>
            <param name="axisAlignedCube">The AxisAlignedCube to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddPolygon">
            <summary>
            Adds a new 0-point Polygon to the ShapeManager.
            The newly-added Polygon must have its Points property
            set to be visible and functional.
            </summary>
            <returns>The new Polygon.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddPolygon(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Adds an already-created Polygon to the ShapeManager.
            The newly-added Polygon will be made visible by this method 
            if it has any points.
            </summary>
            <param name="polygon">The Polygon to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddPolygonList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Adds all Polygons contained in the argument polygonList to the ShapeManager.
            </summary>
            <param name="polygonList">The list containing the Polygons.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddLine">
            <summary>
            Adds and returns a new visible, managed Line.
            </summary>
            <remarks>
            The new Line will be visible, white, horizontal,
            and have a length of 2 units.
            </remarks>
            <returns>The new Line.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.AddLine(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Adds an already-created Line to the ShapeManager.
            The newly-added Line will be made visible by this method.
            </summary>
            <param name="line">The Line to add.</param>
            <returns>The instance that was just added.</returns>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Capsule2D)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.BringToFront(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Brings the passed in Shape to the front so it's drawn on top.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Removes the argument AxisAlignedRectangle from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="axisAlignedRectangleToRemove">The AxisAlignedRectangle to remove.  Cannot be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.AxisAlignedCube)">
            <summary>
            Removes the argument AxisAlignedCube from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="axisAlignedCubeToRemove">The AxisAlignedCube to remove.  Cannot be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Capsule2D)">
            <summary>
            Removes the argument Capsule2D from the ShapeManager and any 2-way
            PositionedObjectLists it belongs to.
            </summary>
            <param name="capsule2DToRemove">The Capsule2D to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Circle)">
            <summary>
            Removes the argument Circle from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="circleToRemove">The Circle to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Sphere)">
            <summary>
            Removes the argument Sphere from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="sphereToRemove">The Sphere to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Removes the argument Polygon from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="polygonToRemove">The Polygon to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove(FlatRedBall.Math.Geometry.Line)">
            <summary>
            Removes the argument Line from the ShapeManager and any 2-way PositionedObjectLists it belongs to.
            </summary>
            <param name="lineToRemove">The Line to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.RemoveOneWay(FlatRedBall.Math.Geometry.Polygon)">
            <summary>
            Removes the argument Polygon from the ShapeManager.
            </summary>
            <param name="polygonToRemove">The Polygon to remove.  Should not be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.RemoveOneWay(FlatRedBall.Math.Geometry.AxisAlignedRectangle)">
            <summary>
            Removes the argument AxisAlignedRectangle from the ShapeManager.
            </summary>
            <param name="axisAlignedRectangleToRemove">The AxisAlignedRectangle to remove.  Cannot be null.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.Remove``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes all Polygons held in the argument listToRemove from the Shapemanager and any 2-way PositionedObjectLists they belong to.
            </summary>
            <typeparam name="T">The type of object which must be a Polygon.</typeparam>
            <param name="listToRemove">The list of objects to remove.</param>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.ShapeManager.ToString">
            <summary>
            Returns information about the ShapeManager.
            </summary>
            <returns>A string containing information about the ShapeManager.</returns>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.UseZTestingWhenDrawing">
            <summary>
            Controls whether the ZBuffer is tested against when drawing shapes.
            Set to false to have Shapes drawn on top.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleCircles">
            <summary>
            A read-only list of visible Circles contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleRectangles">
            <summary>
            A read-only list of visible AxisAlignedRectangles contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisiblePolygons">
            <summary>
            A read-only list of visible Polygons contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleLines">
            <summary>
            A read-only list of visible Lines contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleSpheres">
            <summary>
            A read-only list of visible Spheres contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleAxisAlignedCubes">
            <summary>
            A read-only list of visible AxisAlignedCubes contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.VisibleCapsule2Ds">
            <summary>
            A read-only list of visible Capsules contained in the ShapeManager.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.Geometry.ShapeManager.AutomaticallyUpdatedShapes">
            <summary>
            A read-only list of shapes updated by the ShapeManager.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Geometry.Sphere.CollideAgainstMove(FlatRedBall.Math.Geometry.Sphere,System.Single,System.Single)">
            <summary>
            Collision method that returns whether collision has occurred and repositions this and the
            argument Sphere to prevent overlap.
            </summary>
            <param name="sphere">The other Sphere to collide against.</param>
            <param name="thisMass">The mass of the calling Sphere.  This value is used relative to "otherMass".  Both cannot be 0.</param>
            <param name="otherMass">The mass of the argument Sphere.  This value is used relative to "thisMass".  Both cannot be 0.</param>
            <returns>Whether the calling Sphere and the argument Sphere are touching.</returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.AngleToAngle(System.Single,System.Single)">
            <summary>
            Determines the shortest absolute difference between two angles.
            </summary>
            <remarks>
            This method will never return a value with absolute value greater than PI.  It will return 
            either a positive or negative value, keeping all values between positive and negative PI.
            </remarks>
            <param name="angle1">Starting angle in radians.</param>
            <param name="angle2">Ending angle in radians.</param>
            <returns>The number of radians between the two angles.</returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.ExtractRotationValuesFromMatrix(Microsoft.DirectX.Matrix,System.Single@,System.Single@,System.Single@)">
            <summary>
            Extracts the RotationX, RotationY, and RotationZ values out of a 
            </summary>
            <param name="matrixToExtractFrom">The matrix to get the rotation values out of.</param>
            <param name="RotationX">The RotationX of the Matrix.</param>
            <param name="RotationY">The RotationY of the Matrix.</param>
            <param name="RotationZ">The RotationZ of the Matrix.</param>
        </member>
        <member name="F:FlatRedBall.Math.MathFunctions.frameToFrameInteger">
            <summary>
            Determines the shortest absolute difference between two frames.
            </summary>
            <remarks>
            This method will consider moving forward and backward, as well as cycling from the end
            to the beginning of an AnimationChain.
            </remarks>
            <param name="ac">The animationChain to use when determining the distance.</param>
            <param name="frame1">The first frame.</param>
            <param name="frame2">the second frame.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.GetPointOnUnitSphere(System.Random,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns a random point on the surface of a unit sphere.
            </summary>
            <param name="random">Reference to a Random instance.</param>
            <param name="xPos">The resulting X value.</param>
            <param name="yPos">The resulting Y value.</param>
            <param name="zPos">The resulting Z value.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RegulateAngle(System.Single@)">
            <summary>
            Keeps an angle between 0 and 2*PI.
            </summary>
            <param name="angleToRegulate">The angle to regulate.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RotatePointAroundPoint(System.Single,System.Single,System.Single@,System.Single@,System.Single)">
            <summary>
            Rotates a point around another point by a given number of radians.
            </summary>
            <param name="xBase">X position to rotate around.</param>
            <param name="yBase">Y position to rotate around.</param>
            <param name="xToRotate">X position to rotate (changes).</param>
            <param name="yToRotate">Y position to rotate (changes).</param>
            <param name="angleToChangeBy">Radians to rotate by.</param>
        </member>
        <member name="M:FlatRedBall.Math.MathFunctions.RotatePointAroundPoint(FlatRedBall.Math.Geometry.Point,FlatRedBall.Math.Geometry.Point@,System.Single)">
            <summary>
            Rotates a Point around another Point by a given number of radians.
            </summary>
            <param name="basePoint">Point to rotate around.</param>
            <param name="pointToRotate">Point to rotate (changes position).</param>
            <param name="angleToChangeBy">Radians to rotate by.</param>
        </member>
        <member name="T:FlatRedBall.Math.RollingAverage">
            <summary>
            A class which can be used to store and calculate rolling averages for regular numbers and radians.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.RollingAverage.#ctor(System.Int32)">
            <summary>
            Creates a new RolllingAverage with capacity equalling the argument capacity value.
            </summary>
            <param name="capacity">The maximum number of values that the RollingAverage can store.</param>
        </member>
        <member name="M:FlatRedBall.Math.RollingAverage.AddValue(System.Single)">
            <summary>
            Adds a value to the RollingAverage.  The oldest value is discarded if the Capacity has been reached. 
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="P:FlatRedBall.Math.RollingAverage.Average">
            <summary>
            Gets the rolling average using the values currently stored.
            </summary>
            <remarks>
            The rolling average is calculated using the Capacity number of
            values.  If AddValue has not been called enough times to fill the
            Capacity, then the number of values stored are used.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Math.RollingAverage.Capacity">
            <summary>
            Gets the number of values that are used when calculating a rolling average.
            </summary>
        </member>
        <member name="P:FlatRedBall.Math.RollingAverage.IsRadian">
            <summary>
            Gets and sets whether the average value is calculated as radians.
            </summary>
            <remarks>
            This is important for radian values because rotation values reported
            by FlatRedBall loop every 2*PI
            </remarks>
        </member>
        <member name="T:FlatRedBall.Math.Splines.SplineList">
            <summary>
            A List of Splines.  This inherits from a generic List of Splines, but provides
            extra functionality.  This is the runtime type for the .splx format.
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.#ctor">
            <summary>
            Instantiates an empty SplineList
            </summary>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.#ctor(System.Int32)">
            <summary>
            Instantiates a SplineList and sets its capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.#ctor(System.Collections.Generic.IEnumerable{FlatRedBall.Math.Splines.Spline})">
            <summary>
            Instantiates a SplineList and populates it with the Splines contained in the argument IEnumerable.
            </summary>
            <param name="collection">The Splines to add to the newly-created SplineList.</param>
        </member>
        <member name="M:FlatRedBall.Math.Splines.SplineList.FindByName(System.String)">
            <summary>
            Searches for and returns the first Spline with the name matching the argument, or
            null if no matches are found.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The contained Spline with the matching name, or null.</returns>
        </member>
        <member name="P:FlatRedBall.Math.Splines.SplineList.Name">
            <summary>
            The name of the SplineList.  Can be used to provide debug
            and identification information.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Splines.SplinePoint">
            <summary>
            A point in a Spline storing position, velocity, acceleration, and time information.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Position">
            <summary>
            The position of the SplinePoint in absolute world coordinates.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Velocity">
            <summary>
            The velocity of an object as it passes through this SplinePoint when moving along a Spline.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Acceleration">
            <summary>
            The acceleration set when passing through this SplinePoint.  This property is usually
            automatically set by the containing Spline.
            </summary>
        </member>
        <member name="F:FlatRedBall.Math.Splines.SplinePoint.Time">
            <summary>
            The time relative to the start of the Spline when an object moving through the Spline
            will pass through this point.
            </summary>
        </member>
        <member name="T:FlatRedBall.Math.Statistics.LinearRegression">
            <summary>
            A class which can be used to calculate a best-fit line given a set of points.
            </summary>
        </member>
        <member name="T:FlatRedBall.Utilities.CustomBehaviorFunctions">
            <summary>
            Static class containing a collection of common methods used as CustomBehaviors.
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenInvisible(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite when its Alpha equals 0.
            </summary>
            <param name="sprite">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenOutsideOfScreen(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite when it is outside of the default Camera's view (SpriteManager.Camera).
            </summary>
            <param name="sprite">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenJustCycled(FlatRedBall.Sprite)">
            <summary>
            Removes teh argument Sprite after it cycles its AnimationChain.  
            </summary>
            <param name="sprite">The Sprite to remove.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.CustomBehaviorFunctions.RemoveWhenAlphaIs1(FlatRedBall.Sprite)">
            <summary>
            Removes the argument Sprite if it is opaque.
            </summary>
            <remarks>
            This method is commonly used with Sprites which have a 
            positive AlphaRate and which should be removed when completely visible.
            </remarks>
            <param name="si">Sprite to remove.</param>\
        </member>
        <member name="T:FlatRedBall.Utilities.DebuggingFunctions">
            <summary>
            Class providing methods which can help during debugging.
            </summary>
        </member>
        <member name="T:FlatRedBall.Utilities.SpriteSelectionOptions">
            <summary>
            Contains information for simulating an expansion or contraction of a Sprite. 
            </summary>
            <remarks>
            This struct is used by a number of FlatRedball classes such as SpriteGrid and MathFunctions.
            </remarks>
        </member>
        <member name="T:FlatRedBall.Utilities.StringEnum">
            <summary>
            Helper class for working with 'extended' enums using <see cref="T:FlatRedBall.Utilities.StringValueAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:FlatRedBall.Utilities.StringEnum"/> instance.
            </summary>
            <param name="enumType">Enum type.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.GetStringValue(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valueName">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.GetListValues">
            <summary>
            Gets the values as a 'bindable' list datasource.
            </summary>
            <returns>IList for data binding</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.IsStringDefined(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:FlatRedBall.Utilities.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.IsStringDefined(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringEnum.IsStringDefined(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="P:FlatRedBall.Utilities.StringEnum.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:FlatRedBall.Utilities.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:FlatRedBall.Utilities.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:FlatRedBall.Utilities.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:FlatRedBall.Utilities.StringFunctions">
            <summary>
            A class containing common string maniuplation methods.
            </summary>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.CharacterCountWithoutWhitespace(System.String)">
            <summary>
            Returns the number of non-whitespace characters in the argument stringInQuestion.
            </summary>
            <remarks>
            This method is used internally by the TextManager to determine the number of vertices needed to
            draw a Text object.
            </remarks>
            <param name="stringInQuestion">The string to have its non-witespace counted.</param>
            <returns>The number of non-whitespace characters counted.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.FloatToString(System.Single,System.Int32)">
            <summary>
            Returns a string of the float with the argument decimalsAfterPoint digits of resolution after the point.
            </summary>
            <param name="floatToConvert">The float to convert.</param>
            <param name="decimalsAfterPoint">The number of decimals after the point.  For example, 3.14159 becomes "3.14" if the
            decimalsAfterPoint is 2.  This method will not append extra decimals to reach the argument decimalsAfterPoint.</param>
            <returns>The string representation of the argument float.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetCharAfter(System.String,System.String)">
            <summary>
            Returns the character that can be found after a particular sequence of characters.
            </summary>
            <remarks>
            This will return the first character following a particular sequence of characters.  For example, 
            GetCharAfter("bcd", "abcdef") would return 'e'.
            </remarks>
            <param name="stringToSearchFor">The string to search for.</param>
            <param name="whereToSearch">The string to search in.</param>
            <returns>Returns the character found or the null character '\0' if the string is not found.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetFloatAfter(System.String,System.String)">
            <summary>
            Returns the float that can be found after a particular sequence of characters.
            </summary>
            <remarks>
            This will return the float following a particular sequence of characters.  For example, 
            GetCharAfter("height = 6; width = 3; depth = 7;", "width = ") would return 3.0f. 
            </remarks>
            <param name="stringToSearchFor">The string to search for.</param>
            <param name="whereToSearch">The string to search in.</param>
            <returns>Returns the float value found or float.NaN if the string is not found.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetIntAfter(System.String,System.String)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor in whereToSearch.
            </summary>
            <remarks>
            This method is used to help simplify parsing of text files and data strings.
            If stringToSearchFor is "Y:" and whereToSearch is "X: 30, Y:32", then the value
            of 32 will be returned.
            </remarks>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <returns>The integer value found after the argument stringToSearchFor.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetIntAfter(System.String,System.String,System.Int32)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor.  The search begins
            at the argument startIndex.
            </summary>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <param name="startIndex">The index to begin searching at.  This method
            will ignore any instances of stringToSearchFor which begin at an index smaller
            than the argument startIndex.</param>
            <returns></returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetLineCount(System.String)">
            <summary>
            Returns the number of lines in a given string.  Newlines '\n' increase the 
            line count.
            </summary>
            <param name="stringInQuestion">The string that will have its lines counted.</param>
            <returns>The number of lines in the argument.  "Hello" will return a value of 1, "Hello\nthere" will return a value of 2.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.GetNumberAtEnd(System.String)">
            <summary>
            Returns the number found at the end of the argument stringToGetNumberFrom or throws an
            ArgumentException if no number is found.
            </summary>
            <remarks>
            A stringToGetNumberFrom of "sprite41" will result in the value of 41 returned.  A 
            stringToGetNumberFrom of "sprite" will result in an ArgumentException being thrown.
            </remarks>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if no number is found at the end of the argument string.</exception>
            <param name="stringToGetNumberFrom">The number found at the end.</param>
            <returns>The integer value found at the end of the stringToGetNumberFrom.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.IncrementNumberAtEnd(System.String)">
            <summary>
            Increments the number at the end of a string or adds a number if none exists.
            </summary>
            <remarks>
            This method begins looking at the end of a string for numbers and moves towards the beginning of the string
            until it encounters a character which is not a numerical digit or the beginning of the string.  "Sprite123" would return
            "Sprite124", and "MyString" would return "MyString1".
            </remarks>
            <param name="originalString">The string to "increment".</param>
            <returns>Returns a string with the number at the end incremented, or with a number added on the end if none existed before.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.InsertSpacesInCamelCaseString(System.String)">
            <summary>
            Inserts spaces before every capital letter in a camel-case
            string.  Ignores the first letter.
            </summary>
            <remarks>
            For example "HelloThereIAmCamelCase" becomes
            "Hello There I Am Camel Case".
            </remarks>
            <param name="originalString">The string in which to insert spaces.</param>
            <returns>The string with spaces inserted.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.MakeNameUnique``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Renames the argument INameable to prevent duplicate names.  This method is extremely inefficent for large lists.
            </summary>
            <typeparam name="T">The type of INameable contained int he list.</typeparam>
            <param name="nameable">The INameable to rename if necessary.</param>
            <param name="list">The list containing the INameables to compare against.</param>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.RemoveNumberAtEnd(System.String)">
            <summary>
            Removes the number found at the end of the argument originalString and returns the resulting
            string, or returns the original string if no number is found.
            </summary>
            <param name="originalString">The string that will have the number at its end removed.</param>
            <returns>The string after the number has been removed.</returns>
        </member>
        <member name="M:FlatRedBall.Utilities.StringFunctions.RemoveWhitespace(System.String)">
            <summary>
            Removes all whitespace found in the argument stringToRemoveWhitespaceFrom.
            </summary>
            <param name="stringToRemoveWhitespaceFrom">The string that will have its whitespace removed.</param>
            <returns>The string resulting from removing whitespace from the argument string.</returns>
        </member>
    </members>
</doc>
